
RC_Plane_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b14  08007b14  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b1c  08007b1c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007b24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000007c  08007ba0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08007ba0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168a2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5b  00000000  00000000  0003694e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  000395b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001960b  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142b9  00000000  00000000  00054fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e36c  00000000  00000000  0006928c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001075f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c4  00000000  00000000  0010764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074c4 	.word	0x080074c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080074c4 	.word	0x080074c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	volatile uint32_t uSecVar = uSec;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <NRF24_DelayMicroSeconds+0x3c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <NRF24_DelayMicroSeconds+0x40>)
 800059a:	fba2 2303 	umull	r2, r3, r2, r3
 800059e:	0c9b      	lsrs	r3, r3, #18
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005a8:	bf00      	nop
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	60fa      	str	r2, [r7, #12]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1fa      	bne.n	80005aa <NRF24_DelayMicroSeconds+0x22>
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	165e9f81 	.word	0x165e9f81

080005cc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <NRF24_csn+0x20>
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <NRF24_csn+0x38>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <NRF24_csn+0x3c>)
 80005e0:	8811      	ldrh	r1, [r2, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fb4d 	bl	8003c84 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ea:	e007      	b.n	80005fc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <NRF24_csn+0x38>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <NRF24_csn+0x3c>)
 80005f2:	8811      	ldrh	r1, [r2, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fb44 	bl	8003c84 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000a0 	.word	0x200000a0
 8000608:	200000a4 	.word	0x200000a4

0800060c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <NRF24_ce+0x20>
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <NRF24_ce+0x38>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <NRF24_ce+0x3c>)
 8000620:	8811      	ldrh	r1, [r2, #0]
 8000622:	2201      	movs	r2, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fb2d 	bl	8003c84 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800062a:	e007      	b.n	800063c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <NRF24_ce+0x38>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <NRF24_ce+0x3c>)
 8000632:	8811      	ldrh	r1, [r2, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fb24 	bl	8003c84 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000a0 	.word	0x200000a0
 8000648:	200000a6 	.word	0x200000a6

0800064c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffb8 	bl	80005cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 031f 	and.w	r3, r3, #31
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <NRF24_read_register+0x4c>)
 8000670:	f004 f883 	bl	800477a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	1c59      	adds	r1, r3, #1
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	2201      	movs	r2, #1
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <NRF24_read_register+0x4c>)
 8000680:	f004 f9b7 	bl	80049f2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000684:	7b7b      	ldrb	r3, [r7, #13]
 8000686:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff9f 	bl	80005cc <NRF24_csn>
	return retData;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000a8 	.word	0x200000a8

0800069c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ff8d 	bl	80005cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 031f 	and.w	r3, r3, #31
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	2201      	movs	r2, #1
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <NRF24_read_registerN+0x4c>)
 80006c6:	f004 f858 	bl	800477a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <NRF24_read_registerN+0x4c>)
 80006d4:	f004 f98d 	bl	80049f2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff77 	bl	80005cc <NRF24_csn>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a8 	.word	0x200000a8

080006ec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff65 	bl	80005cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	b2db      	uxtb	r3, r3
 800070a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	2202      	movs	r2, #2
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <NRF24_write_register+0x40>)
 800071a:	f004 f82e 	bl	800477a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ff54 	bl	80005cc <NRF24_csn>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000a8 	.word	0x200000a8

08000730 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff43 	bl	80005cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	b2db      	uxtb	r3, r3
 800074e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000750:	f107 010c 	add.w	r1, r7, #12
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <NRF24_write_registerN+0x4c>)
 800075a:	f004 f80e 	bl	800477a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	b29a      	uxth	r2, r3
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	6839      	ldr	r1, [r7, #0]
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <NRF24_write_registerN+0x4c>)
 8000768:	f004 f807 	bl	800477a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff2d 	bl	80005cc <NRF24_csn>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000a8 	.word	0x200000a8

08000780 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff ff1d 	bl	80005cc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000796:	f107 010f 	add.w	r1, r7, #15
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <NRF24_write_payload+0x40>)
 80007a0:	f003 ffeb 	bl	800477a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <NRF24_write_payload+0x40>)
 80007ae:	f003 ffe4 	bl	800477a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ff0a 	bl	80005cc <NRF24_csn>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007c8:	21ff      	movs	r1, #255	; 0xff
 80007ca:	20e1      	movs	r0, #225	; 0xe1
 80007cc:	f7ff ff8e 	bl	80006ec <NRF24_write_register>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80007d8:	21ff      	movs	r1, #255	; 0xff
 80007da:	20e2      	movs	r0, #226	; 0xe2
 80007dc:	f7ff ff86 	bl	80006ec <NRF24_write_register>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80007ea:	2007      	movs	r0, #7
 80007ec:	f7ff ff2e 	bl	800064c <NRF24_read_register>
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000800:	b082      	sub	sp, #8
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
 8000810:	4613      	mov	r3, r2
 8000812:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000814:	4b66      	ldr	r3, [pc, #408]	; (80009b0 <NRF24_begin+0x1b0>)
 8000816:	4618      	mov	r0, r3
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2258      	movs	r2, #88	; 0x58
 800081e:	4619      	mov	r1, r3
 8000820:	f005 fcaa 	bl	8006178 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000824:	4a63      	ldr	r2, [pc, #396]	; (80009b4 <NRF24_begin+0x1b4>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800082a:	4a63      	ldr	r2, [pc, #396]	; (80009b8 <NRF24_begin+0x1b8>)
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000830:	4a62      	ldr	r2, [pc, #392]	; (80009bc <NRF24_begin+0x1bc>)
 8000832:	883b      	ldrh	r3, [r7, #0]
 8000834:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fec8 	bl	80005cc <NRF24_csn>
	NRF24_ce(0);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fee5 	bl	800060c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000842:	2005      	movs	r0, #5
 8000844:	f001 fed8 	bl	80025f8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000848:	2108      	movs	r1, #8
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff4e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000850:	213f      	movs	r1, #63	; 0x3f
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff ff4a 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000858:	2103      	movs	r1, #3
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ff46 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000860:	2103      	movs	r1, #3
 8000862:	2003      	movs	r0, #3
 8000864:	f7ff ff42 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000868:	2103      	movs	r1, #3
 800086a:	2004      	movs	r0, #4
 800086c:	f7ff ff3e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000870:	2102      	movs	r1, #2
 8000872:	2005      	movs	r0, #5
 8000874:	f7ff ff3a 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000878:	210f      	movs	r1, #15
 800087a:	2006      	movs	r0, #6
 800087c:	f7ff ff36 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000880:	210e      	movs	r1, #14
 8000882:	2007      	movs	r0, #7
 8000884:	f7ff ff32 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000888:	2100      	movs	r1, #0
 800088a:	2008      	movs	r0, #8
 800088c:	f7ff ff2e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000890:	2100      	movs	r1, #0
 8000892:	2009      	movs	r0, #9
 8000894:	f7ff ff2a 	bl	80006ec <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000898:	23e7      	movs	r3, #231	; 0xe7
 800089a:	733b      	strb	r3, [r7, #12]
 800089c:	23e7      	movs	r3, #231	; 0xe7
 800089e:	72fb      	strb	r3, [r7, #11]
 80008a0:	23e7      	movs	r3, #231	; 0xe7
 80008a2:	72bb      	strb	r3, [r7, #10]
 80008a4:	23e7      	movs	r3, #231	; 0xe7
 80008a6:	727b      	strb	r3, [r7, #9]
 80008a8:	23e7      	movs	r3, #231	; 0xe7
 80008aa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2205      	movs	r2, #5
 80008b2:	4619      	mov	r1, r3
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff ff3b 	bl	8000730 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80008ba:	23c2      	movs	r3, #194	; 0xc2
 80008bc:	733b      	strb	r3, [r7, #12]
 80008be:	23c2      	movs	r3, #194	; 0xc2
 80008c0:	72fb      	strb	r3, [r7, #11]
 80008c2:	23c2      	movs	r3, #194	; 0xc2
 80008c4:	72bb      	strb	r3, [r7, #10]
 80008c6:	23c2      	movs	r3, #194	; 0xc2
 80008c8:	727b      	strb	r3, [r7, #9]
 80008ca:	23c2      	movs	r3, #194	; 0xc2
 80008cc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2205      	movs	r2, #5
 80008d4:	4619      	mov	r1, r3
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff ff2a 	bl	8000730 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008dc:	21c3      	movs	r1, #195	; 0xc3
 80008de:	200c      	movs	r0, #12
 80008e0:	f7ff ff04 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008e4:	21c4      	movs	r1, #196	; 0xc4
 80008e6:	200d      	movs	r0, #13
 80008e8:	f7ff ff00 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008ec:	21c5      	movs	r1, #197	; 0xc5
 80008ee:	200e      	movs	r0, #14
 80008f0:	f7ff fefc 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008f4:	21c6      	movs	r1, #198	; 0xc6
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fef8 	bl	80006ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80008fc:	23e7      	movs	r3, #231	; 0xe7
 80008fe:	733b      	strb	r3, [r7, #12]
 8000900:	23e7      	movs	r3, #231	; 0xe7
 8000902:	72fb      	strb	r3, [r7, #11]
 8000904:	23e7      	movs	r3, #231	; 0xe7
 8000906:	72bb      	strb	r3, [r7, #10]
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	727b      	strb	r3, [r7, #9]
 800090c:	23e7      	movs	r3, #231	; 0xe7
 800090e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2205      	movs	r2, #5
 8000916:	4619      	mov	r1, r3
 8000918:	2010      	movs	r0, #16
 800091a:	f7ff ff09 	bl	8000730 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800091e:	2100      	movs	r1, #0
 8000920:	2011      	movs	r0, #17
 8000922:	f7ff fee3 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000926:	2100      	movs	r1, #0
 8000928:	2012      	movs	r0, #18
 800092a:	f7ff fedf 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2013      	movs	r0, #19
 8000932:	f7ff fedb 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	2014      	movs	r0, #20
 800093a:	f7ff fed7 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	2015      	movs	r0, #21
 8000942:	f7ff fed3 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2016      	movs	r0, #22
 800094a:	f7ff fecf 	bl	80006ec <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800094e:	f000 fa89 	bl	8000e64 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff fec9 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	201d      	movs	r0, #29
 800095e:	f7ff fec5 	bl	80006ec <NRF24_write_register>
	printRadioSettings();
 8000962:	f000 fa99 	bl	8000e98 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000966:	210f      	movs	r1, #15
 8000968:	200f      	movs	r0, #15
 800096a:	f000 f8ad 	bl	8000ac8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f927 	bl	8000bc2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f95d 	bl	8000c34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800097a:	2002      	movs	r0, #2
 800097c:	f000 f9a0 	bl	8000cc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000980:	f000 f8f2 	bl	8000b68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000984:	2020      	movs	r0, #32
 8000986:	f000 f8cf 	bl	8000b28 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800098a:	f000 fa62 	bl	8000e52 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800098e:	204c      	movs	r0, #76	; 0x4c
 8000990:	f000 f8b5 	bl	8000afe <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000994:	f7ff ff16 	bl	80007c4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000998:	f7ff ff1c 	bl	80007d4 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800099c:	f000 f9b8 	bl	8000d10 <NRF24_powerDown>
	
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009aa:	b002      	add	sp, #8
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000a8 	.word	0x200000a8
 80009b4:	200000a0 	.word	0x200000a0
 80009b8:	200000a4 	.word	0x200000a4
 80009bc:	200000a6 	.word	0x200000a6

080009c0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fe21 	bl	800060c <NRF24_ce>
	NRF24_flush_tx();
 80009ca:	f7ff fefb 	bl	80007c4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009ce:	f7ff ff01 	bl	80007d4 <NRF24_flush_rx>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009e4:	f000 fa35 	bl	8000e52 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	4619      	mov	r1, r3
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f9ce 	bl	8000d8e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009f2:	f001 fdf5 	bl	80025e0 <HAL_GetTick>
 80009f6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009f8:	230a      	movs	r3, #10
 80009fa:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009fc:	f107 030d 	add.w	r3, r7, #13
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	2008      	movs	r0, #8
 8000a06:	f7ff fe49 	bl	800069c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a0a:	f7ff feeb 	bl	80007e4 <NRF24_get_status>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d107      	bne.n	8000a2c <NRF24_write+0x54>
 8000a1c:	f001 fde0 	bl	80025e0 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8e7      	bhi.n	80009fc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a2c:	f107 010b 	add.w	r1, r7, #11
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <NRF24_write+0x90>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f9d8 	bl	8000dec <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a3c:	7b3b      	ldrb	r3, [r7, #12]
 8000a3e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <NRF24_write+0x90>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d005      	beq.n	8000a54 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a48:	f000 f886 	bl	8000b58 <NRF24_getDynamicPayloadSize>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <NRF24_write+0x94>)
 8000a52:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a54:	f000 f80c 	bl	8000a70 <NRF24_available>
	NRF24_flush_tx();
 8000a58:	f7ff feb4 	bl	80007c4 <NRF24_flush_tx>
	return retStatus;
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000098 	.word	0x20000098
 8000a6c:	20000099 	.word	0x20000099

08000a70 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f95a 	bl	8000d2e <NRF24_availablePipe>
 8000a7a:	4603      	mov	r3, r0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	4619      	mov	r1, r3
 8000a90:	200a      	movs	r0, #10
 8000a92:	f7ff fe4d 	bl	8000730 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2205      	movs	r2, #5
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f7ff fe47 	bl	8000730 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <NRF24_openWritingPipe+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	7bfa      	ldrb	r2, [r7, #15]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	bf28      	it	cs
 8000ab0:	4613      	movcs	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff fe18 	bl	80006ec <NRF24_write_register>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000009a 	.word	0x2000009a

08000ac8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	2004      	movs	r0, #4
 8000af2:	f7ff fdfb 	bl	80006ec <NRF24_write_register>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b08:	237f      	movs	r3, #127	; 0x7f
 8000b0a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4293      	cmp	r3, r2
 8000b12:	bf28      	it	cs
 8000b14:	4613      	movcs	r3, r2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f7ff fde6 	bl	80006ec <NRF24_write_register>
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b32:	2320      	movs	r3, #32
 8000b34:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	bf28      	it	cs
 8000b3e:	4613      	movcs	r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <NRF24_setPayloadSize+0x2c>)
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000009a 	.word	0x2000009a

08000b58 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b5c:	2060      	movs	r0, #96	; 0x60
 8000b5e:	f7ff fd75 	bl	800064c <NRF24_read_register>
 8000b62:	4603      	mov	r3, r0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b6c:	201d      	movs	r0, #29
 8000b6e:	f7ff fd6d 	bl	800064c <NRF24_read_register>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f023 0304 	bic.w	r3, r3, #4
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	201d      	movs	r0, #29
 8000b7e:	f7ff fdb5 	bl	80006ec <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	201c      	movs	r0, #28
 8000b86:	f7ff fdb1 	bl	80006ec <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b8a:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <NRF24_disableDynamicPayloads+0x2c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000009b 	.word	0x2000009b

08000b98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ba8:	213f      	movs	r1, #63	; 0x3f
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fd9e 	bl	80006ec <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bb0:	e003      	b.n	8000bba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fd99 	bl	80006ec <NRF24_write_register>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f7ff fd3d 	bl	800064c <NRF24_read_register>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f023 0306 	bic.w	r3, r3, #6
 8000bdc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d104      	bne.n	8000bee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 0306 	orr.w	r3, r3, #6
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e019      	b.n	8000c22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d104      	bne.n	8000bfe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e011      	b.n	8000c22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d104      	bne.n	8000c0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e009      	b.n	8000c22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d103      	bne.n	8000c22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	f043 0306 	orr.w	r3, r3, #6
 8000c20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4619      	mov	r1, r3
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff fd60 	bl	80006ec <NRF24_write_register>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c42:	2006      	movs	r0, #6
 8000c44:	f7ff fd02 	bl	800064c <NRF24_read_register>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d107      	bne.n	8000c70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	f043 0320 	orr.w	r3, r3, #32
 8000c6c:	73bb      	strb	r3, [r7, #14]
 8000c6e:	e00d      	b.n	8000c8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d107      	bne.n	8000c86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	73bb      	strb	r3, [r7, #14]
 8000c84:	e002      	b.n	8000c8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff fd2b 	bl	80006ec <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000c96:	2006      	movs	r0, #6
 8000c98:	f7ff fcd8 	bl	800064c <NRF24_read_register>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d102      	bne.n	8000cac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e002      	b.n	8000cb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000009c 	.word	0x2000009c

08000cc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fcbe 	bl	800064c <NRF24_read_register>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f023 030c 	bic.w	r3, r3, #12
 8000cd6:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00f      	beq.n	8000cfe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d104      	bne.n	8000cee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e007      	b.n	8000cfe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fcf2 	bl	80006ec <NRF24_write_register>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fc99 	bl	800064c <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f023 0302 	bic.w	r3, r3, #2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fce1 	bl	80006ec <NRF24_write_register>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d36:	f7ff fd55 	bl	80007e4 <NRF24_get_status>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d017      	beq.n	8000d84 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	085b      	lsrs	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f7ff fcbd 	bl	80006ec <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff fcb4 	bl	80006ec <NRF24_write_register>
    }
  }
  return result;
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fc36 	bl	800060c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fc53 	bl	800064c <NRF24_read_register>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fc98 	bl	80006ec <NRF24_write_register>
  NRF24_ce(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fc25 	bl	800060c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000dc2:	2096      	movs	r0, #150	; 0x96
 8000dc4:	f7ff fbe0 	bl	8000588 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fcd7 	bl	8000780 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fc1a 	bl	800060c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000dd8:	200f      	movs	r0, #15
 8000dda:	f7ff fbd5 	bl	8000588 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fc14 	bl	800060c <NRF24_ce>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000df8:	f7ff fcf4 	bl	80007e4 <NRF24_get_status>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e06:	2170      	movs	r1, #112	; 0x70
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f7ff fc6f 	bl	80006ec <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf14      	ite	ne
 8000e40:	2301      	movne	r3, #1
 8000e42:	2300      	moveq	r3, #0
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e56:	2170      	movs	r1, #112	; 0x70
 8000e58:	2007      	movs	r0, #7
 8000e5a:	f7ff fc47 	bl	80006ec <NRF24_write_register>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fbae 	bl	80005cc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e70:	2350      	movs	r3, #80	; 0x50
 8000e72:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000e74:	2373      	movs	r3, #115	; 0x73
 8000e76:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <NRF24_ACTIVATE_cmd+0x30>)
 8000e80:	f003 fc7b 	bl	800477a <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fba1 	bl	80005cc <NRF24_csn>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000a8 	.word	0x200000a8

08000e98 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b0a1      	sub	sp, #132	; 0x84
 8000e9c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	49c3      	ldr	r1, [pc, #780]	; (80011b0 <printRadioSettings+0x318>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fa0b 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f996 	bl	80001e0 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0108 	add.w	r1, r7, #8
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	48bd      	ldr	r0, [pc, #756]	; (80011b4 <printRadioSettings+0x31c>)
 8000ec0:	f004 fe67 	bl	8005b92 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fbc1 	bl	800064c <NRF24_read_register>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000ed0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <printRadioSettings+0x5e>
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	49b2      	ldr	r1, [pc, #712]	; (80011b8 <printRadioSettings+0x320>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f005 f9e6 	bl	80062c0 <siprintf>
 8000ef4:	e00c      	b.n	8000f10 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	49b0      	ldr	r1, [pc, #704]	; (80011bc <printRadioSettings+0x324>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f9df 	bl	80062c0 <siprintf>
 8000f02:	e005      	b.n	8000f10 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	49ad      	ldr	r1, [pc, #692]	; (80011c0 <printRadioSettings+0x328>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 f9d8 	bl	80062c0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f963 	bl	80001e0 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 0108 	add.w	r1, r7, #8
 8000f22:	230a      	movs	r3, #10
 8000f24:	48a3      	ldr	r0, [pc, #652]	; (80011b4 <printRadioSettings+0x31c>)
 8000f26:	f004 fe34 	bl	8005b92 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fb8e 	bl	800064c <NRF24_read_register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f3a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bfcc      	ite	gt
 8000f42:	2301      	movgt	r3, #1
 8000f44:	2300      	movle	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f4e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bfcc      	ite	gt
 8000f56:	2301      	movgt	r3, #1
 8000f58:	2300      	movle	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f62:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bfcc      	ite	gt
 8000f6a:	2301      	movgt	r3, #1
 8000f6c:	2300      	movle	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f76:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bfcc      	ite	gt
 8000f7e:	2301      	movgt	r3, #1
 8000f80:	2300      	movle	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f8a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfcc      	ite	gt
 8000f92:	2301      	movgt	r3, #1
 8000f94:	2300      	movle	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bfcc      	ite	gt
 8000fa6:	2301      	movgt	r3, #1
 8000fa8:	2300      	movle	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f107 0008 	add.w	r0, r7, #8
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	9402      	str	r4, [sp, #8]
 8000fb4:	9101      	str	r1, [sp, #4]
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	4633      	mov	r3, r6
 8000fba:	462a      	mov	r2, r5
 8000fbc:	4981      	ldr	r1, [pc, #516]	; (80011c4 <printRadioSettings+0x32c>)
 8000fbe:	f005 f97f 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f90a 	bl	80001e0 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	4877      	ldr	r0, [pc, #476]	; (80011b4 <printRadioSettings+0x31c>)
 8000fd8:	f004 fddb 	bl	8005b92 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fb35 	bl	800064c <NRF24_read_register>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fec:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bfcc      	ite	gt
 8000ff4:	2301      	movgt	r3, #1
 8000ff6:	2300      	movle	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ffc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001000:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001004:	2b00      	cmp	r3, #0
 8001006:	bfcc      	ite	gt
 8001008:	2301      	movgt	r3, #1
 800100a:	2300      	movle	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001014:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001018:	2b00      	cmp	r3, #0
 800101a:	bfcc      	ite	gt
 800101c:	2301      	movgt	r3, #1
 800101e:	2300      	movle	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001024:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001028:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800102c:	2b00      	cmp	r3, #0
 800102e:	bfcc      	ite	gt
 8001030:	2301      	movgt	r3, #1
 8001032:	2300      	movle	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001038:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800103c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001040:	2b00      	cmp	r3, #0
 8001042:	bfcc      	ite	gt
 8001044:	2301      	movgt	r3, #1
 8001046:	2300      	movle	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800104c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001050:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001054:	2b00      	cmp	r3, #0
 8001056:	bfcc      	ite	gt
 8001058:	2301      	movgt	r3, #1
 800105a:	2300      	movle	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f107 0008 	add.w	r0, r7, #8
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	9402      	str	r4, [sp, #8]
 8001066:	9101      	str	r1, [sp, #4]
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	4633      	mov	r3, r6
 800106c:	462a      	mov	r2, r5
 800106e:	4956      	ldr	r1, [pc, #344]	; (80011c8 <printRadioSettings+0x330>)
 8001070:	f005 f926 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 0108 	add.w	r1, r7, #8
 8001086:	230a      	movs	r3, #10
 8001088:	484a      	ldr	r0, [pc, #296]	; (80011b4 <printRadioSettings+0x31c>)
 800108a:	f004 fd82 	bl	8005b92 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800108e:	2003      	movs	r0, #3
 8001090:	f7ff fadc 	bl	800064c <NRF24_read_register>
 8001094:	4603      	mov	r3, r0
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800109e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a2:	3302      	adds	r3, #2
 80010a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80010a8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4946      	ldr	r1, [pc, #280]	; (80011cc <printRadioSettings+0x334>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 f904 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f88f 	bl	80001e0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f107 0108 	add.w	r1, r7, #8
 80010ca:	230a      	movs	r3, #10
 80010cc:	4839      	ldr	r0, [pc, #228]	; (80011b4 <printRadioSettings+0x31c>)
 80010ce:	f004 fd60 	bl	8005b92 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80010d2:	2005      	movs	r0, #5
 80010d4:	f7ff faba 	bl	800064c <NRF24_read_register>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80010de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4939      	ldr	r1, [pc, #228]	; (80011d0 <printRadioSettings+0x338>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 f8e7 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	230a      	movs	r3, #10
 8001106:	482b      	ldr	r0, [pc, #172]	; (80011b4 <printRadioSettings+0x31c>)
 8001108:	f004 fd43 	bl	8005b92 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800110c:	2006      	movs	r0, #6
 800110e:	f7ff fa9d 	bl	800064c <NRF24_read_register>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x29a>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	492a      	ldr	r1, [pc, #168]	; (80011d4 <printRadioSettings+0x33c>)
 800112a:	4618      	mov	r0, r3
 800112c:	f005 f8c8 	bl	80062c0 <siprintf>
 8001130:	e005      	b.n	800113e <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4928      	ldr	r1, [pc, #160]	; (80011d8 <printRadioSettings+0x340>)
 8001138:	4618      	mov	r0, r3
 800113a:	f005 f8c1 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f84c 	bl	80001e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f107 0108 	add.w	r1, r7, #8
 8001150:	230a      	movs	r3, #10
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <printRadioSettings+0x31c>)
 8001154:	f004 fd1d 	bl	8005b92 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115c:	f003 0306 	and.w	r3, r3, #6
 8001160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001164:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800116e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <printRadioSettings+0x2ec>
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4918      	ldr	r1, [pc, #96]	; (80011dc <printRadioSettings+0x344>)
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f89f 	bl	80062c0 <siprintf>
 8001182:	e03b      	b.n	80011fc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <printRadioSettings+0x302>
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4913      	ldr	r1, [pc, #76]	; (80011e0 <printRadioSettings+0x348>)
 8001192:	4618      	mov	r0, r3
 8001194:	f005 f894 	bl	80062c0 <siprintf>
 8001198:	e030      	b.n	80011fc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d122      	bne.n	80011e8 <printRadioSettings+0x350>
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	490f      	ldr	r1, [pc, #60]	; (80011e4 <printRadioSettings+0x34c>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 f889 	bl	80062c0 <siprintf>
 80011ae:	e025      	b.n	80011fc <printRadioSettings+0x364>
 80011b0:	080074dc 	.word	0x080074dc
 80011b4:	20000100 	.word	0x20000100
 80011b8:	08007510 	.word	0x08007510
 80011bc:	0800752c 	.word	0x0800752c
 80011c0:	08007548 	.word	0x08007548
 80011c4:	0800755c 	.word	0x0800755c
 80011c8:	080075a0 	.word	0x080075a0
 80011cc:	080075ec 	.word	0x080075ec
 80011d0:	08007608 	.word	0x08007608
 80011d4:	0800761c 	.word	0x0800761c
 80011d8:	08007634 	.word	0x08007634
 80011dc:	0800764c 	.word	0x0800764c
 80011e0:	08007660 	.word	0x08007660
 80011e4:	08007674 	.word	0x08007674
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d105      	bne.n	80011fc <printRadioSettings+0x364>
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	49d7      	ldr	r1, [pc, #860]	; (8001554 <printRadioSettings+0x6bc>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 f862 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffed 	bl	80001e0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	48d1      	ldr	r0, [pc, #836]	; (8001558 <printRadioSettings+0x6c0>)
 8001212:	f004 fcbe 	bl	8005b92 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001216:	463b      	mov	r3, r7
 8001218:	2205      	movs	r2, #5
 800121a:	4619      	mov	r1, r3
 800121c:	200a      	movs	r0, #10
 800121e:	f7ff fa3d 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	461c      	mov	r4, r3
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	461d      	mov	r5, r3
 800122a:	78bb      	ldrb	r3, [r7, #2]
 800122c:	787a      	ldrb	r2, [r7, #1]
 800122e:	7839      	ldrb	r1, [r7, #0]
 8001230:	f107 0008 	add.w	r0, r7, #8
 8001234:	9102      	str	r1, [sp, #8]
 8001236:	9201      	str	r2, [sp, #4]
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	462b      	mov	r3, r5
 800123c:	4622      	mov	r2, r4
 800123e:	49c7      	ldr	r1, [pc, #796]	; (800155c <printRadioSettings+0x6c4>)
 8001240:	f005 f83e 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc9 	bl	80001e0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 0108 	add.w	r1, r7, #8
 8001256:	230a      	movs	r3, #10
 8001258:	48bf      	ldr	r0, [pc, #764]	; (8001558 <printRadioSettings+0x6c0>)
 800125a:	f004 fc9a 	bl	8005b92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800125e:	463b      	mov	r3, r7
 8001260:	2205      	movs	r2, #5
 8001262:	4619      	mov	r1, r3
 8001264:	200b      	movs	r0, #11
 8001266:	f7ff fa19 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	461c      	mov	r4, r3
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	461d      	mov	r5, r3
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	787a      	ldrb	r2, [r7, #1]
 8001276:	7839      	ldrb	r1, [r7, #0]
 8001278:	f107 0008 	add.w	r0, r7, #8
 800127c:	9102      	str	r1, [sp, #8]
 800127e:	9201      	str	r2, [sp, #4]
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	462b      	mov	r3, r5
 8001284:	4622      	mov	r2, r4
 8001286:	49b6      	ldr	r1, [pc, #728]	; (8001560 <printRadioSettings+0x6c8>)
 8001288:	f005 f81a 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffa5 	bl	80001e0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 0108 	add.w	r1, r7, #8
 800129e:	230a      	movs	r3, #10
 80012a0:	48ad      	ldr	r0, [pc, #692]	; (8001558 <printRadioSettings+0x6c0>)
 80012a2:	f004 fc76 	bl	8005b92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80012a6:	463b      	mov	r3, r7
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	200c      	movs	r0, #12
 80012ae:	f7ff f9f5 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012b2:	783b      	ldrb	r3, [r7, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	49aa      	ldr	r1, [pc, #680]	; (8001564 <printRadioSettings+0x6cc>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 ffff 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff8a 	bl	80001e0 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f107 0108 	add.w	r1, r7, #8
 80012d4:	230a      	movs	r3, #10
 80012d6:	48a0      	ldr	r0, [pc, #640]	; (8001558 <printRadioSettings+0x6c0>)
 80012d8:	f004 fc5b 	bl	8005b92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80012dc:	463b      	mov	r3, r7
 80012de:	2201      	movs	r2, #1
 80012e0:	4619      	mov	r1, r3
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff f9da 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012e8:	783b      	ldrb	r3, [r7, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	499d      	ldr	r1, [pc, #628]	; (8001568 <printRadioSettings+0x6d0>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 ffe4 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	230a      	movs	r3, #10
 800130c:	4892      	ldr	r0, [pc, #584]	; (8001558 <printRadioSettings+0x6c0>)
 800130e:	f004 fc40 	bl	8005b92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001312:	463b      	mov	r3, r7
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	200e      	movs	r0, #14
 800131a:	f7ff f9bf 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800131e:	783b      	ldrb	r3, [r7, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4991      	ldr	r1, [pc, #580]	; (800156c <printRadioSettings+0x6d4>)
 8001328:	4618      	mov	r0, r3
 800132a:	f004 ffc9 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff54 	bl	80001e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	4885      	ldr	r0, [pc, #532]	; (8001558 <printRadioSettings+0x6c0>)
 8001344:	f004 fc25 	bl	8005b92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001348:	463b      	mov	r3, r7
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	200f      	movs	r0, #15
 8001350:	f7ff f9a4 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001354:	783b      	ldrb	r3, [r7, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4984      	ldr	r1, [pc, #528]	; (8001570 <printRadioSettings+0x6d8>)
 800135e:	4618      	mov	r0, r3
 8001360:	f004 ffae 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff39 	bl	80001e0 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	f107 0108 	add.w	r1, r7, #8
 8001376:	230a      	movs	r3, #10
 8001378:	4877      	ldr	r0, [pc, #476]	; (8001558 <printRadioSettings+0x6c0>)
 800137a:	f004 fc0a 	bl	8005b92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800137e:	463b      	mov	r3, r7
 8001380:	2205      	movs	r2, #5
 8001382:	4619      	mov	r1, r3
 8001384:	2010      	movs	r0, #16
 8001386:	f7ff f989 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800138a:	793b      	ldrb	r3, [r7, #4]
 800138c:	461c      	mov	r4, r3
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	461d      	mov	r5, r3
 8001392:	78bb      	ldrb	r3, [r7, #2]
 8001394:	787a      	ldrb	r2, [r7, #1]
 8001396:	7839      	ldrb	r1, [r7, #0]
 8001398:	f107 0008 	add.w	r0, r7, #8
 800139c:	9102      	str	r1, [sp, #8]
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	462b      	mov	r3, r5
 80013a4:	4622      	mov	r2, r4
 80013a6:	4973      	ldr	r1, [pc, #460]	; (8001574 <printRadioSettings+0x6dc>)
 80013a8:	f004 ff8a 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff15 	bl	80001e0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f107 0108 	add.w	r1, r7, #8
 80013be:	230a      	movs	r3, #10
 80013c0:	4865      	ldr	r0, [pc, #404]	; (8001558 <printRadioSettings+0x6c0>)
 80013c2:	f004 fbe6 	bl	8005b92 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80013c6:	2011      	movs	r0, #17
 80013c8:	f7ff f940 	bl	800064c <NRF24_read_register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4966      	ldr	r1, [pc, #408]	; (8001578 <printRadioSettings+0x6e0>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 ff6d 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fef8 	bl	80001e0 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	230a      	movs	r3, #10
 80013fa:	4857      	ldr	r0, [pc, #348]	; (8001558 <printRadioSettings+0x6c0>)
 80013fc:	f004 fbc9 	bl	8005b92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001400:	2012      	movs	r0, #18
 8001402:	f7ff f923 	bl	800064c <NRF24_read_register>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800140c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4958      	ldr	r1, [pc, #352]	; (800157c <printRadioSettings+0x6e4>)
 800141a:	4618      	mov	r0, r3
 800141c:	f004 ff50 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fedb 	bl	80001e0 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f107 0108 	add.w	r1, r7, #8
 8001432:	230a      	movs	r3, #10
 8001434:	4848      	ldr	r0, [pc, #288]	; (8001558 <printRadioSettings+0x6c0>)
 8001436:	f004 fbac 	bl	8005b92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800143a:	2013      	movs	r0, #19
 800143c:	f7ff f906 	bl	800064c <NRF24_read_register>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800144a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	494b      	ldr	r1, [pc, #300]	; (8001580 <printRadioSettings+0x6e8>)
 8001454:	4618      	mov	r0, r3
 8001456:	f004 ff33 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe febe 	bl	80001e0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 0108 	add.w	r1, r7, #8
 800146c:	230a      	movs	r3, #10
 800146e:	483a      	ldr	r0, [pc, #232]	; (8001558 <printRadioSettings+0x6c0>)
 8001470:	f004 fb8f 	bl	8005b92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001474:	2014      	movs	r0, #20
 8001476:	f7ff f8e9 	bl	800064c <NRF24_read_register>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	493d      	ldr	r1, [pc, #244]	; (8001584 <printRadioSettings+0x6ec>)
 800148e:	4618      	mov	r0, r3
 8001490:	f004 ff16 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe fea1 	bl	80001e0 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0108 	add.w	r1, r7, #8
 80014a6:	230a      	movs	r3, #10
 80014a8:	482b      	ldr	r0, [pc, #172]	; (8001558 <printRadioSettings+0x6c0>)
 80014aa:	f004 fb72 	bl	8005b92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80014ae:	2015      	movs	r0, #21
 80014b0:	f7ff f8cc 	bl	800064c <NRF24_read_register>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4930      	ldr	r1, [pc, #192]	; (8001588 <printRadioSettings+0x6f0>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fef9 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe84 	bl	80001e0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f107 0108 	add.w	r1, r7, #8
 80014e0:	230a      	movs	r3, #10
 80014e2:	481d      	ldr	r0, [pc, #116]	; (8001558 <printRadioSettings+0x6c0>)
 80014e4:	f004 fb55 	bl	8005b92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80014e8:	2016      	movs	r0, #22
 80014ea:	f7ff f8af 	bl	800064c <NRF24_read_register>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4922      	ldr	r1, [pc, #136]	; (800158c <printRadioSettings+0x6f4>)
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fedc 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe67 	bl	80001e0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	230a      	movs	r3, #10
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <printRadioSettings+0x6c0>)
 800151e:	f004 fb38 	bl	8005b92 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001522:	201c      	movs	r0, #28
 8001524:	f7ff f892 	bl	800064c <NRF24_read_register>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001532:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfcc      	ite	gt
 800153a:	2301      	movgt	r3, #1
 800153c:	2300      	movle	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001546:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800154a:	2b00      	cmp	r3, #0
 800154c:	bfcc      	ite	gt
 800154e:	2301      	movgt	r3, #1
 8001550:	2300      	movle	r3, #0
 8001552:	e01d      	b.n	8001590 <printRadioSettings+0x6f8>
 8001554:	08007688 	.word	0x08007688
 8001558:	20000100 	.word	0x20000100
 800155c:	0800769c 	.word	0x0800769c
 8001560:	080076cc 	.word	0x080076cc
 8001564:	080076fc 	.word	0x080076fc
 8001568:	08007724 	.word	0x08007724
 800156c:	0800774c 	.word	0x0800774c
 8001570:	08007774 	.word	0x08007774
 8001574:	0800779c 	.word	0x0800779c
 8001578:	080077c8 	.word	0x080077c8
 800157c:	080077e4 	.word	0x080077e4
 8001580:	08007800 	.word	0x08007800
 8001584:	0800781c 	.word	0x0800781c
 8001588:	08007838 	.word	0x08007838
 800158c:	08007854 	.word	0x08007854
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001594:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001598:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800159c:	2b00      	cmp	r3, #0
 800159e:	bfcc      	ite	gt
 80015a0:	2301      	movgt	r3, #1
 80015a2:	2300      	movle	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bfcc      	ite	gt
 80015b4:	2301      	movgt	r3, #1
 80015b6:	2300      	movle	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bfcc      	ite	gt
 80015c8:	2301      	movgt	r3, #1
 80015ca:	2300      	movle	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bfcc      	ite	gt
 80015dc:	2301      	movgt	r3, #1
 80015de:	2300      	movle	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f107 0008 	add.w	r0, r7, #8
 80015e6:	9303      	str	r3, [sp, #12]
 80015e8:	9402      	str	r4, [sp, #8]
 80015ea:	9101      	str	r1, [sp, #4]
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	4633      	mov	r3, r6
 80015f0:	462a      	mov	r2, r5
 80015f2:	4936      	ldr	r1, [pc, #216]	; (80016cc <printRadioSettings+0x834>)
 80015f4:	f004 fe64 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdef 	bl	80001e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	230a      	movs	r3, #10
 800160c:	4830      	ldr	r0, [pc, #192]	; (80016d0 <printRadioSettings+0x838>)
 800160e:	f004 fac0 	bl	8005b92 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001612:	201d      	movs	r0, #29
 8001614:	f7ff f81a 	bl	800064c <NRF24_read_register>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <printRadioSettings+0x7a0>
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4929      	ldr	r1, [pc, #164]	; (80016d4 <printRadioSettings+0x83c>)
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fe45 	bl	80062c0 <siprintf>
 8001636:	e005      	b.n	8001644 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001638:	f107 0308 	add.w	r3, r7, #8
 800163c:	4926      	ldr	r1, [pc, #152]	; (80016d8 <printRadioSettings+0x840>)
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fe3e 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fdc9 	bl	80001e0 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	f107 0108 	add.w	r1, r7, #8
 8001656:	230a      	movs	r3, #10
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <printRadioSettings+0x838>)
 800165a:	f004 fa9a 	bl	8005b92 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800165e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <printRadioSettings+0x7e0>
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	491b      	ldr	r1, [pc, #108]	; (80016dc <printRadioSettings+0x844>)
 8001670:	4618      	mov	r0, r3
 8001672:	f004 fe25 	bl	80062c0 <siprintf>
 8001676:	e005      	b.n	8001684 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4918      	ldr	r1, [pc, #96]	; (80016e0 <printRadioSettings+0x848>)
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fe1e 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fda9 	bl	80001e0 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f107 0108 	add.w	r1, r7, #8
 8001696:	230a      	movs	r3, #10
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <printRadioSettings+0x838>)
 800169a:	f004 fa7a 	bl	8005b92 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	4910      	ldr	r1, [pc, #64]	; (80016e4 <printRadioSettings+0x84c>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fe0b 	bl	80062c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fd96 	bl	80001e0 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f107 0108 	add.w	r1, r7, #8
 80016bc:	230a      	movs	r3, #10
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <printRadioSettings+0x838>)
 80016c0:	f004 fa67 	bl	8005b92 <HAL_UART_Transmit>
}
 80016c4:	bf00      	nop
 80016c6:	3774      	adds	r7, #116	; 0x74
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016cc:	08007870 	.word	0x08007870
 80016d0:	20000100 	.word	0x20000100
 80016d4:	080078bc 	.word	0x080078bc
 80016d8:	080078d4 	.word	0x080078d4
 80016dc:	080078ec 	.word	0x080078ec
 80016e0:	08007908 	.word	0x08007908
 80016e4:	080074dc 	.word	0x080074dc

080016e8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80016e8:	b084      	sub	sp, #16
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	f107 0c08 	add.w	ip, r7, #8
 80016f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <nrf24_DebugUART_Init+0x2c>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2244      	movs	r2, #68	; 0x44
 8001700:	4619      	mov	r1, r3
 8001702:	f004 fd39 	bl	8006178 <memcpy>
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800170e:	b004      	add	sp, #16
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000100 	.word	0x20000100

08001718 <_write>:
volatile uint8_t mapMin2 = 0;
volatile uint8_t mapMax2 = 180;
volatile uint8_t mapMin3 = 0;
volatile uint8_t mapMax3 = 180;

int _write(int file, char *outgoing, int len) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart2, outgoing, len, 100);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b29a      	uxth	r2, r3
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <_write+0x24>)
 800172e:	f004 fa30 	bl	8005b92 <HAL_UART_Transmit>
   return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002b0 	.word	0x200002b0

08001740 <map_8Bit>:

uint8_t map_8Bit(long x, long in_min, long in_max, uint8_t out_min, uint8_t out_max)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	70fb      	strb	r3, [r7, #3]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	7e39      	ldrb	r1, [r7, #24]
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	1a8a      	subs	r2, r1, r2
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1acb      	subs	r3, r1, r3
 8001764:	fb92 f3f3 	sdiv	r3, r2, r3
 8001768:	b2da      	uxtb	r2, r3
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	4413      	add	r3, r2
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button0_Pin){
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10f      	bne.n	80017ac <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_TogglePin( Green_LED_GPIO_Port, Green_LED_Pin);
 800178c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001790:	4825      	ldr	r0, [pc, #148]	; (8001828 <HAL_GPIO_EXTI_Callback+0xac>)
 8001792:	f002 fa90 	bl	8003cb6 <HAL_GPIO_TogglePin>

		uint8_t temp = mapMin0;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	73fb      	strb	r3, [r7, #15]
		mapMin0 = mapMax0;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_GPIO_EXTI_Callback+0xb4>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_GPIO_EXTI_Callback+0xb0>)
 80017a4:	701a      	strb	r2, [r3, #0]
		mapMax0 = temp;
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_GPIO_EXTI_Callback+0xb4>)
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	7013      	strb	r3, [r2, #0]
	}
	if(GPIO_Pin == Button1_Pin){
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d10f      	bne.n	80017d2 <HAL_GPIO_EXTI_Callback+0x56>
		HAL_GPIO_TogglePin( Orange_LED_GPIO_Port, Orange_LED_Pin);
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <HAL_GPIO_EXTI_Callback+0xac>)
 80017b8:	f002 fa7d 	bl	8003cb6 <HAL_GPIO_TogglePin>

		uint8_t temp = mapMin1;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	73bb      	strb	r3, [r7, #14]
		mapMin1 = mapMax1;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_GPIO_EXTI_Callback+0xbc>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017ca:	701a      	strb	r2, [r3, #0]
		mapMax1 = temp;
 80017cc:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_GPIO_EXTI_Callback+0xbc>)
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	7013      	strb	r3, [r2, #0]
	}
	if(GPIO_Pin == Button2_Pin){
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d10f      	bne.n	80017f8 <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin( Red_LED_GPIO_Port, Red_LED_Pin);
 80017d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017dc:	4812      	ldr	r0, [pc, #72]	; (8001828 <HAL_GPIO_EXTI_Callback+0xac>)
 80017de:	f002 fa6a 	bl	8003cb6 <HAL_GPIO_TogglePin>

		uint8_t temp = mapMin2;
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_GPIO_EXTI_Callback+0xc0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	737b      	strb	r3, [r7, #13]
		mapMin2 = mapMax2;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_GPIO_EXTI_Callback+0xc4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_GPIO_EXTI_Callback+0xc0>)
 80017f0:	701a      	strb	r2, [r3, #0]
		mapMax2 = temp;
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <HAL_GPIO_EXTI_Callback+0xc4>)
 80017f4:	7b7b      	ldrb	r3, [r7, #13]
 80017f6:	7013      	strb	r3, [r2, #0]
	}
	if(GPIO_Pin == Button3_Pin){
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d10f      	bne.n	800181e <HAL_GPIO_EXTI_Callback+0xa2>
		HAL_GPIO_TogglePin( Blue_LED_GPIO_Port, Blue_LED_Pin);
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_GPIO_EXTI_Callback+0xac>)
 8001804:	f002 fa57 	bl	8003cb6 <HAL_GPIO_TogglePin>

		uint8_t temp = mapMin3;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_GPIO_EXTI_Callback+0xc8>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	733b      	strb	r3, [r7, #12]
		mapMin3 = mapMax3;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001816:	701a      	strb	r2, [r3, #0]
		mapMax3 = temp;
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_GPIO_EXTI_Callback+0xcc>)
 800181a:	7b3b      	ldrb	r3, [r7, #12]
 800181c:	7013      	strb	r3, [r2, #0]
	}

}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020c00 	.word	0x40020c00
 800182c:	20000144 	.word	0x20000144
 8001830:	20000008 	.word	0x20000008
 8001834:	20000145 	.word	0x20000145
 8001838:	20000009 	.word	0x20000009
 800183c:	20000146 	.word	0x20000146
 8001840:	2000000a 	.word	0x2000000a
 8001844:	20000147 	.word	0x20000147
 8001848:	2000000b 	.word	0x2000000b

0800184c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	b097      	sub	sp, #92	; 0x5c
 8001864:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001866:	f000 fe85 	bl	8002574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 f92b 	bl	8001ac4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f000 fadb 	bl	8001e28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001872:	f000 fa8f 	bl	8001d94 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001876:	f000 fab7 	bl	8001de8 <MX_DMA_Init>
  MX_ADC1_Init();
 800187a:	f000 f98b 	bl	8001b94 <MX_ADC1_Init>

  MX_SPI1_Init();
 800187e:	f000 fa05 	bl	8001c8c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001882:	f000 fa39 	bl	8001cf8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start our ADC/DMA Timer
  HAL_TIM_Base_Start(&htim2);
 8001886:	487a      	ldr	r0, [pc, #488]	; (8001a70 <main+0x210>)
 8001888:	f003 fce6 	bl	8005258 <HAL_TIM_Base_Start>

  //Start DMA in circular mode
  HAL_ADC_Start_DMA(&hadc1, adcVal, 4);
 800188c:	2204      	movs	r2, #4
 800188e:	4979      	ldr	r1, [pc, #484]	; (8001a74 <main+0x214>)
 8001890:	4879      	ldr	r0, [pc, #484]	; (8001a78 <main+0x218>)
 8001892:	f001 f859 	bl	8002948 <HAL_ADC_Start_DMA>

  //Initialize NRF24
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi1);
 8001896:	4c79      	ldr	r4, [pc, #484]	; (8001a7c <main+0x21c>)
 8001898:	4668      	mov	r0, sp
 800189a:	1d23      	adds	r3, r4, #4
 800189c:	2254      	movs	r2, #84	; 0x54
 800189e:	4619      	mov	r1, r3
 80018a0:	f004 fc6a 	bl	8006178 <memcpy>
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ae:	4874      	ldr	r0, [pc, #464]	; (8001a80 <main+0x220>)
 80018b0:	f7fe ffa6 	bl	8000800 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 80018b4:	4e73      	ldr	r6, [pc, #460]	; (8001a84 <main+0x224>)
 80018b6:	466d      	mov	r5, sp
 80018b8:	f106 0410 	add.w	r4, r6, #16
 80018bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	602b      	str	r3, [r5, #0]
 80018cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018d0:	f7ff ff0a 	bl	80016e8 <nrf24_DebugUART_Init>

  //Print NRF24 Settings
  printRadioSettings();
 80018d4:	f7ff fae0 	bl	8000e98 <printRadioSettings>

  //Setup NRF24 for transmitting data
  NRF24_stopListening();
 80018d8:	f7ff f872 	bl	80009c0 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <main+0x228>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f8cb 	bl	8000a80 <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff f954 	bl	8000b98 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80018f0:	2034      	movs	r0, #52	; 0x34
 80018f2:	f7ff f904 	bl	8000afe <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 80018f6:	2020      	movs	r0, #32
 80018f8:	f7ff f916 	bl	8000b28 <NRF24_setPayloadSize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	printf("0: %d\r\n", map_8Bit(adcVal[0],350, 3600, mapMin0, mapMax0));
 80018fc:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <main+0x214>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	4b62      	ldr	r3, [pc, #392]	; (8001a8c <main+0x22c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <main+0x230>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001916:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800191a:	f7ff ff11 	bl	8001740 <map_8Bit>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	485c      	ldr	r0, [pc, #368]	; (8001a94 <main+0x234>)
 8001924:	f004 fc3e 	bl	80061a4 <iprintf>
	printf("1: %d\r\n", map_8Bit(adcVal[1],350, 3600, mapMin1, mapMax1));
 8001928:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <main+0x214>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <main+0x238>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <main+0x23c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001942:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001946:	f7ff fefb 	bl	8001740 <map_8Bit>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	4854      	ldr	r0, [pc, #336]	; (8001aa0 <main+0x240>)
 8001950:	f004 fc28 	bl	80061a4 <iprintf>
	printf("2: %d\r\n", map_8Bit(adcVal[2],350, 3600, mapMin2, mapMax2));
 8001954:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <main+0x214>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4618      	mov	r0, r3
 800195a:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <main+0x244>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <main+0x248>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800196e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001972:	f7ff fee5 	bl	8001740 <map_8Bit>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	484c      	ldr	r0, [pc, #304]	; (8001aac <main+0x24c>)
 800197c:	f004 fc12 	bl	80061a4 <iprintf>
	printf("3: %d\r\n", map_8Bit(adcVal[3],350, 3600, mapMin3, mapMax3));
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <main+0x214>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <main+0x250>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <main+0x254>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800199a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800199e:	f7ff fecf 	bl	8001740 <map_8Bit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4844      	ldr	r0, [pc, #272]	; (8001ab8 <main+0x258>)
 80019a8:	f004 fbfc 	bl	80061a4 <iprintf>

	payload[0] = map_8Bit(adcVal[0],350, 3600, mapMin0, mapMax0);
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <main+0x214>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <main+0x22c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <main+0x230>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80019c6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80019ca:	f7ff feb9 	bl	8001740 <map_8Bit>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <main+0x25c>)
 80019d4:	701a      	strb	r2, [r3, #0]
	payload[1] = map_8Bit(adcVal[1],350, 3600, mapMin1, mapMax1);
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <main+0x214>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <main+0x238>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <main+0x23c>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	4613      	mov	r3, r2
 80019ec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80019f0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80019f4:	f7ff fea4 	bl	8001740 <map_8Bit>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <main+0x25c>)
 80019fe:	705a      	strb	r2, [r3, #1]
	payload[2] = map_8Bit(adcVal[2],350, 3600, mapMin2, mapMax2);
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <main+0x214>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <main+0x244>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <main+0x248>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a1a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001a1e:	f7ff fe8f 	bl	8001740 <map_8Bit>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <main+0x25c>)
 8001a28:	709a      	strb	r2, [r3, #2]
	payload[3] = map_8Bit(adcVal[3],350, 3600, mapMin3, mapMax3);
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <main+0x214>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <main+0x250>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <main+0x254>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a44:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001a48:	f7ff fe7a 	bl	8001740 <map_8Bit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <main+0x25c>)
 8001a52:	70da      	strb	r2, [r3, #3]
//		uint8_t mappedVal = map(adcVal[i],350, 3600, mapMin1, mapMax1);
//		printf("%d: %d\r\n", i, mappedVal);
//		payload[i] = mappedVal;
//
//	}
	if(NRF24_write(payload, 32)){
 8001a54:	2120      	movs	r1, #32
 8001a56:	4819      	ldr	r0, [pc, #100]	; (8001abc <main+0x25c>)
 8001a58:	f7fe ffbe 	bl	80009d8 <NRF24_write>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <main+0x208>
		printf("Transmission successful\r\n");
 8001a62:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <main+0x260>)
 8001a64:	f004 fc24 	bl	80062b0 <puts>
	}
	HAL_Delay(10);
 8001a68:	200a      	movs	r0, #10
 8001a6a:	f000 fdc5 	bl	80025f8 <HAL_Delay>
  {
 8001a6e:	e745      	b.n	80018fc <main+0x9c>
 8001a70:	20000268 	.word	0x20000268
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	20000154 	.word	0x20000154
 8001a7c:	20000210 	.word	0x20000210
 8001a80:	40020400 	.word	0x40020400
 8001a84:	200002b0 	.word	0x200002b0
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000144 	.word	0x20000144
 8001a90:	20000008 	.word	0x20000008
 8001a94:	08007a20 	.word	0x08007a20
 8001a98:	20000145 	.word	0x20000145
 8001a9c:	20000009 	.word	0x20000009
 8001aa0:	08007a28 	.word	0x08007a28
 8001aa4:	20000146 	.word	0x20000146
 8001aa8:	2000000a 	.word	0x2000000a
 8001aac:	08007a30 	.word	0x08007a30
 8001ab0:	20000147 	.word	0x20000147
 8001ab4:	2000000b 	.word	0x2000000b
 8001ab8:	08007a38 	.word	0x08007a38
 8001abc:	2000020c 	.word	0x2000020c
 8001ac0:	08007a40 	.word	0x08007a40

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	; 0x50
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2230      	movs	r2, #48	; 0x30
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fb5e 	bl	8006194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <SystemClock_Config+0xc8>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <SystemClock_Config+0xc8>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <SystemClock_Config+0xc8>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <SystemClock_Config+0xcc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <SystemClock_Config+0xcc>)
 8001b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <SystemClock_Config+0xcc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b24:	2301      	movs	r3, #1
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b34:	2308      	movs	r3, #8
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001b38:	2354      	movs	r3, #84	; 0x54
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b40:	2308      	movs	r3, #8
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 f8e7 	bl	8003d1c <HAL_RCC_OscConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b54:	f000 fa2e 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b58:	230f      	movs	r3, #15
 8001b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2102      	movs	r1, #2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fb49 	bl	800420c <HAL_RCC_ClockConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b80:	f000 fa18 	bl	8001fb4 <Error_Handler>
  }
}
 8001b84:	bf00      	nop
 8001b86:	3750      	adds	r7, #80	; 0x50
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001ba8:	4a37      	ldr	r2, [pc, #220]	; (8001c88 <MX_ADC1_Init+0xf4>)
 8001baa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001be6:	2204      	movs	r2, #4
 8001be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bf8:	4822      	ldr	r0, [pc, #136]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001bfa:	f000 fd21 	bl	8002640 <HAL_ADC_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001c04:	f000 f9d6 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001c10:	2302      	movs	r3, #2
 8001c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	481a      	ldr	r0, [pc, #104]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001c1a:	f000 ffa3 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001c24:	f000 f9c6 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4813      	ldr	r0, [pc, #76]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001c36:	f000 ff95 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001c40:	f000 f9b8 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001c52:	f000 ff87 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001c5c:	f000 f9aa 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c60:	2303      	movs	r3, #3
 8001c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_ADC1_Init+0xf0>)
 8001c6e:	f000 ff79 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001c78:	f000 f99c 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000154 	.word	0x20000154
 8001c88:	40012000 	.word	0x40012000

08001c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001c92:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <MX_SPI1_Init+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cd8:	220a      	movs	r2, #10
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_SPI1_Init+0x64>)
 8001cde:	f002 fcc3 	bl	8004668 <HAL_SPI_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ce8:	f000 f964 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000210 	.word	0x20000210
 8001cf4:	40013000 	.word	0x40013000

08001cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d1e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001d22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d3e:	4814      	ldr	r0, [pc, #80]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d40:	f003 fa3a 	bl	80051b8 <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d4a:	f000 f933 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d5c:	f003 fc40 	bl	80055e0 <HAL_TIM_ConfigClockSource>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d66:	f000 f925 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d72:	463b      	mov	r3, r7
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	; (8001d90 <MX_TIM2_Init+0x98>)
 8001d78:	f003 fe3c 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d82:	f000 f917 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000268 	.word	0x20000268

08001d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_USART2_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f003 fe94 	bl	8005af8 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f8ed 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002b0 	.word	0x200002b0
 8001de4:	40004400 	.word	0x40004400

08001de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_DMA_Init+0x3c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <MX_DMA_Init+0x3c>)
 8001df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_DMA_Init+0x3c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2038      	movs	r0, #56	; 0x38
 8001e10:	f001 fa1a 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e14:	2038      	movs	r0, #56	; 0x38
 8001e16:	f001 fa33 	bl	8003280 <HAL_NVIC_EnableIRQ>

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a4e      	ldr	r2, [pc, #312]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <MX_GPIO_Init+0x158>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001ed0:	482c      	ldr	r0, [pc, #176]	; (8001f84 <MX_GPIO_Init+0x15c>)
 8001ed2:	f001 fed7 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001edc:	482a      	ldr	r0, [pc, #168]	; (8001f88 <MX_GPIO_Init+0x160>)
 8001ede:	f001 fed1 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin|Button3_Pin;
 8001ee2:	230f      	movs	r3, #15
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4825      	ldr	r0, [pc, #148]	; (8001f8c <MX_GPIO_Init+0x164>)
 8001ef8:	f001 fd40 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8001efc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <MX_GPIO_Init+0x15c>)
 8001f16:	f001 fd31 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 8001f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4815      	ldr	r0, [pc, #84]	; (8001f88 <MX_GPIO_Init+0x160>)
 8001f34:	f001 fd22 	bl	800397c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2006      	movs	r0, #6
 8001f3e:	f001 f983 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f42:	2006      	movs	r0, #6
 8001f44:	f001 f99c 	bl	8003280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2007      	movs	r0, #7
 8001f4e:	f001 f97b 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f52:	2007      	movs	r0, #7
 8001f54:	f001 f994 	bl	8003280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2008      	movs	r0, #8
 8001f5e:	f001 f973 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f62:	2008      	movs	r0, #8
 8001f64:	f001 f98c 	bl	8003280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2009      	movs	r0, #9
 8001f6e:	f001 f96b 	bl	8003248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f72:	2009      	movs	r0, #9
 8001f74:	f001 f984 	bl	8003280 <HAL_NVIC_EnableIRQ>

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800

08001f90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fa2:	f000 fb09 	bl	80025b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_MspInit+0x4c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_MspInit+0x4c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ffe:	2007      	movs	r0, #7
 8002000:	f001 f917 	bl	8003232 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a33      	ldr	r2, [pc, #204]	; (80020fc <HAL_ADC_MspInit+0xec>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d160      	bne.n	80020f4 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_ADC_MspInit+0xf0>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_ADC_MspInit+0xf0>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_ADC_MspInit+0xf0>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_ADC_MspInit+0xf0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_ADC_MspInit+0xf0>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_ADC_MspInit+0xf0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800206a:	230f      	movs	r3, #15
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4821      	ldr	r0, [pc, #132]	; (8002104 <HAL_ADC_MspInit+0xf4>)
 800207e:	f001 fc7d 	bl	800397c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 8002084:	4a21      	ldr	r2, [pc, #132]	; (800210c <HAL_ADC_MspInit+0xfc>)
 8002086:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 800209c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c8:	480f      	ldr	r0, [pc, #60]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020ca:	f001 f8e7 	bl	800329c <HAL_DMA_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80020d4:	f7ff ff6e 	bl	8001fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_ADC_MspInit+0xf8>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2012      	movs	r0, #18
 80020ea:	f001 f8ad 	bl	8003248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020ee:	2012      	movs	r0, #18
 80020f0:	f001 f8c6 	bl	8003280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40012000 	.word	0x40012000
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000
 8002108:	2000019c 	.word	0x2000019c
 800210c:	40026410 	.word	0x40026410

08002110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_SPI_MspInit+0x84>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12b      	bne.n	800218a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_SPI_MspInit+0x88>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_SPI_MspInit+0x88>)
 800213c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_SPI_MspInit+0x88>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_SPI_MspInit+0x88>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_SPI_MspInit+0x88>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_SPI_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800216a:	23e0      	movs	r3, #224	; 0xe0
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800217a:	2305      	movs	r3, #5
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_SPI_MspInit+0x8c>)
 8002186:	f001 fbf9 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40013000 	.word	0x40013000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d10d      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_TIM_Base_MspInit+0x3c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_TIM_Base_MspInit+0x3c>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_TIM_Base_MspInit+0x3c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_UART_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12b      	bne.n	800225a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_UART_MspInit+0x88>)
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800223a:	2360      	movs	r3, #96	; 0x60
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800224a:	2307      	movs	r3, #7
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <HAL_UART_MspInit+0x8c>)
 8002256:	f001 fb91 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	; 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40004400 	.word	0x40004400
 8002268:	40023800 	.word	0x40023800
 800226c:	40020c00 	.word	0x40020c00

08002270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	2019      	movs	r0, #25
 8002286:	f000 ffdf 	bl	8003248 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800228a:	2019      	movs	r0, #25
 800228c:	f000 fff8 	bl	8003280 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_InitTick+0xa0>)
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_InitTick+0xa0>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6453      	str	r3, [r2, #68]	; 0x44
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_InitTick+0xa0>)
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022ac:	f107 0210 	add.w	r2, r7, #16
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 f9a4 	bl	8004604 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022bc:	f002 f98e 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 80022c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	4a13      	ldr	r2, [pc, #76]	; (8002314 <HAL_InitTick+0xa4>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0c9b      	lsrs	r3, r3, #18
 80022cc:	3b01      	subs	r3, #1
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_InitTick+0xa8>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_InitTick+0xac>)
 80022d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_InitTick+0xa8>)
 80022d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_InitTick+0xa8>)
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_InitTick+0xa8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_InitTick+0xa8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022f0:	4809      	ldr	r0, [pc, #36]	; (8002318 <HAL_InitTick+0xa8>)
 80022f2:	f002 ff61 	bl	80051b8 <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022fc:	4806      	ldr	r0, [pc, #24]	; (8002318 <HAL_InitTick+0xa8>)
 80022fe:	f003 f805 	bl	800530c <HAL_TIM_Base_Start_IT>
 8002302:	4603      	mov	r3, r0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3730      	adds	r7, #48	; 0x30
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	431bde83 	.word	0x431bde83
 8002318:	200002f4 	.word	0x200002f4
 800231c:	40010000 	.word	0x40010000

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <NMI_Handler+0x4>

08002326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <HardFault_Handler+0x4>

0800232c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <MemManage_Handler+0x4>

08002332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <BusFault_Handler+0x4>

08002338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <UsageFault_Handler+0x4>

0800233e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800237a:	2001      	movs	r0, #1
 800237c:	f001 fcb6 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002388:	2002      	movs	r0, #2
 800238a:	f001 fcaf 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}

08002392 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002396:	2004      	movs	r0, #4
 8002398:	f001 fca8 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80023a4:	2008      	movs	r0, #8
 80023a6:	f001 fca1 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <ADC_IRQHandler+0x10>)
 80023b6:	f000 f986 	bl	80026c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000154 	.word	0x20000154

080023c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023ca:	f003 f801 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200002f4 	.word	0x200002f4

080023d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA2_Stream0_IRQHandler+0x10>)
 80023de:	f001 f863 	bl	80034a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000019c 	.word	0x2000019c

080023ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e00a      	b.n	8002414 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023fe:	f3af 8000 	nop.w
 8002402:	4601      	mov	r1, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	b2ca      	uxtb	r2, r1
 800240c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbf0      	blt.n	80023fe <_read+0x12>
	}

return len;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	return -1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244e:	605a      	str	r2, [r3, #4]
	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_isatty>:

int _isatty(int file)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	return 1;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <_sbrk+0x5c>)
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <_sbrk+0x60>)
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <_sbrk+0x64>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <_sbrk+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d207      	bcs.n	80024d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c0:	f003 fe30 	bl	8006124 <__errno>
 80024c4:	4603      	mov	r3, r0
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e009      	b.n	80024e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <_sbrk+0x64>)
 80024e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20020000 	.word	0x20020000
 80024f0:	00000400 	.word	0x00000400
 80024f4:	20000148 	.word	0x20000148
 80024f8:	20000350 	.word	0x20000350

080024fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <SystemInit+0x20>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <SystemInit+0x20>)
 8002508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800250c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002558 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002524:	480d      	ldr	r0, [pc, #52]	; (800255c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002526:	490e      	ldr	r1, [pc, #56]	; (8002560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800253c:	4c0b      	ldr	r4, [pc, #44]	; (800256c <LoopFillZerobss+0x26>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800254a:	f7ff ffd7 	bl	80024fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254e:	f003 fdef 	bl	8006130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7ff f985 	bl	8001860 <main>
  bx  lr    
 8002556:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002564:	08007b24 	.word	0x08007b24
  ldr r2, =_sbss
 8002568:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800256c:	20000350 	.word	0x20000350

08002570 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <DMA1_Stream0_IRQHandler>
	...

08002574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_Init+0x40>)
 800257e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <HAL_Init+0x40>)
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_Init+0x40>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f000 fe48 	bl	8003232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7ff fe64 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fd0a 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000014 	.word	0x20000014
 80025dc:	2000033c 	.word	0x2000033c

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000033c 	.word	0x2000033c

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261e:	bf00      	nop
 8002620:	f7ff ffde 	bl	80025e0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000014 	.word	0x20000014

08002640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e033      	b.n	80026be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fcd6 	bl	8002010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d118      	bne.n	80026b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002686:	f023 0302 	bic.w	r3, r3, #2
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fb98 	bl	8002dc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
 80026ae:	e001      	b.n	80026b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d049      	beq.n	800279c <HAL_ADC_IRQHandler+0xd6>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d046      	beq.n	800279c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d12b      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d127      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002754:	2b00      	cmp	r3, #0
 8002756:	d119      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0220 	bic.w	r2, r2, #32
 8002766:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff f85d 	bl	800184c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f06f 0212 	mvn.w	r2, #18
 800279a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d057      	beq.n	800287e <HAL_ADC_IRQHandler+0x1b8>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d054      	beq.n	800287e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d139      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d12b      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d124      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11d      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d119      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fc28 	bl	80030c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 020c 	mvn.w	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x21a>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10d      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f933 	bl	8002b3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0201 	mvn.w	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_ADC_IRQHandler+0x27a>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0220 	mvn.w	r2, #32
 800292e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f90d 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0220 	mvn.w	r2, #32
 800293e:	601a      	str	r2, [r3, #0]
  }
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0ce      	b.n	8002b04 <HAL_ADC_Start_DMA+0x1bc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d018      	beq.n	80029ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800298c:	4b5f      	ldr	r3, [pc, #380]	; (8002b0c <HAL_ADC_Start_DMA+0x1c4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5f      	ldr	r2, [pc, #380]	; (8002b10 <HAL_ADC_Start_DMA+0x1c8>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9a      	lsrs	r2, r3, #18
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d107      	bne.n	80029ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f040 8086 	bne.w	8002aea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d106      	bne.n	8002a2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f023 0206 	bic.w	r2, r3, #6
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
 8002a2a:	e002      	b.n	8002a32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_ADC_Start_DMA+0x1cc>)
 8002a3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4a35      	ldr	r2, [pc, #212]	; (8002b18 <HAL_ADC_Start_DMA+0x1d0>)
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_ADC_Start_DMA+0x1d4>)
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <HAL_ADC_Start_DMA+0x1d8>)
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	334c      	adds	r3, #76	; 0x4c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f000 fcb2 	bl	80033f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d129      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	e020      	b.n	8002b02 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_ADC_Start_DMA+0x1dc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d11b      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x1ba>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d114      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e00b      	b.n	8002b02 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0210 	orr.w	r2, r3, #16
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	431bde83 	.word	0x431bde83
 8002b14:	40012300 	.word	0x40012300
 8002b18:	08002fc1 	.word	0x08002fc1
 8002b1c:	0800307b 	.word	0x0800307b
 8002b20:	08003097 	.word	0x08003097
 8002b24:	40012000 	.word	0x40012000

08002b28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e113      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x244>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d925      	bls.n	8002bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43da      	mvns	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4603      	mov	r3, r0
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4403      	add	r3, r0
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e022      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4403      	add	r3, r0
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d824      	bhi.n	8002c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b05      	subs	r3, #5
 8002c3c:	221f      	movs	r2, #31
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b05      	subs	r3, #5
 8002c66:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	e04c      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d824      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b23      	subs	r3, #35	; 0x23
 8002c8e:	221f      	movs	r2, #31
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43da      	mvns	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b23      	subs	r3, #35	; 0x23
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc4:	e023      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b41      	subs	r3, #65	; 0x41
 8002cd8:	221f      	movs	r2, #31
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b41      	subs	r3, #65	; 0x41
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_ADC_ConfigChannel+0x250>)
 8002d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_ADC_ConfigChannel+0x254>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10f      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1d8>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_ADC_ConfigChannel+0x254>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x23a>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_ADC_ConfigChannel+0x258>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x1f4>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b11      	cmp	r3, #17
 8002d56:	d122      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_ADC_ConfigChannel+0x258>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d111      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <HAL_ADC_ConfigChannel+0x260>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0c9a      	lsrs	r2, r3, #18
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d90:	e002      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f9      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	40012000 	.word	0x40012000
 8002dbc:	10000012 	.word	0x10000012
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	431bde83 	.word	0x431bde83

08002dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd0:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <ADC_Init+0x1f0>)
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <ADC_Init+0x1f4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	e00f      	b.n	8002ec6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0202 	bic.w	r2, r2, #2
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	005a      	lsls	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01b      	beq.n	8002f2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	035a      	lsls	r2, r3, #13
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e007      	b.n	8002f3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	051a      	lsls	r2, r3, #20
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7e:	025a      	lsls	r2, r3, #9
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	029a      	lsls	r2, r3, #10
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	0f000001 	.word	0x0f000001

08002fc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d13c      	bne.n	8003054 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d12b      	bne.n	800304c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d127      	bne.n	800304c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003014:	2b00      	cmp	r3, #0
 8003016:	d119      	bne.n	800304c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0220 	bic.w	r2, r2, #32
 8003026:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7fe fbfd 	bl	800184c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003052:	e00e      	b.n	8003072 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7ff fd75 	bl	8002b50 <HAL_ADC_ErrorCallback>
}
 8003066:	e004      	b.n	8003072 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff fd4d 	bl	8002b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0204 	orr.w	r2, r3, #4
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff fd4a 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <__NVIC_GetPriorityGrouping+0x18>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0307 	and.w	r3, r3, #7
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db0b      	blt.n	8003166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <__NVIC_EnableIRQ+0x38>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2001      	movs	r0, #1
 800315e:	fa00 f202 	lsl.w	r2, r0, r2
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	490c      	ldr	r1, [pc, #48]	; (80031c4 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf28      	it	cs
 80031ea:	2304      	movcs	r3, #4
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003214:	f04f 31ff 	mov.w	r1, #4294967295
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43d9      	mvns	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
         );
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ff4c 	bl	80030d8 <__NVIC_SetPriorityGrouping>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800325a:	f7ff ff61 	bl	8003120 <__NVIC_GetPriorityGrouping>
 800325e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	6978      	ldr	r0, [r7, #20]
 8003266:	f7ff ffb1 	bl	80031cc <NVIC_EncodePriority>
 800326a:	4602      	mov	r2, r0
 800326c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff80 	bl	8003178 <__NVIC_SetPriority>
}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff54 	bl	800313c <__NVIC_EnableIRQ>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff f99a 	bl	80025e0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e099      	b.n	80033ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d8:	e00f      	b.n	80032fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032da:	f7ff f981 	bl	80025e0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d908      	bls.n	80032fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e078      	b.n	80033ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e8      	bne.n	80032da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_DMA_Init+0x158>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b04      	cmp	r3, #4
 8003352:	d107      	bne.n	8003364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4313      	orrs	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b04      	cmp	r3, #4
 800338c:	d117      	bne.n	80033be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa6f 	bl	8003884 <DMA_CheckFifoParam>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033ba:	2301      	movs	r3, #1
 80033bc:	e016      	b.n	80033ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa26 	bl	8003818 <DMA_CalcBaseAndBitshift>
 80033cc:	4603      	mov	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	223f      	movs	r2, #63	; 0x3f
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	f010803f 	.word	0xf010803f

080033f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_DMA_Start_IT+0x26>
 800341a:	2302      	movs	r3, #2
 800341c:	e040      	b.n	80034a0 <HAL_DMA_Start_IT+0xa8>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d12f      	bne.n	8003492 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f9b8 	bl	80037bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	223f      	movs	r2, #63	; 0x3f
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0216 	orr.w	r2, r2, #22
 8003466:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e005      	b.n	800349e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800349a:	2302      	movs	r3, #2
 800349c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034b4:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_DMA_IRQHandler+0x258>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a92      	ldr	r2, [pc, #584]	; (8003704 <HAL_DMA_IRQHandler+0x25c>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0a9b      	lsrs	r3, r3, #10
 80034c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2208      	movs	r2, #8
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01a      	beq.n	8003514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	2208      	movs	r2, #8
 8003502:	409a      	lsls	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	2201      	movs	r2, #1
 8003538:	409a      	lsls	r2, r3
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2204      	movs	r2, #4
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2204      	movs	r2, #4
 800356e:	409a      	lsls	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2210      	movs	r2, #16
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d043      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	2210      	movs	r2, #16
 80035a4:	409a      	lsls	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d024      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
 80035d6:	e01f      	b.n	8003618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e016      	b.n	8003618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0208 	bic.w	r2, r2, #8
 8003606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2220      	movs	r2, #32
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 808e 	beq.w	8003746 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8086 	beq.w	8003746 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2220      	movs	r2, #32
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b05      	cmp	r3, #5
 8003650:	d136      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0216 	bic.w	r2, r2, #22
 8003660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_DMA_IRQHandler+0x1da>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0208 	bic.w	r2, r2, #8
 8003690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	223f      	movs	r2, #63	; 0x3f
 8003698:	409a      	lsls	r2, r3
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d07d      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
        }
        return;
 80036be:	e078      	b.n	80037b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d108      	bne.n	80036ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d030      	beq.n	8003746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e02b      	b.n	8003746 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e022      	b.n	8003746 <HAL_DMA_IRQHandler+0x29e>
 8003700:	2000000c 	.word	0x2000000c
 8003704:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0210 	bic.w	r2, r2, #16
 8003724:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d022      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2205      	movs	r2, #5
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3301      	adds	r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d307      	bcc.n	800378e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f2      	bne.n	8003772 <HAL_DMA_IRQHandler+0x2ca>
 800378c:	e000      	b.n	8003790 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800378e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
 80037b0:	e000      	b.n	80037b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037b2:	bf00      	nop
    }
  }
}
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d108      	bne.n	80037fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037fa:	e007      	b.n	800380c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3b10      	subs	r3, #16
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <DMA_CalcBaseAndBitshift+0x64>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <DMA_CalcBaseAndBitshift+0x68>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d909      	bls.n	800385a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	1d1a      	adds	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	659a      	str	r2, [r3, #88]	; 0x58
 8003858:	e007      	b.n	800386a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	aaaaaaab 	.word	0xaaaaaaab
 8003880:	08007a74 	.word	0x08007a74

08003884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11f      	bne.n	80038de <DMA_CheckFifoParam+0x5a>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d856      	bhi.n	8003952 <DMA_CheckFifoParam+0xce>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <DMA_CheckFifoParam+0x28>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038cf 	.word	0x080038cf
 80038b4:	080038bd 	.word	0x080038bd
 80038b8:	08003953 	.word	0x08003953
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d046      	beq.n	8003956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e043      	b.n	8003956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d6:	d140      	bne.n	800395a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e03d      	b.n	800395a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e6:	d121      	bne.n	800392c <DMA_CheckFifoParam+0xa8>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d837      	bhi.n	800395e <DMA_CheckFifoParam+0xda>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <DMA_CheckFifoParam+0x70>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003905 	.word	0x08003905
 80038f8:	0800390b 	.word	0x0800390b
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800391d 	.word	0x0800391d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e030      	b.n	800396c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d025      	beq.n	8003962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391a:	e022      	b.n	8003962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800392a:	e01c      	b.n	8003966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d903      	bls.n	800393a <DMA_CheckFifoParam+0xb6>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d003      	beq.n	8003940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003938:	e018      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
      break;
 800393e:	e015      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      break;
 8003950:	e00b      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 8003952:	bf00      	nop
 8003954:	e00a      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 8003956:	bf00      	nop
 8003958:	e008      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
 800395c:	e006      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 800395e:	bf00      	nop
 8003960:	e004      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;   
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
    }
  } 
  
  return status; 
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e159      	b.n	8003c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003998:	2201      	movs	r2, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f040 8148 	bne.w	8003c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d005      	beq.n	80039ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d130      	bne.n	8003a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2203      	movs	r2, #3
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 0201 	and.w	r2, r3, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d017      	beq.n	8003a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d123      	bne.n	8003ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	08da      	lsrs	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3208      	adds	r2, #8
 8003aba:	69b9      	ldr	r1, [r7, #24]
 8003abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0203 	and.w	r2, r3, #3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a2 	beq.w	8003c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b57      	ldr	r3, [pc, #348]	; (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	4a56      	ldr	r2, [pc, #344]	; (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b10:	6453      	str	r3, [r2, #68]	; 0x44
 8003b12:	4b54      	ldr	r3, [pc, #336]	; (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b1e:	4a52      	ldr	r2, [pc, #328]	; (8003c68 <HAL_GPIO_Init+0x2ec>)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a49      	ldr	r2, [pc, #292]	; (8003c6c <HAL_GPIO_Init+0x2f0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d019      	beq.n	8003b7e <HAL_GPIO_Init+0x202>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a48      	ldr	r2, [pc, #288]	; (8003c70 <HAL_GPIO_Init+0x2f4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_GPIO_Init+0x1fe>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a47      	ldr	r2, [pc, #284]	; (8003c74 <HAL_GPIO_Init+0x2f8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00d      	beq.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a46      	ldr	r2, [pc, #280]	; (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <HAL_GPIO_Init+0x1f6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a45      	ldr	r2, [pc, #276]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <HAL_GPIO_Init+0x1f2>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b6e:	2307      	movs	r3, #7
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b90:	4935      	ldr	r1, [pc, #212]	; (8003c68 <HAL_GPIO_Init+0x2ec>)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bc2:	4a2f      	ldr	r2, [pc, #188]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bec:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c40:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	f67f aea2 	bls.w	8003998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3724      	adds	r7, #36	; 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020c00 	.word	0x40020c00
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40013c00 	.word	0x40013c00

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	619a      	str	r2, [r3, #24]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cc8:	887a      	ldrh	r2, [r7, #2]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	041a      	lsls	r2, r3, #16
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fd36 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40013c00 	.word	0x40013c00

08003d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e264      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d075      	beq.n	8003e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	4ba3      	ldr	r3, [pc, #652]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d00c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4ba0      	ldr	r3, [pc, #640]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d112      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d52:	4b9d      	ldr	r3, [pc, #628]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4b99      	ldr	r3, [pc, #612]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05b      	beq.n	8003e24 <HAL_RCC_OscConfig+0x108>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d157      	bne.n	8003e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e23f      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x74>
 8003d82:	4b91      	ldr	r3, [pc, #580]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a90      	ldr	r2, [pc, #576]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x98>
 8003d9a:	4b8b      	ldr	r3, [pc, #556]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a8a      	ldr	r2, [pc, #552]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b88      	ldr	r3, [pc, #544]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a87      	ldr	r2, [pc, #540]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003db4:	4b84      	ldr	r3, [pc, #528]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a83      	ldr	r2, [pc, #524]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b81      	ldr	r3, [pc, #516]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a80      	ldr	r2, [pc, #512]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fc04 	bl	80025e0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe fc00 	bl	80025e0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e204      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b76      	ldr	r3, [pc, #472]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0xc0>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fbf0 	bl	80025e0 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe fbec 	bl	80025e0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e1f0      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0xe8>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d063      	beq.n	8003efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	4b65      	ldr	r3, [pc, #404]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b62      	ldr	r3, [pc, #392]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	4b5c      	ldr	r3, [pc, #368]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x152>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1c4      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4952      	ldr	r1, [pc, #328]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	e03a      	b.n	8003efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	; (8003fcc <HAL_RCC_OscConfig+0x2b0>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe fba5 	bl	80025e0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fe fba1 	bl	80025e0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1a5      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b43      	ldr	r3, [pc, #268]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4940      	ldr	r1, [pc, #256]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
 8003ecc:	e015      	b.n	8003efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <HAL_RCC_OscConfig+0x2b0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fb84 	bl	80025e0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003edc:	f7fe fb80 	bl	80025e0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e184      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d030      	beq.n	8003f68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0e:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_RCC_OscConfig+0x2b4>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fe fb64 	bl	80025e0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fe fb60 	bl	80025e0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e164      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x200>
 8003f3a:	e015      	b.n	8003f68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3c:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCC_OscConfig+0x2b4>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fe fb4d 	bl	80025e0 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fb49 	bl	80025e0 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e14d      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a0 	beq.w	80040b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d121      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_RCC_OscConfig+0x2b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <HAL_RCC_OscConfig+0x2b8>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fe fb0f 	bl	80025e0 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e011      	b.n	8003fea <HAL_RCC_OscConfig+0x2ce>
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	42470000 	.word	0x42470000
 8003fd0:	42470e80 	.word	0x42470e80
 8003fd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fe fb02 	bl	80025e0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e106      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b85      	ldr	r3, [pc, #532]	; (8004200 <HAL_RCC_OscConfig+0x4e4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x2f0>
 8003ffe:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
 800400a:	e01c      	b.n	8004046 <HAL_RCC_OscConfig+0x32a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x312>
 8004014:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
 8004020:	4b78      	ldr	r3, [pc, #480]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x32a>
 800402e:	4b75      	ldr	r3, [pc, #468]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a74      	ldr	r2, [pc, #464]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	4b72      	ldr	r3, [pc, #456]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a71      	ldr	r2, [pc, #452]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d015      	beq.n	800407a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fe fac7 	bl	80025e0 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fe fac3 	bl	80025e0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0c5      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ee      	beq.n	8004056 <HAL_RCC_OscConfig+0x33a>
 8004078:	e014      	b.n	80040a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fe fab1 	bl	80025e0 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	e00a      	b.n	8004098 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fe faad 	bl	80025e0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e0af      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	4b5a      	ldr	r3, [pc, #360]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ee      	bne.n	8004082 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a55      	ldr	r2, [pc, #340]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 809b 	beq.w	80041f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c0:	4b50      	ldr	r3, [pc, #320]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d05c      	beq.n	8004186 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d141      	bne.n	8004158 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCC_OscConfig+0x4ec>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fe fa81 	bl	80025e0 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fe fa7d 	bl	80025e0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e081      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	019b      	lsls	r3, r3, #6
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	3b01      	subs	r3, #1
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	4937      	ldr	r1, [pc, #220]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCC_OscConfig+0x4ec>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe fa56 	bl	80025e0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe fa52 	bl	80025e0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e056      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x41c>
 8004156:	e04e      	b.n	80041f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004158:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_OscConfig+0x4ec>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fe fa3f 	bl	80025e0 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004166:	f7fe fa3b 	bl	80025e0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e03f      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004178:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f0      	bne.n	8004166 <HAL_RCC_OscConfig+0x44a>
 8004184:	e037      	b.n	80041f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e032      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <HAL_RCC_OscConfig+0x4e8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d028      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d121      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d11a      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d111      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40007000 	.word	0x40007000
 8004204:	40023800 	.word	0x40023800
 8004208:	42470060 	.word	0x42470060

0800420c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0cc      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d90c      	bls.n	8004248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b63      	ldr	r3, [pc, #396]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b8      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b50      	ldr	r3, [pc, #320]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	494d      	ldr	r1, [pc, #308]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d044      	beq.n	800432c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d119      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e07f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e06f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e067      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4934      	ldr	r1, [pc, #208]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042fc:	f7fe f970 	bl	80025e0 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fe f96c 	bl	80025e0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e04f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d20c      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e032      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4916      	ldr	r1, [pc, #88]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	490e      	ldr	r1, [pc, #56]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004392:	f000 f821 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004396:	4602      	mov	r2, r0
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	490a      	ldr	r1, [pc, #40]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	5ccb      	ldrb	r3, [r1, r3]
 80043a6:	fa22 f303 	lsr.w	r3, r2, r3
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd ff5c 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08007a5c 	.word	0x08007a5c
 80043d0:	2000000c 	.word	0x2000000c
 80043d4:	20000010 	.word	0x20000010

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	2300      	movs	r3, #0
 80043ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f0:	4b67      	ldr	r3, [pc, #412]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d00d      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x40>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	f200 80bd 	bhi.w	800457c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x34>
 8004406:	2b04      	cmp	r3, #4
 8004408:	d003      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0x3a>
 800440a:	e0b7      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800440e:	60bb      	str	r3, [r7, #8]
       break;
 8004410:	e0b7      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004414:	60bb      	str	r3, [r7, #8]
      break;
 8004416:	e0b4      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004418:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004420:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004422:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04d      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442e:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	099b      	lsrs	r3, r3, #6
 8004434:	461a      	mov	r2, r3
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	ea02 0800 	and.w	r8, r2, r0
 8004446:	ea03 0901 	and.w	r9, r3, r1
 800444a:	4640      	mov	r0, r8
 800444c:	4649      	mov	r1, r9
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	014b      	lsls	r3, r1, #5
 8004458:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800445c:	0142      	lsls	r2, r0, #5
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	ebb0 0008 	subs.w	r0, r0, r8
 8004466:	eb61 0109 	sbc.w	r1, r1, r9
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	018b      	lsls	r3, r1, #6
 8004474:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004478:	0182      	lsls	r2, r0, #6
 800447a:	1a12      	subs	r2, r2, r0
 800447c:	eb63 0301 	sbc.w	r3, r3, r1
 8004480:	f04f 0000 	mov.w	r0, #0
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	00d9      	lsls	r1, r3, #3
 800448a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800448e:	00d0      	lsls	r0, r2, #3
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	eb12 0208 	adds.w	r2, r2, r8
 8004498:	eb43 0309 	adc.w	r3, r3, r9
 800449c:	f04f 0000 	mov.w	r0, #0
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	0259      	lsls	r1, r3, #9
 80044a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044aa:	0250      	lsls	r0, r2, #9
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f7fb fee8 	bl	8000290 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e04a      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044da:	f04f 0100 	mov.w	r1, #0
 80044de:	ea02 0400 	and.w	r4, r2, r0
 80044e2:	ea03 0501 	and.w	r5, r3, r1
 80044e6:	4620      	mov	r0, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	014b      	lsls	r3, r1, #5
 80044f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044f8:	0142      	lsls	r2, r0, #5
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	1b00      	subs	r0, r0, r4
 8004500:	eb61 0105 	sbc.w	r1, r1, r5
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	018b      	lsls	r3, r1, #6
 800450e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004512:	0182      	lsls	r2, r0, #6
 8004514:	1a12      	subs	r2, r2, r0
 8004516:	eb63 0301 	sbc.w	r3, r3, r1
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	00d9      	lsls	r1, r3, #3
 8004524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004528:	00d0      	lsls	r0, r2, #3
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	1912      	adds	r2, r2, r4
 8004530:	eb45 0303 	adc.w	r3, r5, r3
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f04f 0100 	mov.w	r1, #0
 800453c:	0299      	lsls	r1, r3, #10
 800453e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004542:	0290      	lsls	r0, r2, #10
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f7fb fe9c 	bl	8000290 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	60bb      	str	r3, [r7, #8]
      break;
 800457a:	e002      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800457e:	60bb      	str	r3, [r7, #8]
      break;
 8004580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004582:	68bb      	ldr	r3, [r7, #8]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200

0800459c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	2000000c 	.word	0x2000000c

080045b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045b8:	f7ff fff0 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0a9b      	lsrs	r3, r3, #10
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	08007a6c 	.word	0x08007a6c

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045e0:	f7ff ffdc 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0b5b      	lsrs	r3, r3, #13
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	08007a6c 	.word	0x08007a6c

08004604 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	220f      	movs	r2, #15
 8004612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0203 	and.w	r2, r3, #3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_GetClockConfig+0x5c>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_RCC_GetClockConfig+0x60>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0207 	and.w	r2, r3, #7
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	40023c00 	.word	0x40023c00

08004668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07b      	b.n	8004772 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468a:	d009      	beq.n	80046a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
 8004692:	e005      	b.n	80046a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd fd28 	bl	8002110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	ea42 0103 	orr.w	r1, r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0104 	and.w	r1, r3, #4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0210 	and.w	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b088      	sub	sp, #32
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_SPI_Transmit+0x22>
 8004798:	2302      	movs	r3, #2
 800479a:	e126      	b.n	80049ea <HAL_SPI_Transmit+0x270>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a4:	f7fd ff1c 	bl	80025e0 <HAL_GetTick>
 80047a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
 80047bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047be:	e10b      	b.n	80049d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_SPI_Transmit+0x52>
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047d0:	e102      	b.n	80049d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2203      	movs	r2, #3
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	d10f      	bne.n	800483a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d007      	beq.n	8004858 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004860:	d14b      	bne.n	80048fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Transmit+0xf6>
 800486a:	8afb      	ldrh	r3, [r7, #22]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d13e      	bne.n	80048ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004894:	e02b      	b.n	80048ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d112      	bne.n	80048ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80048c8:	e011      	b.n	80048ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ca:	f7fd fe89 	bl	80025e0 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d803      	bhi.n	80048e2 <HAL_SPI_Transmit+0x168>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d102      	bne.n	80048e8 <HAL_SPI_Transmit+0x16e>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ec:	e074      	b.n	80049d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ce      	bne.n	8004896 <HAL_SPI_Transmit+0x11c>
 80048f8:	e04c      	b.n	8004994 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SPI_Transmit+0x18e>
 8004902:	8afb      	ldrh	r3, [r7, #22]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d140      	bne.n	800498a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800492e:	e02c      	b.n	800498a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d113      	bne.n	8004966 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	; 0x36
 8004964:	e011      	b.n	800498a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004966:	f7fd fe3b 	bl	80025e0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d803      	bhi.n	800497e <HAL_SPI_Transmit+0x204>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit+0x20a>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004988:	e026      	b.n	80049d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1cd      	bne.n	8004930 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fbcb 	bl	8005134 <SPI_EndRxTxTransaction>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e000      	b.n	80049d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b088      	sub	sp, #32
 80049f6:	af02      	add	r7, sp, #8
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0e:	d112      	bne.n	8004a36 <HAL_SPI_Receive+0x44>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10e      	bne.n	8004a36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f8f1 	bl	8004c14 <HAL_SPI_TransmitReceive>
 8004a32:	4603      	mov	r3, r0
 8004a34:	e0ea      	b.n	8004c0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SPI_Receive+0x52>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e0e3      	b.n	8004c0c <HAL_SPI_Receive+0x21a>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4c:	f7fd fdc8 	bl	80025e0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a62:	e0ca      	b.n	8004bfa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Receive+0x7e>
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a74:	e0c1      	b.n	8004bfa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	d10f      	bne.n	8004ade <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d007      	beq.n	8004afc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d162      	bne.n	8004bca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b04:	e02e      	b.n	8004b64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d115      	bne.n	8004b40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f103 020c 	add.w	r2, r3, #12
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3e:	e011      	b.n	8004b64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b40:	f7fd fd4e 	bl	80025e0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d803      	bhi.n	8004b58 <HAL_SPI_Receive+0x166>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d102      	bne.n	8004b5e <HAL_SPI_Receive+0x16c>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b62:	e04a      	b.n	8004bfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1cb      	bne.n	8004b06 <HAL_SPI_Receive+0x114>
 8004b6e:	e031      	b.n	8004bd4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d113      	bne.n	8004ba6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba4:	e011      	b.n	8004bca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba6:	f7fd fd1b 	bl	80025e0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d803      	bhi.n	8004bbe <HAL_SPI_Receive+0x1cc>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Receive+0x1d2>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bc8:	e017      	b.n	8004bfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1cd      	bne.n	8004b70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa45 	bl	8005068 <SPI_EndRxTransaction>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
 8004bf6:	e000      	b.n	8004bfa <HAL_SPI_Receive+0x208>
  }

error :
 8004bf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08c      	sub	sp, #48	; 0x30
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c22:	2301      	movs	r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_SPI_TransmitReceive+0x26>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e18a      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x33c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c42:	f7fd fccd 	bl	80025e0 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d00f      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x70>
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d107      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x68>
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d003      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c82:	e15b      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x82>
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c9c:	e14e      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d003      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2205      	movs	r2, #5
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d007      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0e:	d178      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x10a>
 8004d18:	8b7b      	ldrh	r3, [r7, #26]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d166      	bne.n	8004dec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d42:	e053      	b.n	8004dec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d11b      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x176>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d016      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x176>
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d113      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	881a      	ldrh	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d119      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x1b8>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d014      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	b292      	uxth	r2, r2
 8004dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	1c9a      	adds	r2, r3, #2
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dcc:	f7fd fc08 	bl	80025e0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d807      	bhi.n	8004dec <HAL_SPI_TransmitReceive+0x1d8>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d003      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dea:	e0a7      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1a6      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x130>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1a1      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x130>
 8004e00:	e07c      	b.n	8004efc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x1fc>
 8004e0a:	8b7b      	ldrh	r3, [r7, #26]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d16b      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e36:	e057      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d11c      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x26c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d017      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x26c>
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d114      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d119      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x2ae>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d014      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ec2:	f7fd fb8d 	bl	80025e0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d803      	bhi.n	8004eda <HAL_SPI_TransmitReceive+0x2c6>
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d102      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x2cc>
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ee6:	e029      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1a2      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x224>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d19d      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f917 	bl	8005134 <SPI_EndRxTxTransaction>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f18:	e010      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	e000      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3730      	adds	r7, #48	; 0x30
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f68:	f7fd fb3a 	bl	80025e0 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f78:	f7fd fb32 	bl	80025e0 <HAL_GetTick>
 8004f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	0d1b      	lsrs	r3, r3, #20
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8e:	e054      	b.n	800503a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d050      	beq.n	800503a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f98:	f7fd fb22 	bl	80025e0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d902      	bls.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d13d      	bne.n	800502a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc6:	d111      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	d004      	beq.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d107      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d10f      	bne.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e017      	b.n	800505a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3b01      	subs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	429a      	cmp	r2, r3
 8005056:	d19b      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000000c 	.word	0x2000000c

08005068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507c:	d111      	bne.n	80050a2 <SPI_EndRxTransaction+0x3a>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005086:	d004      	beq.n	8005092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	d107      	bne.n	80050a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050aa:	d12a      	bne.n	8005102 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d012      	beq.n	80050dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2200      	movs	r2, #0
 80050be:	2180      	movs	r1, #128	; 0x80
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff ff49 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02d      	beq.n	8005128 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e026      	b.n	800512a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	2101      	movs	r1, #1
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff ff36 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01a      	beq.n	8005128 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	f043 0220 	orr.w	r2, r3, #32
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e013      	b.n	800512a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2200      	movs	r2, #0
 800510a:	2101      	movs	r1, #1
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ff23 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e000      	b.n	800512a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <SPI_EndRxTxTransaction+0x7c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <SPI_EndRxTxTransaction+0x80>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	0d5b      	lsrs	r3, r3, #21
 800514c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515e:	d112      	bne.n	8005186 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	2180      	movs	r1, #128	; 0x80
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fef4 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e00f      	b.n	80051a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3b01      	subs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d0f2      	beq.n	8005186 <SPI_EndRxTxTransaction+0x52>
 80051a0:	e000      	b.n	80051a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80051a2:	bf00      	nop
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	165e9f81 	.word	0x165e9f81

080051b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc ffde 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fae2 	bl	80057c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d001      	beq.n	8005270 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e03c      	b.n	80052ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_TIM_Base_Start+0xa0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_TIM_Base_Start+0x5c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d013      	beq.n	80052b4 <HAL_TIM_Base_Start+0x5c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <HAL_TIM_Base_Start+0xa4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIM_Base_Start+0x5c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <HAL_TIM_Base_Start+0xa8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIM_Base_Start+0x5c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <HAL_TIM_Base_Start+0xac>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIM_Base_Start+0x5c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a16      	ldr	r2, [pc, #88]	; (8005308 <HAL_TIM_Base_Start+0xb0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d111      	bne.n	80052d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d010      	beq.n	80052e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	e007      	b.n	80052e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40014000 	.word	0x40014000

0800530c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d001      	beq.n	8005324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e044      	b.n	80053ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1e      	ldr	r2, [pc, #120]	; (80053bc <HAL_TIM_Base_Start_IT+0xb0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x6c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d013      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x6c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1a      	ldr	r2, [pc, #104]	; (80053c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x6c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x6c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x6c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a16      	ldr	r2, [pc, #88]	; (80053cc <HAL_TIM_Base_Start_IT+0xc0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d111      	bne.n	800539c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d010      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	e007      	b.n	80053ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40014000 	.word	0x40014000

080053d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0202 	mvn.w	r2, #2
 80053fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9b5 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9a7 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9b8 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0204 	mvn.w	r2, #4
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f98b 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f97d 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f98e 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0208 	mvn.w	r2, #8
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2204      	movs	r2, #4
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f961 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f953 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f964 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0210 	mvn.w	r2, #16
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2208      	movs	r2, #8
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f937 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f929 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f93a 	bl	8005796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0201 	mvn.w	r2, #1
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fc fd1e 	bl	8001f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b80      	cmp	r3, #128	; 0x80
 8005560:	d10e      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fab2 	bl	8005ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d10e      	bne.n	80055ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d107      	bne.n	80055ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8ff 	bl	80057aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d10e      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa7c 	bl	8005ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_ConfigClockSource+0x1c>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e0b4      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x186>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800561a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005634:	d03e      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563a:	f200 8087 	bhi.w	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	f000 8086 	beq.w	8005752 <HAL_TIM_ConfigClockSource+0x172>
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564a:	d87f      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b70      	cmp	r3, #112	; 0x70
 800564e:	d01a      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xa6>
 8005650:	2b70      	cmp	r3, #112	; 0x70
 8005652:	d87b      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b60      	cmp	r3, #96	; 0x60
 8005656:	d050      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x11a>
 8005658:	2b60      	cmp	r3, #96	; 0x60
 800565a:	d877      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b50      	cmp	r3, #80	; 0x50
 800565e:	d03c      	beq.n	80056da <HAL_TIM_ConfigClockSource+0xfa>
 8005660:	2b50      	cmp	r3, #80	; 0x50
 8005662:	d873      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d058      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x13a>
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d86f      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	d064      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b30      	cmp	r3, #48	; 0x30
 8005672:	d86b      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d060      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d867      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05c      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005680:	2b10      	cmp	r3, #16
 8005682:	d05a      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	e062      	b.n	800574c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f000 f98d 	bl	80059b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	609a      	str	r2, [r3, #8]
      break;
 80056b2:	e04f      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6899      	ldr	r1, [r3, #8]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f000 f976 	bl	80059b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d6:	609a      	str	r2, [r3, #8]
      break;
 80056d8:	e03c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 f8ea 	bl	80058c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2150      	movs	r1, #80	; 0x50
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f943 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 80056f8:	e02c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	461a      	mov	r2, r3
 8005708:	f000 f909 	bl	800591e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2160      	movs	r1, #96	; 0x60
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f933 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005718:	e01c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	461a      	mov	r2, r3
 8005728:	f000 f8ca 	bl	80058c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2140      	movs	r1, #64	; 0x40
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f923 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005738:	e00c      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f000 f91a 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 800574a:	e003      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	e000      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <TIM_Base_SetConfig+0xe4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a31      	ldr	r2, [pc, #196]	; (80058a8 <TIM_Base_SetConfig+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a30      	ldr	r2, [pc, #192]	; (80058ac <TIM_Base_SetConfig+0xec>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <TIM_Base_SetConfig+0xf0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d108      	bne.n	800580a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <TIM_Base_SetConfig+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <TIM_Base_SetConfig+0xe8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a21      	ldr	r2, [pc, #132]	; (80058ac <TIM_Base_SetConfig+0xec>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <TIM_Base_SetConfig+0xf0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <TIM_Base_SetConfig+0xf4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <TIM_Base_SetConfig+0xf8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <TIM_Base_SetConfig+0xfc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <TIM_Base_SetConfig+0xe4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 030a 	bic.w	r3, r3, #10
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0210 	bic.w	r2, r3, #16
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800595a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	f043 0307 	orr.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e050      	b.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a58:	d013      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10c      	bne.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40014000 	.word	0x40014000

08005ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e03f      	b.n	8005b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fc fb5e 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	; 0x24
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f929 	bl	8005d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b08a      	sub	sp, #40	; 0x28
 8005b96:	af02      	add	r7, sp, #8
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d17c      	bne.n	8005cac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Transmit+0x2c>
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e075      	b.n	8005cae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Transmit+0x3e>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e06e      	b.n	8005cae <HAL_UART_Transmit+0x11c>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2221      	movs	r2, #33	; 0x21
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be6:	f7fc fcfb 	bl	80025e0 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c00:	d108      	bne.n	8005c14 <HAL_UART_Transmit+0x82>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e003      	b.n	8005c1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c24:	e02a      	b.n	8005c7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f840 	bl	8005cb6 <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e036      	b.n	8005cae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e007      	b.n	8005c6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	781a      	ldrb	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1cf      	bne.n	8005c26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2140      	movs	r1, #64	; 0x40
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f810 	bl	8005cb6 <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e000      	b.n	8005cae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b090      	sub	sp, #64	; 0x40
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc6:	e050      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d04c      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd6:	f7fc fc83 	bl	80025e0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d241      	bcs.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d06:	637a      	str	r2, [r7, #52]	; 0x34
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d3a:	623a      	str	r2, [r7, #32]
 8005d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	69f9      	ldr	r1, [r7, #28]
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e00f      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d09f      	beq.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3740      	adds	r7, #64	; 0x40
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	b09f      	sub	sp, #124	; 0x7c
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005daa:	68d9      	ldr	r1, [r3, #12]
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	ea40 0301 	orr.w	r3, r0, r1
 8005db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de2:	430b      	orrs	r3, r1
 8005de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	6999      	ldr	r1, [r3, #24]
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	ea40 0301 	orr.w	r3, r0, r1
 8005dfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4bc5      	ldr	r3, [pc, #788]	; (8006118 <UART_SetConfig+0x384>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d004      	beq.n	8005e12 <UART_SetConfig+0x7e>
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4bc3      	ldr	r3, [pc, #780]	; (800611c <UART_SetConfig+0x388>)
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d103      	bne.n	8005e1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e12:	f7fe fbe3 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8005e16:	6778      	str	r0, [r7, #116]	; 0x74
 8005e18:	e002      	b.n	8005e20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e1a:	f7fe fbcb 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 8005e1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	f040 80b6 	bne.w	8005f98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2e:	461c      	mov	r4, r3
 8005e30:	f04f 0500 	mov.w	r5, #0
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	6439      	str	r1, [r7, #64]	; 0x40
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e44:	1912      	adds	r2, r2, r4
 8005e46:	eb45 0303 	adc.w	r3, r5, r3
 8005e4a:	f04f 0000 	mov.w	r0, #0
 8005e4e:	f04f 0100 	mov.w	r1, #0
 8005e52:	00d9      	lsls	r1, r3, #3
 8005e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e58:	00d0      	lsls	r0, r2, #3
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	1911      	adds	r1, r2, r4
 8005e60:	6639      	str	r1, [r7, #96]	; 0x60
 8005e62:	416b      	adcs	r3, r5
 8005e64:	667b      	str	r3, [r7, #100]	; 0x64
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e74:	415b      	adcs	r3, r3
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e80:	f7fa fa06 	bl	8000290 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4ba5      	ldr	r3, [pc, #660]	; (8006120 <UART_SetConfig+0x38c>)
 8005e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	011e      	lsls	r6, r3, #4
 8005e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e94:	461c      	mov	r4, r3
 8005e96:	f04f 0500 	mov.w	r5, #0
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	1891      	adds	r1, r2, r2
 8005ea0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005eaa:	1912      	adds	r2, r2, r4
 8005eac:	eb45 0303 	adc.w	r3, r5, r3
 8005eb0:	f04f 0000 	mov.w	r0, #0
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	00d9      	lsls	r1, r3, #3
 8005eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ebe:	00d0      	lsls	r0, r2, #3
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	1911      	adds	r1, r2, r4
 8005ec6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec8:	416b      	adcs	r3, r5
 8005eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eda:	415b      	adcs	r3, r3
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ee2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ee6:	f7fa f9d3 	bl	8000290 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4b8c      	ldr	r3, [pc, #560]	; (8006120 <UART_SetConfig+0x38c>)
 8005ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	2164      	movs	r1, #100	; 0x64
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	3332      	adds	r3, #50	; 0x32
 8005f02:	4a87      	ldr	r2, [pc, #540]	; (8006120 <UART_SetConfig+0x38c>)
 8005f04:	fba2 2303 	umull	r2, r3, r2, r3
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f10:	441e      	add	r6, r3
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	4618      	mov	r0, r3
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	1894      	adds	r4, r2, r2
 8005f20:	623c      	str	r4, [r7, #32]
 8005f22:	415b      	adcs	r3, r3
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f2a:	1812      	adds	r2, r2, r0
 8005f2c:	eb41 0303 	adc.w	r3, r1, r3
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	f04f 0500 	mov.w	r5, #0
 8005f38:	00dd      	lsls	r5, r3, #3
 8005f3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f3e:	00d4      	lsls	r4, r2, #3
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	1814      	adds	r4, r2, r0
 8005f46:	653c      	str	r4, [r7, #80]	; 0x50
 8005f48:	414b      	adcs	r3, r1
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	61b9      	str	r1, [r7, #24]
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f66:	f7fa f993 	bl	8000290 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <UART_SetConfig+0x38c>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a67      	ldr	r2, [pc, #412]	; (8006120 <UART_SetConfig+0x38c>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 0207 	and.w	r2, r3, #7
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4432      	add	r2, r6
 8005f94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f96:	e0b9      	b.n	800610c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9a:	461c      	mov	r4, r3
 8005f9c:	f04f 0500 	mov.w	r5, #0
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	6139      	str	r1, [r7, #16]
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fb0:	1912      	adds	r2, r2, r4
 8005fb2:	eb45 0303 	adc.w	r3, r5, r3
 8005fb6:	f04f 0000 	mov.w	r0, #0
 8005fba:	f04f 0100 	mov.w	r1, #0
 8005fbe:	00d9      	lsls	r1, r3, #3
 8005fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc4:	00d0      	lsls	r0, r2, #3
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	eb12 0804 	adds.w	r8, r2, r4
 8005fce:	eb43 0905 	adc.w	r9, r3, r5
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f04f 0100 	mov.w	r1, #0
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	008b      	lsls	r3, r1, #2
 8005fe6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fea:	0082      	lsls	r2, r0, #2
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa f94e 	bl	8000290 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4b49      	ldr	r3, [pc, #292]	; (8006120 <UART_SetConfig+0x38c>)
 8005ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	011e      	lsls	r6, r3, #4
 8006002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006004:	4618      	mov	r0, r3
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	1894      	adds	r4, r2, r2
 8006010:	60bc      	str	r4, [r7, #8]
 8006012:	415b      	adcs	r3, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601a:	1812      	adds	r2, r2, r0
 800601c:	eb41 0303 	adc.w	r3, r1, r3
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	f04f 0500 	mov.w	r5, #0
 8006028:	00dd      	lsls	r5, r3, #3
 800602a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800602e:	00d4      	lsls	r4, r2, #3
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	1814      	adds	r4, r2, r0
 8006036:	64bc      	str	r4, [r7, #72]	; 0x48
 8006038:	414b      	adcs	r3, r1
 800603a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4618      	mov	r0, r3
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	008b      	lsls	r3, r1, #2
 8006050:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006054:	0082      	lsls	r2, r0, #2
 8006056:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800605a:	f7fa f919 	bl	8000290 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <UART_SetConfig+0x38c>)
 8006064:	fba3 1302 	umull	r1, r3, r3, r2
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	2164      	movs	r1, #100	; 0x64
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	3332      	adds	r3, #50	; 0x32
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <UART_SetConfig+0x38c>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006082:	441e      	add	r6, r3
 8006084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006086:	4618      	mov	r0, r3
 8006088:	f04f 0100 	mov.w	r1, #0
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	1894      	adds	r4, r2, r2
 8006092:	603c      	str	r4, [r7, #0]
 8006094:	415b      	adcs	r3, r3
 8006096:	607b      	str	r3, [r7, #4]
 8006098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609c:	1812      	adds	r2, r2, r0
 800609e:	eb41 0303 	adc.w	r3, r1, r3
 80060a2:	f04f 0400 	mov.w	r4, #0
 80060a6:	f04f 0500 	mov.w	r5, #0
 80060aa:	00dd      	lsls	r5, r3, #3
 80060ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b0:	00d4      	lsls	r4, r2, #3
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	eb12 0a00 	adds.w	sl, r2, r0
 80060ba:	eb43 0b01 	adc.w	fp, r3, r1
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	008b      	lsls	r3, r1, #2
 80060d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d6:	0082      	lsls	r2, r0, #2
 80060d8:	4650      	mov	r0, sl
 80060da:	4659      	mov	r1, fp
 80060dc:	f7fa f8d8 	bl	8000290 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <UART_SetConfig+0x38c>)
 80060e6:	fba3 1302 	umull	r1, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2164      	movs	r1, #100	; 0x64
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <UART_SetConfig+0x38c>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4432      	add	r2, r6
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	377c      	adds	r7, #124	; 0x7c
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	40011000 	.word	0x40011000
 800611c:	40011400 	.word	0x40011400
 8006120:	51eb851f 	.word	0x51eb851f

08006124 <__errno>:
 8006124:	4b01      	ldr	r3, [pc, #4]	; (800612c <__errno+0x8>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000018 	.word	0x20000018

08006130 <__libc_init_array>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4d0d      	ldr	r5, [pc, #52]	; (8006168 <__libc_init_array+0x38>)
 8006134:	4c0d      	ldr	r4, [pc, #52]	; (800616c <__libc_init_array+0x3c>)
 8006136:	1b64      	subs	r4, r4, r5
 8006138:	10a4      	asrs	r4, r4, #2
 800613a:	2600      	movs	r6, #0
 800613c:	42a6      	cmp	r6, r4
 800613e:	d109      	bne.n	8006154 <__libc_init_array+0x24>
 8006140:	4d0b      	ldr	r5, [pc, #44]	; (8006170 <__libc_init_array+0x40>)
 8006142:	4c0c      	ldr	r4, [pc, #48]	; (8006174 <__libc_init_array+0x44>)
 8006144:	f001 f9be 	bl	80074c4 <_init>
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	2600      	movs	r6, #0
 800614e:	42a6      	cmp	r6, r4
 8006150:	d105      	bne.n	800615e <__libc_init_array+0x2e>
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	f855 3b04 	ldr.w	r3, [r5], #4
 8006158:	4798      	blx	r3
 800615a:	3601      	adds	r6, #1
 800615c:	e7ee      	b.n	800613c <__libc_init_array+0xc>
 800615e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006162:	4798      	blx	r3
 8006164:	3601      	adds	r6, #1
 8006166:	e7f2      	b.n	800614e <__libc_init_array+0x1e>
 8006168:	08007b1c 	.word	0x08007b1c
 800616c:	08007b1c 	.word	0x08007b1c
 8006170:	08007b1c 	.word	0x08007b1c
 8006174:	08007b20 	.word	0x08007b20

08006178 <memcpy>:
 8006178:	440a      	add	r2, r1
 800617a:	4291      	cmp	r1, r2
 800617c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006180:	d100      	bne.n	8006184 <memcpy+0xc>
 8006182:	4770      	bx	lr
 8006184:	b510      	push	{r4, lr}
 8006186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800618a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618e:	4291      	cmp	r1, r2
 8006190:	d1f9      	bne.n	8006186 <memcpy+0xe>
 8006192:	bd10      	pop	{r4, pc}

08006194 <memset>:
 8006194:	4402      	add	r2, r0
 8006196:	4603      	mov	r3, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <iprintf>:
 80061a4:	b40f      	push	{r0, r1, r2, r3}
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <iprintf+0x2c>)
 80061a8:	b513      	push	{r0, r1, r4, lr}
 80061aa:	681c      	ldr	r4, [r3, #0]
 80061ac:	b124      	cbz	r4, 80061b8 <iprintf+0x14>
 80061ae:	69a3      	ldr	r3, [r4, #24]
 80061b0:	b913      	cbnz	r3, 80061b8 <iprintf+0x14>
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fa7e 	bl	80066b4 <__sinit>
 80061b8:	ab05      	add	r3, sp, #20
 80061ba:	9a04      	ldr	r2, [sp, #16]
 80061bc:	68a1      	ldr	r1, [r4, #8]
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 fdab 	bl	8006d1c <_vfiprintf_r>
 80061c6:	b002      	add	sp, #8
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061cc:	b004      	add	sp, #16
 80061ce:	4770      	bx	lr
 80061d0:	20000018 	.word	0x20000018

080061d4 <_puts_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	460e      	mov	r6, r1
 80061d8:	4605      	mov	r5, r0
 80061da:	b118      	cbz	r0, 80061e4 <_puts_r+0x10>
 80061dc:	6983      	ldr	r3, [r0, #24]
 80061de:	b90b      	cbnz	r3, 80061e4 <_puts_r+0x10>
 80061e0:	f000 fa68 	bl	80066b4 <__sinit>
 80061e4:	69ab      	ldr	r3, [r5, #24]
 80061e6:	68ac      	ldr	r4, [r5, #8]
 80061e8:	b913      	cbnz	r3, 80061f0 <_puts_r+0x1c>
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 fa62 	bl	80066b4 <__sinit>
 80061f0:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <_puts_r+0xd0>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d120      	bne.n	8006238 <_puts_r+0x64>
 80061f6:	686c      	ldr	r4, [r5, #4]
 80061f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061fa:	07db      	lsls	r3, r3, #31
 80061fc:	d405      	bmi.n	800620a <_puts_r+0x36>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	0598      	lsls	r0, r3, #22
 8006202:	d402      	bmi.n	800620a <_puts_r+0x36>
 8006204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006206:	f000 faf3 	bl	80067f0 <__retarget_lock_acquire_recursive>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	0719      	lsls	r1, r3, #28
 800620e:	d51d      	bpl.n	800624c <_puts_r+0x78>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	b1db      	cbz	r3, 800624c <_puts_r+0x78>
 8006214:	3e01      	subs	r6, #1
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800621c:	3b01      	subs	r3, #1
 800621e:	60a3      	str	r3, [r4, #8]
 8006220:	bb39      	cbnz	r1, 8006272 <_puts_r+0x9e>
 8006222:	2b00      	cmp	r3, #0
 8006224:	da38      	bge.n	8006298 <_puts_r+0xc4>
 8006226:	4622      	mov	r2, r4
 8006228:	210a      	movs	r1, #10
 800622a:	4628      	mov	r0, r5
 800622c:	f000 f868 	bl	8006300 <__swbuf_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d011      	beq.n	8006258 <_puts_r+0x84>
 8006234:	250a      	movs	r5, #10
 8006236:	e011      	b.n	800625c <_puts_r+0x88>
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <_puts_r+0xd4>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d101      	bne.n	8006242 <_puts_r+0x6e>
 800623e:	68ac      	ldr	r4, [r5, #8]
 8006240:	e7da      	b.n	80061f8 <_puts_r+0x24>
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <_puts_r+0xd8>)
 8006244:	429c      	cmp	r4, r3
 8006246:	bf08      	it	eq
 8006248:	68ec      	ldreq	r4, [r5, #12]
 800624a:	e7d5      	b.n	80061f8 <_puts_r+0x24>
 800624c:	4621      	mov	r1, r4
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f8a8 	bl	80063a4 <__swsetup_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0dd      	beq.n	8006214 <_puts_r+0x40>
 8006258:	f04f 35ff 	mov.w	r5, #4294967295
 800625c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800625e:	07da      	lsls	r2, r3, #31
 8006260:	d405      	bmi.n	800626e <_puts_r+0x9a>
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	059b      	lsls	r3, r3, #22
 8006266:	d402      	bmi.n	800626e <_puts_r+0x9a>
 8006268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626a:	f000 fac2 	bl	80067f2 <__retarget_lock_release_recursive>
 800626e:	4628      	mov	r0, r5
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	2b00      	cmp	r3, #0
 8006274:	da04      	bge.n	8006280 <_puts_r+0xac>
 8006276:	69a2      	ldr	r2, [r4, #24]
 8006278:	429a      	cmp	r2, r3
 800627a:	dc06      	bgt.n	800628a <_puts_r+0xb6>
 800627c:	290a      	cmp	r1, #10
 800627e:	d004      	beq.n	800628a <_puts_r+0xb6>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	7019      	strb	r1, [r3, #0]
 8006288:	e7c5      	b.n	8006216 <_puts_r+0x42>
 800628a:	4622      	mov	r2, r4
 800628c:	4628      	mov	r0, r5
 800628e:	f000 f837 	bl	8006300 <__swbuf_r>
 8006292:	3001      	adds	r0, #1
 8006294:	d1bf      	bne.n	8006216 <_puts_r+0x42>
 8006296:	e7df      	b.n	8006258 <_puts_r+0x84>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	250a      	movs	r5, #10
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	701d      	strb	r5, [r3, #0]
 80062a2:	e7db      	b.n	800625c <_puts_r+0x88>
 80062a4:	08007aa0 	.word	0x08007aa0
 80062a8:	08007ac0 	.word	0x08007ac0
 80062ac:	08007a80 	.word	0x08007a80

080062b0 <puts>:
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <puts+0xc>)
 80062b2:	4601      	mov	r1, r0
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	f7ff bf8d 	b.w	80061d4 <_puts_r>
 80062ba:	bf00      	nop
 80062bc:	20000018 	.word	0x20000018

080062c0 <siprintf>:
 80062c0:	b40e      	push	{r1, r2, r3}
 80062c2:	b500      	push	{lr}
 80062c4:	b09c      	sub	sp, #112	; 0x70
 80062c6:	ab1d      	add	r3, sp, #116	; 0x74
 80062c8:	9002      	str	r0, [sp, #8]
 80062ca:	9006      	str	r0, [sp, #24]
 80062cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062d0:	4809      	ldr	r0, [pc, #36]	; (80062f8 <siprintf+0x38>)
 80062d2:	9107      	str	r1, [sp, #28]
 80062d4:	9104      	str	r1, [sp, #16]
 80062d6:	4909      	ldr	r1, [pc, #36]	; (80062fc <siprintf+0x3c>)
 80062d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062dc:	9105      	str	r1, [sp, #20]
 80062de:	6800      	ldr	r0, [r0, #0]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	a902      	add	r1, sp, #8
 80062e4:	f000 fbf0 	bl	8006ac8 <_svfiprintf_r>
 80062e8:	9b02      	ldr	r3, [sp, #8]
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	b01c      	add	sp, #112	; 0x70
 80062f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062f4:	b003      	add	sp, #12
 80062f6:	4770      	bx	lr
 80062f8:	20000018 	.word	0x20000018
 80062fc:	ffff0208 	.word	0xffff0208

08006300 <__swbuf_r>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	460e      	mov	r6, r1
 8006304:	4614      	mov	r4, r2
 8006306:	4605      	mov	r5, r0
 8006308:	b118      	cbz	r0, 8006312 <__swbuf_r+0x12>
 800630a:	6983      	ldr	r3, [r0, #24]
 800630c:	b90b      	cbnz	r3, 8006312 <__swbuf_r+0x12>
 800630e:	f000 f9d1 	bl	80066b4 <__sinit>
 8006312:	4b21      	ldr	r3, [pc, #132]	; (8006398 <__swbuf_r+0x98>)
 8006314:	429c      	cmp	r4, r3
 8006316:	d12b      	bne.n	8006370 <__swbuf_r+0x70>
 8006318:	686c      	ldr	r4, [r5, #4]
 800631a:	69a3      	ldr	r3, [r4, #24]
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	071a      	lsls	r2, r3, #28
 8006322:	d52f      	bpl.n	8006384 <__swbuf_r+0x84>
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	b36b      	cbz	r3, 8006384 <__swbuf_r+0x84>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	1ac0      	subs	r0, r0, r3
 800632e:	6963      	ldr	r3, [r4, #20]
 8006330:	b2f6      	uxtb	r6, r6
 8006332:	4283      	cmp	r3, r0
 8006334:	4637      	mov	r7, r6
 8006336:	dc04      	bgt.n	8006342 <__swbuf_r+0x42>
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f926 	bl	800658c <_fflush_r>
 8006340:	bb30      	cbnz	r0, 8006390 <__swbuf_r+0x90>
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	3b01      	subs	r3, #1
 8006346:	60a3      	str	r3, [r4, #8]
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	6022      	str	r2, [r4, #0]
 800634e:	701e      	strb	r6, [r3, #0]
 8006350:	6963      	ldr	r3, [r4, #20]
 8006352:	3001      	adds	r0, #1
 8006354:	4283      	cmp	r3, r0
 8006356:	d004      	beq.n	8006362 <__swbuf_r+0x62>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	07db      	lsls	r3, r3, #31
 800635c:	d506      	bpl.n	800636c <__swbuf_r+0x6c>
 800635e:	2e0a      	cmp	r6, #10
 8006360:	d104      	bne.n	800636c <__swbuf_r+0x6c>
 8006362:	4621      	mov	r1, r4
 8006364:	4628      	mov	r0, r5
 8006366:	f000 f911 	bl	800658c <_fflush_r>
 800636a:	b988      	cbnz	r0, 8006390 <__swbuf_r+0x90>
 800636c:	4638      	mov	r0, r7
 800636e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <__swbuf_r+0x9c>)
 8006372:	429c      	cmp	r4, r3
 8006374:	d101      	bne.n	800637a <__swbuf_r+0x7a>
 8006376:	68ac      	ldr	r4, [r5, #8]
 8006378:	e7cf      	b.n	800631a <__swbuf_r+0x1a>
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <__swbuf_r+0xa0>)
 800637c:	429c      	cmp	r4, r3
 800637e:	bf08      	it	eq
 8006380:	68ec      	ldreq	r4, [r5, #12]
 8006382:	e7ca      	b.n	800631a <__swbuf_r+0x1a>
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f000 f80c 	bl	80063a4 <__swsetup_r>
 800638c:	2800      	cmp	r0, #0
 800638e:	d0cb      	beq.n	8006328 <__swbuf_r+0x28>
 8006390:	f04f 37ff 	mov.w	r7, #4294967295
 8006394:	e7ea      	b.n	800636c <__swbuf_r+0x6c>
 8006396:	bf00      	nop
 8006398:	08007aa0 	.word	0x08007aa0
 800639c:	08007ac0 	.word	0x08007ac0
 80063a0:	08007a80 	.word	0x08007a80

080063a4 <__swsetup_r>:
 80063a4:	4b32      	ldr	r3, [pc, #200]	; (8006470 <__swsetup_r+0xcc>)
 80063a6:	b570      	push	{r4, r5, r6, lr}
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	4606      	mov	r6, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	b125      	cbz	r5, 80063ba <__swsetup_r+0x16>
 80063b0:	69ab      	ldr	r3, [r5, #24]
 80063b2:	b913      	cbnz	r3, 80063ba <__swsetup_r+0x16>
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 f97d 	bl	80066b4 <__sinit>
 80063ba:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <__swsetup_r+0xd0>)
 80063bc:	429c      	cmp	r4, r3
 80063be:	d10f      	bne.n	80063e0 <__swsetup_r+0x3c>
 80063c0:	686c      	ldr	r4, [r5, #4]
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063c8:	0719      	lsls	r1, r3, #28
 80063ca:	d42c      	bmi.n	8006426 <__swsetup_r+0x82>
 80063cc:	06dd      	lsls	r5, r3, #27
 80063ce:	d411      	bmi.n	80063f4 <__swsetup_r+0x50>
 80063d0:	2309      	movs	r3, #9
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	f04f 30ff 	mov.w	r0, #4294967295
 80063de:	e03e      	b.n	800645e <__swsetup_r+0xba>
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <__swsetup_r+0xd4>)
 80063e2:	429c      	cmp	r4, r3
 80063e4:	d101      	bne.n	80063ea <__swsetup_r+0x46>
 80063e6:	68ac      	ldr	r4, [r5, #8]
 80063e8:	e7eb      	b.n	80063c2 <__swsetup_r+0x1e>
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <__swsetup_r+0xd8>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	bf08      	it	eq
 80063f0:	68ec      	ldreq	r4, [r5, #12]
 80063f2:	e7e6      	b.n	80063c2 <__swsetup_r+0x1e>
 80063f4:	0758      	lsls	r0, r3, #29
 80063f6:	d512      	bpl.n	800641e <__swsetup_r+0x7a>
 80063f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063fa:	b141      	cbz	r1, 800640e <__swsetup_r+0x6a>
 80063fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006400:	4299      	cmp	r1, r3
 8006402:	d002      	beq.n	800640a <__swsetup_r+0x66>
 8006404:	4630      	mov	r0, r6
 8006406:	f000 fa59 	bl	80068bc <_free_r>
 800640a:	2300      	movs	r3, #0
 800640c:	6363      	str	r3, [r4, #52]	; 0x34
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	2300      	movs	r3, #0
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f043 0308 	orr.w	r3, r3, #8
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	b94b      	cbnz	r3, 800643e <__swsetup_r+0x9a>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006434:	d003      	beq.n	800643e <__swsetup_r+0x9a>
 8006436:	4621      	mov	r1, r4
 8006438:	4630      	mov	r0, r6
 800643a:	f000 f9ff 	bl	800683c <__smakebuf_r>
 800643e:	89a0      	ldrh	r0, [r4, #12]
 8006440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006444:	f010 0301 	ands.w	r3, r0, #1
 8006448:	d00a      	beq.n	8006460 <__swsetup_r+0xbc>
 800644a:	2300      	movs	r3, #0
 800644c:	60a3      	str	r3, [r4, #8]
 800644e:	6963      	ldr	r3, [r4, #20]
 8006450:	425b      	negs	r3, r3
 8006452:	61a3      	str	r3, [r4, #24]
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	b943      	cbnz	r3, 800646a <__swsetup_r+0xc6>
 8006458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800645c:	d1ba      	bne.n	80063d4 <__swsetup_r+0x30>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	0781      	lsls	r1, r0, #30
 8006462:	bf58      	it	pl
 8006464:	6963      	ldrpl	r3, [r4, #20]
 8006466:	60a3      	str	r3, [r4, #8]
 8006468:	e7f4      	b.n	8006454 <__swsetup_r+0xb0>
 800646a:	2000      	movs	r0, #0
 800646c:	e7f7      	b.n	800645e <__swsetup_r+0xba>
 800646e:	bf00      	nop
 8006470:	20000018 	.word	0x20000018
 8006474:	08007aa0 	.word	0x08007aa0
 8006478:	08007ac0 	.word	0x08007ac0
 800647c:	08007a80 	.word	0x08007a80

08006480 <__sflush_r>:
 8006480:	898a      	ldrh	r2, [r1, #12]
 8006482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	4605      	mov	r5, r0
 8006488:	0710      	lsls	r0, r2, #28
 800648a:	460c      	mov	r4, r1
 800648c:	d458      	bmi.n	8006540 <__sflush_r+0xc0>
 800648e:	684b      	ldr	r3, [r1, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	dc05      	bgt.n	80064a0 <__sflush_r+0x20>
 8006494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	dc02      	bgt.n	80064a0 <__sflush_r+0x20>
 800649a:	2000      	movs	r0, #0
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a2:	2e00      	cmp	r6, #0
 80064a4:	d0f9      	beq.n	800649a <__sflush_r+0x1a>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064ac:	682f      	ldr	r7, [r5, #0]
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	d032      	beq.n	8006518 <__sflush_r+0x98>
 80064b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	075a      	lsls	r2, r3, #29
 80064b8:	d505      	bpl.n	80064c6 <__sflush_r+0x46>
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	1ac0      	subs	r0, r0, r3
 80064be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c0:	b10b      	cbz	r3, 80064c6 <__sflush_r+0x46>
 80064c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c4:	1ac0      	subs	r0, r0, r3
 80064c6:	2300      	movs	r3, #0
 80064c8:	4602      	mov	r2, r0
 80064ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064cc:	6a21      	ldr	r1, [r4, #32]
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b0      	blx	r6
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	d106      	bne.n	80064e6 <__sflush_r+0x66>
 80064d8:	6829      	ldr	r1, [r5, #0]
 80064da:	291d      	cmp	r1, #29
 80064dc:	d82c      	bhi.n	8006538 <__sflush_r+0xb8>
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <__sflush_r+0x108>)
 80064e0:	40ca      	lsrs	r2, r1
 80064e2:	07d6      	lsls	r6, r2, #31
 80064e4:	d528      	bpl.n	8006538 <__sflush_r+0xb8>
 80064e6:	2200      	movs	r2, #0
 80064e8:	6062      	str	r2, [r4, #4]
 80064ea:	04d9      	lsls	r1, r3, #19
 80064ec:	6922      	ldr	r2, [r4, #16]
 80064ee:	6022      	str	r2, [r4, #0]
 80064f0:	d504      	bpl.n	80064fc <__sflush_r+0x7c>
 80064f2:	1c42      	adds	r2, r0, #1
 80064f4:	d101      	bne.n	80064fa <__sflush_r+0x7a>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	b903      	cbnz	r3, 80064fc <__sflush_r+0x7c>
 80064fa:	6560      	str	r0, [r4, #84]	; 0x54
 80064fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064fe:	602f      	str	r7, [r5, #0]
 8006500:	2900      	cmp	r1, #0
 8006502:	d0ca      	beq.n	800649a <__sflush_r+0x1a>
 8006504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006508:	4299      	cmp	r1, r3
 800650a:	d002      	beq.n	8006512 <__sflush_r+0x92>
 800650c:	4628      	mov	r0, r5
 800650e:	f000 f9d5 	bl	80068bc <_free_r>
 8006512:	2000      	movs	r0, #0
 8006514:	6360      	str	r0, [r4, #52]	; 0x34
 8006516:	e7c1      	b.n	800649c <__sflush_r+0x1c>
 8006518:	6a21      	ldr	r1, [r4, #32]
 800651a:	2301      	movs	r3, #1
 800651c:	4628      	mov	r0, r5
 800651e:	47b0      	blx	r6
 8006520:	1c41      	adds	r1, r0, #1
 8006522:	d1c7      	bne.n	80064b4 <__sflush_r+0x34>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0c4      	beq.n	80064b4 <__sflush_r+0x34>
 800652a:	2b1d      	cmp	r3, #29
 800652c:	d001      	beq.n	8006532 <__sflush_r+0xb2>
 800652e:	2b16      	cmp	r3, #22
 8006530:	d101      	bne.n	8006536 <__sflush_r+0xb6>
 8006532:	602f      	str	r7, [r5, #0]
 8006534:	e7b1      	b.n	800649a <__sflush_r+0x1a>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	e7ad      	b.n	800649c <__sflush_r+0x1c>
 8006540:	690f      	ldr	r7, [r1, #16]
 8006542:	2f00      	cmp	r7, #0
 8006544:	d0a9      	beq.n	800649a <__sflush_r+0x1a>
 8006546:	0793      	lsls	r3, r2, #30
 8006548:	680e      	ldr	r6, [r1, #0]
 800654a:	bf08      	it	eq
 800654c:	694b      	ldreq	r3, [r1, #20]
 800654e:	600f      	str	r7, [r1, #0]
 8006550:	bf18      	it	ne
 8006552:	2300      	movne	r3, #0
 8006554:	eba6 0807 	sub.w	r8, r6, r7
 8006558:	608b      	str	r3, [r1, #8]
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	dd9c      	ble.n	800649a <__sflush_r+0x1a>
 8006560:	6a21      	ldr	r1, [r4, #32]
 8006562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006564:	4643      	mov	r3, r8
 8006566:	463a      	mov	r2, r7
 8006568:	4628      	mov	r0, r5
 800656a:	47b0      	blx	r6
 800656c:	2800      	cmp	r0, #0
 800656e:	dc06      	bgt.n	800657e <__sflush_r+0xfe>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e78e      	b.n	800649c <__sflush_r+0x1c>
 800657e:	4407      	add	r7, r0
 8006580:	eba8 0800 	sub.w	r8, r8, r0
 8006584:	e7e9      	b.n	800655a <__sflush_r+0xda>
 8006586:	bf00      	nop
 8006588:	20400001 	.word	0x20400001

0800658c <_fflush_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	b913      	cbnz	r3, 800659c <_fflush_r+0x10>
 8006596:	2500      	movs	r5, #0
 8006598:	4628      	mov	r0, r5
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	b118      	cbz	r0, 80065a6 <_fflush_r+0x1a>
 800659e:	6983      	ldr	r3, [r0, #24]
 80065a0:	b90b      	cbnz	r3, 80065a6 <_fflush_r+0x1a>
 80065a2:	f000 f887 	bl	80066b4 <__sinit>
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <_fflush_r+0x6c>)
 80065a8:	429c      	cmp	r4, r3
 80065aa:	d11b      	bne.n	80065e4 <_fflush_r+0x58>
 80065ac:	686c      	ldr	r4, [r5, #4]
 80065ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0ef      	beq.n	8006596 <_fflush_r+0xa>
 80065b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065b8:	07d0      	lsls	r0, r2, #31
 80065ba:	d404      	bmi.n	80065c6 <_fflush_r+0x3a>
 80065bc:	0599      	lsls	r1, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_fflush_r+0x3a>
 80065c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065c2:	f000 f915 	bl	80067f0 <__retarget_lock_acquire_recursive>
 80065c6:	4628      	mov	r0, r5
 80065c8:	4621      	mov	r1, r4
 80065ca:	f7ff ff59 	bl	8006480 <__sflush_r>
 80065ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d0:	07da      	lsls	r2, r3, #31
 80065d2:	4605      	mov	r5, r0
 80065d4:	d4e0      	bmi.n	8006598 <_fflush_r+0xc>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	059b      	lsls	r3, r3, #22
 80065da:	d4dd      	bmi.n	8006598 <_fflush_r+0xc>
 80065dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065de:	f000 f908 	bl	80067f2 <__retarget_lock_release_recursive>
 80065e2:	e7d9      	b.n	8006598 <_fflush_r+0xc>
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <_fflush_r+0x70>)
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d101      	bne.n	80065ee <_fflush_r+0x62>
 80065ea:	68ac      	ldr	r4, [r5, #8]
 80065ec:	e7df      	b.n	80065ae <_fflush_r+0x22>
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <_fflush_r+0x74>)
 80065f0:	429c      	cmp	r4, r3
 80065f2:	bf08      	it	eq
 80065f4:	68ec      	ldreq	r4, [r5, #12]
 80065f6:	e7da      	b.n	80065ae <_fflush_r+0x22>
 80065f8:	08007aa0 	.word	0x08007aa0
 80065fc:	08007ac0 	.word	0x08007ac0
 8006600:	08007a80 	.word	0x08007a80

08006604 <std>:
 8006604:	2300      	movs	r3, #0
 8006606:	b510      	push	{r4, lr}
 8006608:	4604      	mov	r4, r0
 800660a:	e9c0 3300 	strd	r3, r3, [r0]
 800660e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006612:	6083      	str	r3, [r0, #8]
 8006614:	8181      	strh	r1, [r0, #12]
 8006616:	6643      	str	r3, [r0, #100]	; 0x64
 8006618:	81c2      	strh	r2, [r0, #14]
 800661a:	6183      	str	r3, [r0, #24]
 800661c:	4619      	mov	r1, r3
 800661e:	2208      	movs	r2, #8
 8006620:	305c      	adds	r0, #92	; 0x5c
 8006622:	f7ff fdb7 	bl	8006194 <memset>
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <std+0x38>)
 8006628:	6263      	str	r3, [r4, #36]	; 0x24
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <std+0x3c>)
 800662c:	62a3      	str	r3, [r4, #40]	; 0x28
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <std+0x40>)
 8006630:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <std+0x44>)
 8006634:	6224      	str	r4, [r4, #32]
 8006636:	6323      	str	r3, [r4, #48]	; 0x30
 8006638:	bd10      	pop	{r4, pc}
 800663a:	bf00      	nop
 800663c:	080072c5 	.word	0x080072c5
 8006640:	080072e7 	.word	0x080072e7
 8006644:	0800731f 	.word	0x0800731f
 8006648:	08007343 	.word	0x08007343

0800664c <_cleanup_r>:
 800664c:	4901      	ldr	r1, [pc, #4]	; (8006654 <_cleanup_r+0x8>)
 800664e:	f000 b8af 	b.w	80067b0 <_fwalk_reent>
 8006652:	bf00      	nop
 8006654:	0800658d 	.word	0x0800658d

08006658 <__sfmoreglue>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	1e4a      	subs	r2, r1, #1
 800665c:	2568      	movs	r5, #104	; 0x68
 800665e:	4355      	muls	r5, r2
 8006660:	460e      	mov	r6, r1
 8006662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006666:	f000 f979 	bl	800695c <_malloc_r>
 800666a:	4604      	mov	r4, r0
 800666c:	b140      	cbz	r0, 8006680 <__sfmoreglue+0x28>
 800666e:	2100      	movs	r1, #0
 8006670:	e9c0 1600 	strd	r1, r6, [r0]
 8006674:	300c      	adds	r0, #12
 8006676:	60a0      	str	r0, [r4, #8]
 8006678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800667c:	f7ff fd8a 	bl	8006194 <memset>
 8006680:	4620      	mov	r0, r4
 8006682:	bd70      	pop	{r4, r5, r6, pc}

08006684 <__sfp_lock_acquire>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__sfp_lock_acquire+0x8>)
 8006686:	f000 b8b3 	b.w	80067f0 <__retarget_lock_acquire_recursive>
 800668a:	bf00      	nop
 800668c:	20000348 	.word	0x20000348

08006690 <__sfp_lock_release>:
 8006690:	4801      	ldr	r0, [pc, #4]	; (8006698 <__sfp_lock_release+0x8>)
 8006692:	f000 b8ae 	b.w	80067f2 <__retarget_lock_release_recursive>
 8006696:	bf00      	nop
 8006698:	20000348 	.word	0x20000348

0800669c <__sinit_lock_acquire>:
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <__sinit_lock_acquire+0x8>)
 800669e:	f000 b8a7 	b.w	80067f0 <__retarget_lock_acquire_recursive>
 80066a2:	bf00      	nop
 80066a4:	20000343 	.word	0x20000343

080066a8 <__sinit_lock_release>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__sinit_lock_release+0x8>)
 80066aa:	f000 b8a2 	b.w	80067f2 <__retarget_lock_release_recursive>
 80066ae:	bf00      	nop
 80066b0:	20000343 	.word	0x20000343

080066b4 <__sinit>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4604      	mov	r4, r0
 80066b8:	f7ff fff0 	bl	800669c <__sinit_lock_acquire>
 80066bc:	69a3      	ldr	r3, [r4, #24]
 80066be:	b11b      	cbz	r3, 80066c8 <__sinit+0x14>
 80066c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c4:	f7ff bff0 	b.w	80066a8 <__sinit_lock_release>
 80066c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066cc:	6523      	str	r3, [r4, #80]	; 0x50
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <__sinit+0x68>)
 80066d0:	4a13      	ldr	r2, [pc, #76]	; (8006720 <__sinit+0x6c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	bf04      	itt	eq
 80066da:	2301      	moveq	r3, #1
 80066dc:	61a3      	streq	r3, [r4, #24]
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 f820 	bl	8006724 <__sfp>
 80066e4:	6060      	str	r0, [r4, #4]
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 f81c 	bl	8006724 <__sfp>
 80066ec:	60a0      	str	r0, [r4, #8]
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 f818 	bl	8006724 <__sfp>
 80066f4:	2200      	movs	r2, #0
 80066f6:	60e0      	str	r0, [r4, #12]
 80066f8:	2104      	movs	r1, #4
 80066fa:	6860      	ldr	r0, [r4, #4]
 80066fc:	f7ff ff82 	bl	8006604 <std>
 8006700:	68a0      	ldr	r0, [r4, #8]
 8006702:	2201      	movs	r2, #1
 8006704:	2109      	movs	r1, #9
 8006706:	f7ff ff7d 	bl	8006604 <std>
 800670a:	68e0      	ldr	r0, [r4, #12]
 800670c:	2202      	movs	r2, #2
 800670e:	2112      	movs	r1, #18
 8006710:	f7ff ff78 	bl	8006604 <std>
 8006714:	2301      	movs	r3, #1
 8006716:	61a3      	str	r3, [r4, #24]
 8006718:	e7d2      	b.n	80066c0 <__sinit+0xc>
 800671a:	bf00      	nop
 800671c:	08007a7c 	.word	0x08007a7c
 8006720:	0800664d 	.word	0x0800664d

08006724 <__sfp>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	4607      	mov	r7, r0
 8006728:	f7ff ffac 	bl	8006684 <__sfp_lock_acquire>
 800672c:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <__sfp+0x84>)
 800672e:	681e      	ldr	r6, [r3, #0]
 8006730:	69b3      	ldr	r3, [r6, #24]
 8006732:	b913      	cbnz	r3, 800673a <__sfp+0x16>
 8006734:	4630      	mov	r0, r6
 8006736:	f7ff ffbd 	bl	80066b4 <__sinit>
 800673a:	3648      	adds	r6, #72	; 0x48
 800673c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006740:	3b01      	subs	r3, #1
 8006742:	d503      	bpl.n	800674c <__sfp+0x28>
 8006744:	6833      	ldr	r3, [r6, #0]
 8006746:	b30b      	cbz	r3, 800678c <__sfp+0x68>
 8006748:	6836      	ldr	r6, [r6, #0]
 800674a:	e7f7      	b.n	800673c <__sfp+0x18>
 800674c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006750:	b9d5      	cbnz	r5, 8006788 <__sfp+0x64>
 8006752:	4b16      	ldr	r3, [pc, #88]	; (80067ac <__sfp+0x88>)
 8006754:	60e3      	str	r3, [r4, #12]
 8006756:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800675a:	6665      	str	r5, [r4, #100]	; 0x64
 800675c:	f000 f847 	bl	80067ee <__retarget_lock_init_recursive>
 8006760:	f7ff ff96 	bl	8006690 <__sfp_lock_release>
 8006764:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006768:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800676c:	6025      	str	r5, [r4, #0]
 800676e:	61a5      	str	r5, [r4, #24]
 8006770:	2208      	movs	r2, #8
 8006772:	4629      	mov	r1, r5
 8006774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006778:	f7ff fd0c 	bl	8006194 <memset>
 800677c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006784:	4620      	mov	r0, r4
 8006786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006788:	3468      	adds	r4, #104	; 0x68
 800678a:	e7d9      	b.n	8006740 <__sfp+0x1c>
 800678c:	2104      	movs	r1, #4
 800678e:	4638      	mov	r0, r7
 8006790:	f7ff ff62 	bl	8006658 <__sfmoreglue>
 8006794:	4604      	mov	r4, r0
 8006796:	6030      	str	r0, [r6, #0]
 8006798:	2800      	cmp	r0, #0
 800679a:	d1d5      	bne.n	8006748 <__sfp+0x24>
 800679c:	f7ff ff78 	bl	8006690 <__sfp_lock_release>
 80067a0:	230c      	movs	r3, #12
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	e7ee      	b.n	8006784 <__sfp+0x60>
 80067a6:	bf00      	nop
 80067a8:	08007a7c 	.word	0x08007a7c
 80067ac:	ffff0001 	.word	0xffff0001

080067b0 <_fwalk_reent>:
 80067b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b4:	4606      	mov	r6, r0
 80067b6:	4688      	mov	r8, r1
 80067b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067bc:	2700      	movs	r7, #0
 80067be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067c2:	f1b9 0901 	subs.w	r9, r9, #1
 80067c6:	d505      	bpl.n	80067d4 <_fwalk_reent+0x24>
 80067c8:	6824      	ldr	r4, [r4, #0]
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	d1f7      	bne.n	80067be <_fwalk_reent+0xe>
 80067ce:	4638      	mov	r0, r7
 80067d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067d4:	89ab      	ldrh	r3, [r5, #12]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d907      	bls.n	80067ea <_fwalk_reent+0x3a>
 80067da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067de:	3301      	adds	r3, #1
 80067e0:	d003      	beq.n	80067ea <_fwalk_reent+0x3a>
 80067e2:	4629      	mov	r1, r5
 80067e4:	4630      	mov	r0, r6
 80067e6:	47c0      	blx	r8
 80067e8:	4307      	orrs	r7, r0
 80067ea:	3568      	adds	r5, #104	; 0x68
 80067ec:	e7e9      	b.n	80067c2 <_fwalk_reent+0x12>

080067ee <__retarget_lock_init_recursive>:
 80067ee:	4770      	bx	lr

080067f0 <__retarget_lock_acquire_recursive>:
 80067f0:	4770      	bx	lr

080067f2 <__retarget_lock_release_recursive>:
 80067f2:	4770      	bx	lr

080067f4 <__swhatbuf_r>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	460e      	mov	r6, r1
 80067f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fc:	2900      	cmp	r1, #0
 80067fe:	b096      	sub	sp, #88	; 0x58
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	da07      	bge.n	8006816 <__swhatbuf_r+0x22>
 8006806:	2300      	movs	r3, #0
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	89b3      	ldrh	r3, [r6, #12]
 800680c:	061a      	lsls	r2, r3, #24
 800680e:	d410      	bmi.n	8006832 <__swhatbuf_r+0x3e>
 8006810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006814:	e00e      	b.n	8006834 <__swhatbuf_r+0x40>
 8006816:	466a      	mov	r2, sp
 8006818:	f000 fdba 	bl	8007390 <_fstat_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	dbf2      	blt.n	8006806 <__swhatbuf_r+0x12>
 8006820:	9a01      	ldr	r2, [sp, #4]
 8006822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800682a:	425a      	negs	r2, r3
 800682c:	415a      	adcs	r2, r3
 800682e:	602a      	str	r2, [r5, #0]
 8006830:	e7ee      	b.n	8006810 <__swhatbuf_r+0x1c>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	2000      	movs	r0, #0
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	b016      	add	sp, #88	; 0x58
 800683a:	bd70      	pop	{r4, r5, r6, pc}

0800683c <__smakebuf_r>:
 800683c:	898b      	ldrh	r3, [r1, #12]
 800683e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006840:	079d      	lsls	r5, r3, #30
 8006842:	4606      	mov	r6, r0
 8006844:	460c      	mov	r4, r1
 8006846:	d507      	bpl.n	8006858 <__smakebuf_r+0x1c>
 8006848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	2301      	movs	r3, #1
 8006852:	6163      	str	r3, [r4, #20]
 8006854:	b002      	add	sp, #8
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	ab01      	add	r3, sp, #4
 800685a:	466a      	mov	r2, sp
 800685c:	f7ff ffca 	bl	80067f4 <__swhatbuf_r>
 8006860:	9900      	ldr	r1, [sp, #0]
 8006862:	4605      	mov	r5, r0
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f879 	bl	800695c <_malloc_r>
 800686a:	b948      	cbnz	r0, 8006880 <__smakebuf_r+0x44>
 800686c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d4ef      	bmi.n	8006854 <__smakebuf_r+0x18>
 8006874:	f023 0303 	bic.w	r3, r3, #3
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	e7e3      	b.n	8006848 <__smakebuf_r+0xc>
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <__smakebuf_r+0x7c>)
 8006882:	62b3      	str	r3, [r6, #40]	; 0x28
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	6020      	str	r0, [r4, #0]
 8006888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	9b00      	ldr	r3, [sp, #0]
 8006890:	6163      	str	r3, [r4, #20]
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	6120      	str	r0, [r4, #16]
 8006896:	b15b      	cbz	r3, 80068b0 <__smakebuf_r+0x74>
 8006898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800689c:	4630      	mov	r0, r6
 800689e:	f000 fd89 	bl	80073b4 <_isatty_r>
 80068a2:	b128      	cbz	r0, 80068b0 <__smakebuf_r+0x74>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	89a0      	ldrh	r0, [r4, #12]
 80068b2:	4305      	orrs	r5, r0
 80068b4:	81a5      	strh	r5, [r4, #12]
 80068b6:	e7cd      	b.n	8006854 <__smakebuf_r+0x18>
 80068b8:	0800664d 	.word	0x0800664d

080068bc <_free_r>:
 80068bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068be:	2900      	cmp	r1, #0
 80068c0:	d048      	beq.n	8006954 <_free_r+0x98>
 80068c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c6:	9001      	str	r0, [sp, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f1a1 0404 	sub.w	r4, r1, #4
 80068ce:	bfb8      	it	lt
 80068d0:	18e4      	addlt	r4, r4, r3
 80068d2:	f000 fdab 	bl	800742c <__malloc_lock>
 80068d6:	4a20      	ldr	r2, [pc, #128]	; (8006958 <_free_r+0x9c>)
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	4615      	mov	r5, r2
 80068de:	b933      	cbnz	r3, 80068ee <_free_r+0x32>
 80068e0:	6063      	str	r3, [r4, #4]
 80068e2:	6014      	str	r4, [r2, #0]
 80068e4:	b003      	add	sp, #12
 80068e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068ea:	f000 bda5 	b.w	8007438 <__malloc_unlock>
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	d90b      	bls.n	800690a <_free_r+0x4e>
 80068f2:	6821      	ldr	r1, [r4, #0]
 80068f4:	1862      	adds	r2, r4, r1
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bf04      	itt	eq
 80068fa:	681a      	ldreq	r2, [r3, #0]
 80068fc:	685b      	ldreq	r3, [r3, #4]
 80068fe:	6063      	str	r3, [r4, #4]
 8006900:	bf04      	itt	eq
 8006902:	1852      	addeq	r2, r2, r1
 8006904:	6022      	streq	r2, [r4, #0]
 8006906:	602c      	str	r4, [r5, #0]
 8006908:	e7ec      	b.n	80068e4 <_free_r+0x28>
 800690a:	461a      	mov	r2, r3
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b10b      	cbz	r3, 8006914 <_free_r+0x58>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d9fa      	bls.n	800690a <_free_r+0x4e>
 8006914:	6811      	ldr	r1, [r2, #0]
 8006916:	1855      	adds	r5, r2, r1
 8006918:	42a5      	cmp	r5, r4
 800691a:	d10b      	bne.n	8006934 <_free_r+0x78>
 800691c:	6824      	ldr	r4, [r4, #0]
 800691e:	4421      	add	r1, r4
 8006920:	1854      	adds	r4, r2, r1
 8006922:	42a3      	cmp	r3, r4
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	d1dd      	bne.n	80068e4 <_free_r+0x28>
 8006928:	681c      	ldr	r4, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	6053      	str	r3, [r2, #4]
 800692e:	4421      	add	r1, r4
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	e7d7      	b.n	80068e4 <_free_r+0x28>
 8006934:	d902      	bls.n	800693c <_free_r+0x80>
 8006936:	230c      	movs	r3, #12
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	e7d3      	b.n	80068e4 <_free_r+0x28>
 800693c:	6825      	ldr	r5, [r4, #0]
 800693e:	1961      	adds	r1, r4, r5
 8006940:	428b      	cmp	r3, r1
 8006942:	bf04      	itt	eq
 8006944:	6819      	ldreq	r1, [r3, #0]
 8006946:	685b      	ldreq	r3, [r3, #4]
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	bf04      	itt	eq
 800694c:	1949      	addeq	r1, r1, r5
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	6054      	str	r4, [r2, #4]
 8006952:	e7c7      	b.n	80068e4 <_free_r+0x28>
 8006954:	b003      	add	sp, #12
 8006956:	bd30      	pop	{r4, r5, pc}
 8006958:	2000014c 	.word	0x2000014c

0800695c <_malloc_r>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	1ccd      	adds	r5, r1, #3
 8006960:	f025 0503 	bic.w	r5, r5, #3
 8006964:	3508      	adds	r5, #8
 8006966:	2d0c      	cmp	r5, #12
 8006968:	bf38      	it	cc
 800696a:	250c      	movcc	r5, #12
 800696c:	2d00      	cmp	r5, #0
 800696e:	4606      	mov	r6, r0
 8006970:	db01      	blt.n	8006976 <_malloc_r+0x1a>
 8006972:	42a9      	cmp	r1, r5
 8006974:	d903      	bls.n	800697e <_malloc_r+0x22>
 8006976:	230c      	movs	r3, #12
 8006978:	6033      	str	r3, [r6, #0]
 800697a:	2000      	movs	r0, #0
 800697c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697e:	f000 fd55 	bl	800742c <__malloc_lock>
 8006982:	4921      	ldr	r1, [pc, #132]	; (8006a08 <_malloc_r+0xac>)
 8006984:	680a      	ldr	r2, [r1, #0]
 8006986:	4614      	mov	r4, r2
 8006988:	b99c      	cbnz	r4, 80069b2 <_malloc_r+0x56>
 800698a:	4f20      	ldr	r7, [pc, #128]	; (8006a0c <_malloc_r+0xb0>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	b923      	cbnz	r3, 800699a <_malloc_r+0x3e>
 8006990:	4621      	mov	r1, r4
 8006992:	4630      	mov	r0, r6
 8006994:	f000 fc86 	bl	80072a4 <_sbrk_r>
 8006998:	6038      	str	r0, [r7, #0]
 800699a:	4629      	mov	r1, r5
 800699c:	4630      	mov	r0, r6
 800699e:	f000 fc81 	bl	80072a4 <_sbrk_r>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	d123      	bne.n	80069ee <_malloc_r+0x92>
 80069a6:	230c      	movs	r3, #12
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	4630      	mov	r0, r6
 80069ac:	f000 fd44 	bl	8007438 <__malloc_unlock>
 80069b0:	e7e3      	b.n	800697a <_malloc_r+0x1e>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	1b5b      	subs	r3, r3, r5
 80069b6:	d417      	bmi.n	80069e8 <_malloc_r+0x8c>
 80069b8:	2b0b      	cmp	r3, #11
 80069ba:	d903      	bls.n	80069c4 <_malloc_r+0x68>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	441c      	add	r4, r3
 80069c0:	6025      	str	r5, [r4, #0]
 80069c2:	e004      	b.n	80069ce <_malloc_r+0x72>
 80069c4:	6863      	ldr	r3, [r4, #4]
 80069c6:	42a2      	cmp	r2, r4
 80069c8:	bf0c      	ite	eq
 80069ca:	600b      	streq	r3, [r1, #0]
 80069cc:	6053      	strne	r3, [r2, #4]
 80069ce:	4630      	mov	r0, r6
 80069d0:	f000 fd32 	bl	8007438 <__malloc_unlock>
 80069d4:	f104 000b 	add.w	r0, r4, #11
 80069d8:	1d23      	adds	r3, r4, #4
 80069da:	f020 0007 	bic.w	r0, r0, #7
 80069de:	1ac2      	subs	r2, r0, r3
 80069e0:	d0cc      	beq.n	800697c <_malloc_r+0x20>
 80069e2:	1a1b      	subs	r3, r3, r0
 80069e4:	50a3      	str	r3, [r4, r2]
 80069e6:	e7c9      	b.n	800697c <_malloc_r+0x20>
 80069e8:	4622      	mov	r2, r4
 80069ea:	6864      	ldr	r4, [r4, #4]
 80069ec:	e7cc      	b.n	8006988 <_malloc_r+0x2c>
 80069ee:	1cc4      	adds	r4, r0, #3
 80069f0:	f024 0403 	bic.w	r4, r4, #3
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d0e3      	beq.n	80069c0 <_malloc_r+0x64>
 80069f8:	1a21      	subs	r1, r4, r0
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 fc52 	bl	80072a4 <_sbrk_r>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d1dd      	bne.n	80069c0 <_malloc_r+0x64>
 8006a04:	e7cf      	b.n	80069a6 <_malloc_r+0x4a>
 8006a06:	bf00      	nop
 8006a08:	2000014c 	.word	0x2000014c
 8006a0c:	20000150 	.word	0x20000150

08006a10 <__ssputs_r>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	688e      	ldr	r6, [r1, #8]
 8006a16:	429e      	cmp	r6, r3
 8006a18:	4682      	mov	sl, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4690      	mov	r8, r2
 8006a1e:	461f      	mov	r7, r3
 8006a20:	d838      	bhi.n	8006a94 <__ssputs_r+0x84>
 8006a22:	898a      	ldrh	r2, [r1, #12]
 8006a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a28:	d032      	beq.n	8006a90 <__ssputs_r+0x80>
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	6909      	ldr	r1, [r1, #16]
 8006a2e:	eba5 0901 	sub.w	r9, r5, r1
 8006a32:	6965      	ldr	r5, [r4, #20]
 8006a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	444b      	add	r3, r9
 8006a40:	106d      	asrs	r5, r5, #1
 8006a42:	429d      	cmp	r5, r3
 8006a44:	bf38      	it	cc
 8006a46:	461d      	movcc	r5, r3
 8006a48:	0553      	lsls	r3, r2, #21
 8006a4a:	d531      	bpl.n	8006ab0 <__ssputs_r+0xa0>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7ff ff85 	bl	800695c <_malloc_r>
 8006a52:	4606      	mov	r6, r0
 8006a54:	b950      	cbnz	r0, 8006a6c <__ssputs_r+0x5c>
 8006a56:	230c      	movs	r3, #12
 8006a58:	f8ca 3000 	str.w	r3, [sl]
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a62:	81a3      	strh	r3, [r4, #12]
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
 8006a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6c:	6921      	ldr	r1, [r4, #16]
 8006a6e:	464a      	mov	r2, r9
 8006a70:	f7ff fb82 	bl	8006178 <memcpy>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	6126      	str	r6, [r4, #16]
 8006a82:	6165      	str	r5, [r4, #20]
 8006a84:	444e      	add	r6, r9
 8006a86:	eba5 0509 	sub.w	r5, r5, r9
 8006a8a:	6026      	str	r6, [r4, #0]
 8006a8c:	60a5      	str	r5, [r4, #8]
 8006a8e:	463e      	mov	r6, r7
 8006a90:	42be      	cmp	r6, r7
 8006a92:	d900      	bls.n	8006a96 <__ssputs_r+0x86>
 8006a94:	463e      	mov	r6, r7
 8006a96:	4632      	mov	r2, r6
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	f000 fcac 	bl	80073f8 <memmove>
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	1b9b      	subs	r3, r3, r6
 8006aa6:	4432      	add	r2, r6
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	2000      	movs	r0, #0
 8006aae:	e7db      	b.n	8006a68 <__ssputs_r+0x58>
 8006ab0:	462a      	mov	r2, r5
 8006ab2:	f000 fcc7 	bl	8007444 <_realloc_r>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d1e1      	bne.n	8006a80 <__ssputs_r+0x70>
 8006abc:	6921      	ldr	r1, [r4, #16]
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7ff fefc 	bl	80068bc <_free_r>
 8006ac4:	e7c7      	b.n	8006a56 <__ssputs_r+0x46>
	...

08006ac8 <_svfiprintf_r>:
 8006ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	4698      	mov	r8, r3
 8006ace:	898b      	ldrh	r3, [r1, #12]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	b09d      	sub	sp, #116	; 0x74
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	d50e      	bpl.n	8006afa <_svfiprintf_r+0x32>
 8006adc:	690b      	ldr	r3, [r1, #16]
 8006ade:	b963      	cbnz	r3, 8006afa <_svfiprintf_r+0x32>
 8006ae0:	2140      	movs	r1, #64	; 0x40
 8006ae2:	f7ff ff3b 	bl	800695c <_malloc_r>
 8006ae6:	6028      	str	r0, [r5, #0]
 8006ae8:	6128      	str	r0, [r5, #16]
 8006aea:	b920      	cbnz	r0, 8006af6 <_svfiprintf_r+0x2e>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	e0d1      	b.n	8006c9a <_svfiprintf_r+0x1d2>
 8006af6:	2340      	movs	r3, #64	; 0x40
 8006af8:	616b      	str	r3, [r5, #20]
 8006afa:	2300      	movs	r3, #0
 8006afc:	9309      	str	r3, [sp, #36]	; 0x24
 8006afe:	2320      	movs	r3, #32
 8006b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b08:	2330      	movs	r3, #48	; 0x30
 8006b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cb4 <_svfiprintf_r+0x1ec>
 8006b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b12:	f04f 0901 	mov.w	r9, #1
 8006b16:	4623      	mov	r3, r4
 8006b18:	469a      	mov	sl, r3
 8006b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b1e:	b10a      	cbz	r2, 8006b24 <_svfiprintf_r+0x5c>
 8006b20:	2a25      	cmp	r2, #37	; 0x25
 8006b22:	d1f9      	bne.n	8006b18 <_svfiprintf_r+0x50>
 8006b24:	ebba 0b04 	subs.w	fp, sl, r4
 8006b28:	d00b      	beq.n	8006b42 <_svfiprintf_r+0x7a>
 8006b2a:	465b      	mov	r3, fp
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff ff6d 	bl	8006a10 <__ssputs_r>
 8006b36:	3001      	adds	r0, #1
 8006b38:	f000 80aa 	beq.w	8006c90 <_svfiprintf_r+0x1c8>
 8006b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b3e:	445a      	add	r2, fp
 8006b40:	9209      	str	r2, [sp, #36]	; 0x24
 8006b42:	f89a 3000 	ldrb.w	r3, [sl]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80a2 	beq.w	8006c90 <_svfiprintf_r+0x1c8>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b56:	f10a 0a01 	add.w	sl, sl, #1
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b62:	931a      	str	r3, [sp, #104]	; 0x68
 8006b64:	4654      	mov	r4, sl
 8006b66:	2205      	movs	r2, #5
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	4851      	ldr	r0, [pc, #324]	; (8006cb4 <_svfiprintf_r+0x1ec>)
 8006b6e:	f7f9 fb3f 	bl	80001f0 <memchr>
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	b9d8      	cbnz	r0, 8006bae <_svfiprintf_r+0xe6>
 8006b76:	06d0      	lsls	r0, r2, #27
 8006b78:	bf44      	itt	mi
 8006b7a:	2320      	movmi	r3, #32
 8006b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b80:	0711      	lsls	r1, r2, #28
 8006b82:	bf44      	itt	mi
 8006b84:	232b      	movmi	r3, #43	; 0x2b
 8006b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b90:	d015      	beq.n	8006bbe <_svfiprintf_r+0xf6>
 8006b92:	9a07      	ldr	r2, [sp, #28]
 8006b94:	4654      	mov	r4, sl
 8006b96:	2000      	movs	r0, #0
 8006b98:	f04f 0c0a 	mov.w	ip, #10
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba2:	3b30      	subs	r3, #48	; 0x30
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d94e      	bls.n	8006c46 <_svfiprintf_r+0x17e>
 8006ba8:	b1b0      	cbz	r0, 8006bd8 <_svfiprintf_r+0x110>
 8006baa:	9207      	str	r2, [sp, #28]
 8006bac:	e014      	b.n	8006bd8 <_svfiprintf_r+0x110>
 8006bae:	eba0 0308 	sub.w	r3, r0, r8
 8006bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	46a2      	mov	sl, r4
 8006bbc:	e7d2      	b.n	8006b64 <_svfiprintf_r+0x9c>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	1d19      	adds	r1, r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	9103      	str	r1, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfbb      	ittet	lt
 8006bca:	425b      	neglt	r3, r3
 8006bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd0:	9307      	strge	r3, [sp, #28]
 8006bd2:	9307      	strlt	r3, [sp, #28]
 8006bd4:	bfb8      	it	lt
 8006bd6:	9204      	strlt	r2, [sp, #16]
 8006bd8:	7823      	ldrb	r3, [r4, #0]
 8006bda:	2b2e      	cmp	r3, #46	; 0x2e
 8006bdc:	d10c      	bne.n	8006bf8 <_svfiprintf_r+0x130>
 8006bde:	7863      	ldrb	r3, [r4, #1]
 8006be0:	2b2a      	cmp	r3, #42	; 0x2a
 8006be2:	d135      	bne.n	8006c50 <_svfiprintf_r+0x188>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	9203      	str	r2, [sp, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bfb8      	it	lt
 8006bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bf4:	3402      	adds	r4, #2
 8006bf6:	9305      	str	r3, [sp, #20]
 8006bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cc4 <_svfiprintf_r+0x1fc>
 8006bfc:	7821      	ldrb	r1, [r4, #0]
 8006bfe:	2203      	movs	r2, #3
 8006c00:	4650      	mov	r0, sl
 8006c02:	f7f9 faf5 	bl	80001f0 <memchr>
 8006c06:	b140      	cbz	r0, 8006c1a <_svfiprintf_r+0x152>
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	eba0 000a 	sub.w	r0, r0, sl
 8006c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	4303      	orrs	r3, r0
 8006c16:	3401      	adds	r4, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1e:	4826      	ldr	r0, [pc, #152]	; (8006cb8 <_svfiprintf_r+0x1f0>)
 8006c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c24:	2206      	movs	r2, #6
 8006c26:	f7f9 fae3 	bl	80001f0 <memchr>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d038      	beq.n	8006ca0 <_svfiprintf_r+0x1d8>
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <_svfiprintf_r+0x1f4>)
 8006c30:	bb1b      	cbnz	r3, 8006c7a <_svfiprintf_r+0x1b2>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	4433      	add	r3, r6
 8006c42:	9309      	str	r3, [sp, #36]	; 0x24
 8006c44:	e767      	b.n	8006b16 <_svfiprintf_r+0x4e>
 8006c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7a5      	b.n	8006b9c <_svfiprintf_r+0xd4>
 8006c50:	2300      	movs	r3, #0
 8006c52:	3401      	adds	r4, #1
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	4619      	mov	r1, r3
 8006c58:	f04f 0c0a 	mov.w	ip, #10
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c62:	3a30      	subs	r2, #48	; 0x30
 8006c64:	2a09      	cmp	r2, #9
 8006c66:	d903      	bls.n	8006c70 <_svfiprintf_r+0x1a8>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0c5      	beq.n	8006bf8 <_svfiprintf_r+0x130>
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	e7c3      	b.n	8006bf8 <_svfiprintf_r+0x130>
 8006c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c74:	4604      	mov	r4, r0
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7f0      	b.n	8006c5c <_svfiprintf_r+0x194>
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <_svfiprintf_r+0x1f8>)
 8006c82:	a904      	add	r1, sp, #16
 8006c84:	4638      	mov	r0, r7
 8006c86:	f3af 8000 	nop.w
 8006c8a:	1c42      	adds	r2, r0, #1
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	d1d6      	bne.n	8006c3e <_svfiprintf_r+0x176>
 8006c90:	89ab      	ldrh	r3, [r5, #12]
 8006c92:	065b      	lsls	r3, r3, #25
 8006c94:	f53f af2c 	bmi.w	8006af0 <_svfiprintf_r+0x28>
 8006c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9a:	b01d      	add	sp, #116	; 0x74
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <_svfiprintf_r+0x1f8>)
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	4638      	mov	r0, r7
 8006cac:	f000 f9d4 	bl	8007058 <_printf_i>
 8006cb0:	e7eb      	b.n	8006c8a <_svfiprintf_r+0x1c2>
 8006cb2:	bf00      	nop
 8006cb4:	08007ae0 	.word	0x08007ae0
 8006cb8:	08007aea 	.word	0x08007aea
 8006cbc:	00000000 	.word	0x00000000
 8006cc0:	08006a11 	.word	0x08006a11
 8006cc4:	08007ae6 	.word	0x08007ae6

08006cc8 <__sfputc_r>:
 8006cc8:	6893      	ldr	r3, [r2, #8]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	b410      	push	{r4}
 8006cd0:	6093      	str	r3, [r2, #8]
 8006cd2:	da08      	bge.n	8006ce6 <__sfputc_r+0x1e>
 8006cd4:	6994      	ldr	r4, [r2, #24]
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	db01      	blt.n	8006cde <__sfputc_r+0x16>
 8006cda:	290a      	cmp	r1, #10
 8006cdc:	d103      	bne.n	8006ce6 <__sfputc_r+0x1e>
 8006cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ce2:	f7ff bb0d 	b.w	8006300 <__swbuf_r>
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	1c58      	adds	r0, r3, #1
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	7019      	strb	r1, [r3, #0]
 8006cee:	4608      	mov	r0, r1
 8006cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <__sfputs_r>:
 8006cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	18d5      	adds	r5, r2, r3
 8006d00:	42ac      	cmp	r4, r5
 8006d02:	d101      	bne.n	8006d08 <__sfputs_r+0x12>
 8006d04:	2000      	movs	r0, #0
 8006d06:	e007      	b.n	8006d18 <__sfputs_r+0x22>
 8006d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff ffda 	bl	8006cc8 <__sfputc_r>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d1f3      	bne.n	8006d00 <__sfputs_r+0xa>
 8006d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d1c <_vfiprintf_r>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	460d      	mov	r5, r1
 8006d22:	b09d      	sub	sp, #116	; 0x74
 8006d24:	4614      	mov	r4, r2
 8006d26:	4698      	mov	r8, r3
 8006d28:	4606      	mov	r6, r0
 8006d2a:	b118      	cbz	r0, 8006d34 <_vfiprintf_r+0x18>
 8006d2c:	6983      	ldr	r3, [r0, #24]
 8006d2e:	b90b      	cbnz	r3, 8006d34 <_vfiprintf_r+0x18>
 8006d30:	f7ff fcc0 	bl	80066b4 <__sinit>
 8006d34:	4b89      	ldr	r3, [pc, #548]	; (8006f5c <_vfiprintf_r+0x240>)
 8006d36:	429d      	cmp	r5, r3
 8006d38:	d11b      	bne.n	8006d72 <_vfiprintf_r+0x56>
 8006d3a:	6875      	ldr	r5, [r6, #4]
 8006d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3e:	07d9      	lsls	r1, r3, #31
 8006d40:	d405      	bmi.n	8006d4e <_vfiprintf_r+0x32>
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	059a      	lsls	r2, r3, #22
 8006d46:	d402      	bmi.n	8006d4e <_vfiprintf_r+0x32>
 8006d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d4a:	f7ff fd51 	bl	80067f0 <__retarget_lock_acquire_recursive>
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	071b      	lsls	r3, r3, #28
 8006d52:	d501      	bpl.n	8006d58 <_vfiprintf_r+0x3c>
 8006d54:	692b      	ldr	r3, [r5, #16]
 8006d56:	b9eb      	cbnz	r3, 8006d94 <_vfiprintf_r+0x78>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff fb22 	bl	80063a4 <__swsetup_r>
 8006d60:	b1c0      	cbz	r0, 8006d94 <_vfiprintf_r+0x78>
 8006d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d64:	07dc      	lsls	r4, r3, #31
 8006d66:	d50e      	bpl.n	8006d86 <_vfiprintf_r+0x6a>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	b01d      	add	sp, #116	; 0x74
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	4b7b      	ldr	r3, [pc, #492]	; (8006f60 <_vfiprintf_r+0x244>)
 8006d74:	429d      	cmp	r5, r3
 8006d76:	d101      	bne.n	8006d7c <_vfiprintf_r+0x60>
 8006d78:	68b5      	ldr	r5, [r6, #8]
 8006d7a:	e7df      	b.n	8006d3c <_vfiprintf_r+0x20>
 8006d7c:	4b79      	ldr	r3, [pc, #484]	; (8006f64 <_vfiprintf_r+0x248>)
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	bf08      	it	eq
 8006d82:	68f5      	ldreq	r5, [r6, #12]
 8006d84:	e7da      	b.n	8006d3c <_vfiprintf_r+0x20>
 8006d86:	89ab      	ldrh	r3, [r5, #12]
 8006d88:	0598      	lsls	r0, r3, #22
 8006d8a:	d4ed      	bmi.n	8006d68 <_vfiprintf_r+0x4c>
 8006d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d8e:	f7ff fd30 	bl	80067f2 <__retarget_lock_release_recursive>
 8006d92:	e7e9      	b.n	8006d68 <_vfiprintf_r+0x4c>
 8006d94:	2300      	movs	r3, #0
 8006d96:	9309      	str	r3, [sp, #36]	; 0x24
 8006d98:	2320      	movs	r3, #32
 8006d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da2:	2330      	movs	r3, #48	; 0x30
 8006da4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f68 <_vfiprintf_r+0x24c>
 8006da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dac:	f04f 0901 	mov.w	r9, #1
 8006db0:	4623      	mov	r3, r4
 8006db2:	469a      	mov	sl, r3
 8006db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006db8:	b10a      	cbz	r2, 8006dbe <_vfiprintf_r+0xa2>
 8006dba:	2a25      	cmp	r2, #37	; 0x25
 8006dbc:	d1f9      	bne.n	8006db2 <_vfiprintf_r+0x96>
 8006dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8006dc2:	d00b      	beq.n	8006ddc <_vfiprintf_r+0xc0>
 8006dc4:	465b      	mov	r3, fp
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7ff ff93 	bl	8006cf6 <__sfputs_r>
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f000 80aa 	beq.w	8006f2a <_vfiprintf_r+0x20e>
 8006dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd8:	445a      	add	r2, fp
 8006dda:	9209      	str	r2, [sp, #36]	; 0x24
 8006ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80a2 	beq.w	8006f2a <_vfiprintf_r+0x20e>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df0:	f10a 0a01 	add.w	sl, sl, #1
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	9307      	str	r3, [sp, #28]
 8006df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8006dfe:	4654      	mov	r4, sl
 8006e00:	2205      	movs	r2, #5
 8006e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e06:	4858      	ldr	r0, [pc, #352]	; (8006f68 <_vfiprintf_r+0x24c>)
 8006e08:	f7f9 f9f2 	bl	80001f0 <memchr>
 8006e0c:	9a04      	ldr	r2, [sp, #16]
 8006e0e:	b9d8      	cbnz	r0, 8006e48 <_vfiprintf_r+0x12c>
 8006e10:	06d1      	lsls	r1, r2, #27
 8006e12:	bf44      	itt	mi
 8006e14:	2320      	movmi	r3, #32
 8006e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e1a:	0713      	lsls	r3, r2, #28
 8006e1c:	bf44      	itt	mi
 8006e1e:	232b      	movmi	r3, #43	; 0x2b
 8006e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e24:	f89a 3000 	ldrb.w	r3, [sl]
 8006e28:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2a:	d015      	beq.n	8006e58 <_vfiprintf_r+0x13c>
 8006e2c:	9a07      	ldr	r2, [sp, #28]
 8006e2e:	4654      	mov	r4, sl
 8006e30:	2000      	movs	r0, #0
 8006e32:	f04f 0c0a 	mov.w	ip, #10
 8006e36:	4621      	mov	r1, r4
 8006e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e3c:	3b30      	subs	r3, #48	; 0x30
 8006e3e:	2b09      	cmp	r3, #9
 8006e40:	d94e      	bls.n	8006ee0 <_vfiprintf_r+0x1c4>
 8006e42:	b1b0      	cbz	r0, 8006e72 <_vfiprintf_r+0x156>
 8006e44:	9207      	str	r2, [sp, #28]
 8006e46:	e014      	b.n	8006e72 <_vfiprintf_r+0x156>
 8006e48:	eba0 0308 	sub.w	r3, r0, r8
 8006e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e50:	4313      	orrs	r3, r2
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	46a2      	mov	sl, r4
 8006e56:	e7d2      	b.n	8006dfe <_vfiprintf_r+0xe2>
 8006e58:	9b03      	ldr	r3, [sp, #12]
 8006e5a:	1d19      	adds	r1, r3, #4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	9103      	str	r1, [sp, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bfbb      	ittet	lt
 8006e64:	425b      	neglt	r3, r3
 8006e66:	f042 0202 	orrlt.w	r2, r2, #2
 8006e6a:	9307      	strge	r3, [sp, #28]
 8006e6c:	9307      	strlt	r3, [sp, #28]
 8006e6e:	bfb8      	it	lt
 8006e70:	9204      	strlt	r2, [sp, #16]
 8006e72:	7823      	ldrb	r3, [r4, #0]
 8006e74:	2b2e      	cmp	r3, #46	; 0x2e
 8006e76:	d10c      	bne.n	8006e92 <_vfiprintf_r+0x176>
 8006e78:	7863      	ldrb	r3, [r4, #1]
 8006e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e7c:	d135      	bne.n	8006eea <_vfiprintf_r+0x1ce>
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	1d1a      	adds	r2, r3, #4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	9203      	str	r2, [sp, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfb8      	it	lt
 8006e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e8e:	3402      	adds	r4, #2
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f78 <_vfiprintf_r+0x25c>
 8006e96:	7821      	ldrb	r1, [r4, #0]
 8006e98:	2203      	movs	r2, #3
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f7f9 f9a8 	bl	80001f0 <memchr>
 8006ea0:	b140      	cbz	r0, 8006eb4 <_vfiprintf_r+0x198>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	eba0 000a 	sub.w	r0, r0, sl
 8006ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	4303      	orrs	r3, r0
 8006eb0:	3401      	adds	r4, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb8:	482c      	ldr	r0, [pc, #176]	; (8006f6c <_vfiprintf_r+0x250>)
 8006eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ebe:	2206      	movs	r2, #6
 8006ec0:	f7f9 f996 	bl	80001f0 <memchr>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d03f      	beq.n	8006f48 <_vfiprintf_r+0x22c>
 8006ec8:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <_vfiprintf_r+0x254>)
 8006eca:	bb1b      	cbnz	r3, 8006f14 <_vfiprintf_r+0x1f8>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	3307      	adds	r3, #7
 8006ed0:	f023 0307 	bic.w	r3, r3, #7
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	9303      	str	r3, [sp, #12]
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	443b      	add	r3, r7
 8006edc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ede:	e767      	b.n	8006db0 <_vfiprintf_r+0x94>
 8006ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	e7a5      	b.n	8006e36 <_vfiprintf_r+0x11a>
 8006eea:	2300      	movs	r3, #0
 8006eec:	3401      	adds	r4, #1
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f04f 0c0a 	mov.w	ip, #10
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006efc:	3a30      	subs	r2, #48	; 0x30
 8006efe:	2a09      	cmp	r2, #9
 8006f00:	d903      	bls.n	8006f0a <_vfiprintf_r+0x1ee>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0c5      	beq.n	8006e92 <_vfiprintf_r+0x176>
 8006f06:	9105      	str	r1, [sp, #20]
 8006f08:	e7c3      	b.n	8006e92 <_vfiprintf_r+0x176>
 8006f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f0e:	4604      	mov	r4, r0
 8006f10:	2301      	movs	r3, #1
 8006f12:	e7f0      	b.n	8006ef6 <_vfiprintf_r+0x1da>
 8006f14:	ab03      	add	r3, sp, #12
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	462a      	mov	r2, r5
 8006f1a:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <_vfiprintf_r+0x258>)
 8006f1c:	a904      	add	r1, sp, #16
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f3af 8000 	nop.w
 8006f24:	4607      	mov	r7, r0
 8006f26:	1c78      	adds	r0, r7, #1
 8006f28:	d1d6      	bne.n	8006ed8 <_vfiprintf_r+0x1bc>
 8006f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f2c:	07d9      	lsls	r1, r3, #31
 8006f2e:	d405      	bmi.n	8006f3c <_vfiprintf_r+0x220>
 8006f30:	89ab      	ldrh	r3, [r5, #12]
 8006f32:	059a      	lsls	r2, r3, #22
 8006f34:	d402      	bmi.n	8006f3c <_vfiprintf_r+0x220>
 8006f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f38:	f7ff fc5b 	bl	80067f2 <__retarget_lock_release_recursive>
 8006f3c:	89ab      	ldrh	r3, [r5, #12]
 8006f3e:	065b      	lsls	r3, r3, #25
 8006f40:	f53f af12 	bmi.w	8006d68 <_vfiprintf_r+0x4c>
 8006f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f46:	e711      	b.n	8006d6c <_vfiprintf_r+0x50>
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <_vfiprintf_r+0x258>)
 8006f50:	a904      	add	r1, sp, #16
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 f880 	bl	8007058 <_printf_i>
 8006f58:	e7e4      	b.n	8006f24 <_vfiprintf_r+0x208>
 8006f5a:	bf00      	nop
 8006f5c:	08007aa0 	.word	0x08007aa0
 8006f60:	08007ac0 	.word	0x08007ac0
 8006f64:	08007a80 	.word	0x08007a80
 8006f68:	08007ae0 	.word	0x08007ae0
 8006f6c:	08007aea 	.word	0x08007aea
 8006f70:	00000000 	.word	0x00000000
 8006f74:	08006cf7 	.word	0x08006cf7
 8006f78:	08007ae6 	.word	0x08007ae6

08006f7c <_printf_common>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	4616      	mov	r6, r2
 8006f82:	4699      	mov	r9, r3
 8006f84:	688a      	ldr	r2, [r1, #8]
 8006f86:	690b      	ldr	r3, [r1, #16]
 8006f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	bfb8      	it	lt
 8006f90:	4613      	movlt	r3, r2
 8006f92:	6033      	str	r3, [r6, #0]
 8006f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f98:	4607      	mov	r7, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	b10a      	cbz	r2, 8006fa2 <_printf_common+0x26>
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	6033      	str	r3, [r6, #0]
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	0699      	lsls	r1, r3, #26
 8006fa6:	bf42      	ittt	mi
 8006fa8:	6833      	ldrmi	r3, [r6, #0]
 8006faa:	3302      	addmi	r3, #2
 8006fac:	6033      	strmi	r3, [r6, #0]
 8006fae:	6825      	ldr	r5, [r4, #0]
 8006fb0:	f015 0506 	ands.w	r5, r5, #6
 8006fb4:	d106      	bne.n	8006fc4 <_printf_common+0x48>
 8006fb6:	f104 0a19 	add.w	sl, r4, #25
 8006fba:	68e3      	ldr	r3, [r4, #12]
 8006fbc:	6832      	ldr	r2, [r6, #0]
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	42ab      	cmp	r3, r5
 8006fc2:	dc26      	bgt.n	8007012 <_printf_common+0x96>
 8006fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fc8:	1e13      	subs	r3, r2, #0
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	0692      	lsls	r2, r2, #26
 8006fd2:	d42b      	bmi.n	800702c <_printf_common+0xb0>
 8006fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4638      	mov	r0, r7
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d01e      	beq.n	8007020 <_printf_common+0xa4>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	68e5      	ldr	r5, [r4, #12]
 8006fe6:	6832      	ldr	r2, [r6, #0]
 8006fe8:	f003 0306 	and.w	r3, r3, #6
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	bf08      	it	eq
 8006ff0:	1aad      	subeq	r5, r5, r2
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	6922      	ldr	r2, [r4, #16]
 8006ff6:	bf0c      	ite	eq
 8006ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ffc:	2500      	movne	r5, #0
 8006ffe:	4293      	cmp	r3, r2
 8007000:	bfc4      	itt	gt
 8007002:	1a9b      	subgt	r3, r3, r2
 8007004:	18ed      	addgt	r5, r5, r3
 8007006:	2600      	movs	r6, #0
 8007008:	341a      	adds	r4, #26
 800700a:	42b5      	cmp	r5, r6
 800700c:	d11a      	bne.n	8007044 <_printf_common+0xc8>
 800700e:	2000      	movs	r0, #0
 8007010:	e008      	b.n	8007024 <_printf_common+0xa8>
 8007012:	2301      	movs	r3, #1
 8007014:	4652      	mov	r2, sl
 8007016:	4649      	mov	r1, r9
 8007018:	4638      	mov	r0, r7
 800701a:	47c0      	blx	r8
 800701c:	3001      	adds	r0, #1
 800701e:	d103      	bne.n	8007028 <_printf_common+0xac>
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007028:	3501      	adds	r5, #1
 800702a:	e7c6      	b.n	8006fba <_printf_common+0x3e>
 800702c:	18e1      	adds	r1, r4, r3
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	2030      	movs	r0, #48	; 0x30
 8007032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007036:	4422      	add	r2, r4
 8007038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800703c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007040:	3302      	adds	r3, #2
 8007042:	e7c7      	b.n	8006fd4 <_printf_common+0x58>
 8007044:	2301      	movs	r3, #1
 8007046:	4622      	mov	r2, r4
 8007048:	4649      	mov	r1, r9
 800704a:	4638      	mov	r0, r7
 800704c:	47c0      	blx	r8
 800704e:	3001      	adds	r0, #1
 8007050:	d0e6      	beq.n	8007020 <_printf_common+0xa4>
 8007052:	3601      	adds	r6, #1
 8007054:	e7d9      	b.n	800700a <_printf_common+0x8e>
	...

08007058 <_printf_i>:
 8007058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	460c      	mov	r4, r1
 800705e:	4691      	mov	r9, r2
 8007060:	7e27      	ldrb	r7, [r4, #24]
 8007062:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007064:	2f78      	cmp	r7, #120	; 0x78
 8007066:	4680      	mov	r8, r0
 8007068:	469a      	mov	sl, r3
 800706a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800706e:	d807      	bhi.n	8007080 <_printf_i+0x28>
 8007070:	2f62      	cmp	r7, #98	; 0x62
 8007072:	d80a      	bhi.n	800708a <_printf_i+0x32>
 8007074:	2f00      	cmp	r7, #0
 8007076:	f000 80d8 	beq.w	800722a <_printf_i+0x1d2>
 800707a:	2f58      	cmp	r7, #88	; 0x58
 800707c:	f000 80a3 	beq.w	80071c6 <_printf_i+0x16e>
 8007080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007088:	e03a      	b.n	8007100 <_printf_i+0xa8>
 800708a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800708e:	2b15      	cmp	r3, #21
 8007090:	d8f6      	bhi.n	8007080 <_printf_i+0x28>
 8007092:	a001      	add	r0, pc, #4	; (adr r0, 8007098 <_printf_i+0x40>)
 8007094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007098:	080070f1 	.word	0x080070f1
 800709c:	08007105 	.word	0x08007105
 80070a0:	08007081 	.word	0x08007081
 80070a4:	08007081 	.word	0x08007081
 80070a8:	08007081 	.word	0x08007081
 80070ac:	08007081 	.word	0x08007081
 80070b0:	08007105 	.word	0x08007105
 80070b4:	08007081 	.word	0x08007081
 80070b8:	08007081 	.word	0x08007081
 80070bc:	08007081 	.word	0x08007081
 80070c0:	08007081 	.word	0x08007081
 80070c4:	08007211 	.word	0x08007211
 80070c8:	08007135 	.word	0x08007135
 80070cc:	080071f3 	.word	0x080071f3
 80070d0:	08007081 	.word	0x08007081
 80070d4:	08007081 	.word	0x08007081
 80070d8:	08007233 	.word	0x08007233
 80070dc:	08007081 	.word	0x08007081
 80070e0:	08007135 	.word	0x08007135
 80070e4:	08007081 	.word	0x08007081
 80070e8:	08007081 	.word	0x08007081
 80070ec:	080071fb 	.word	0x080071fb
 80070f0:	680b      	ldr	r3, [r1, #0]
 80070f2:	1d1a      	adds	r2, r3, #4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	600a      	str	r2, [r1, #0]
 80070f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007100:	2301      	movs	r3, #1
 8007102:	e0a3      	b.n	800724c <_printf_i+0x1f4>
 8007104:	6825      	ldr	r5, [r4, #0]
 8007106:	6808      	ldr	r0, [r1, #0]
 8007108:	062e      	lsls	r6, r5, #24
 800710a:	f100 0304 	add.w	r3, r0, #4
 800710e:	d50a      	bpl.n	8007126 <_printf_i+0xce>
 8007110:	6805      	ldr	r5, [r0, #0]
 8007112:	600b      	str	r3, [r1, #0]
 8007114:	2d00      	cmp	r5, #0
 8007116:	da03      	bge.n	8007120 <_printf_i+0xc8>
 8007118:	232d      	movs	r3, #45	; 0x2d
 800711a:	426d      	negs	r5, r5
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007120:	485e      	ldr	r0, [pc, #376]	; (800729c <_printf_i+0x244>)
 8007122:	230a      	movs	r3, #10
 8007124:	e019      	b.n	800715a <_printf_i+0x102>
 8007126:	f015 0f40 	tst.w	r5, #64	; 0x40
 800712a:	6805      	ldr	r5, [r0, #0]
 800712c:	600b      	str	r3, [r1, #0]
 800712e:	bf18      	it	ne
 8007130:	b22d      	sxthne	r5, r5
 8007132:	e7ef      	b.n	8007114 <_printf_i+0xbc>
 8007134:	680b      	ldr	r3, [r1, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	1d18      	adds	r0, r3, #4
 800713a:	6008      	str	r0, [r1, #0]
 800713c:	0628      	lsls	r0, r5, #24
 800713e:	d501      	bpl.n	8007144 <_printf_i+0xec>
 8007140:	681d      	ldr	r5, [r3, #0]
 8007142:	e002      	b.n	800714a <_printf_i+0xf2>
 8007144:	0669      	lsls	r1, r5, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0xe8>
 8007148:	881d      	ldrh	r5, [r3, #0]
 800714a:	4854      	ldr	r0, [pc, #336]	; (800729c <_printf_i+0x244>)
 800714c:	2f6f      	cmp	r7, #111	; 0x6f
 800714e:	bf0c      	ite	eq
 8007150:	2308      	moveq	r3, #8
 8007152:	230a      	movne	r3, #10
 8007154:	2100      	movs	r1, #0
 8007156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800715a:	6866      	ldr	r6, [r4, #4]
 800715c:	60a6      	str	r6, [r4, #8]
 800715e:	2e00      	cmp	r6, #0
 8007160:	bfa2      	ittt	ge
 8007162:	6821      	ldrge	r1, [r4, #0]
 8007164:	f021 0104 	bicge.w	r1, r1, #4
 8007168:	6021      	strge	r1, [r4, #0]
 800716a:	b90d      	cbnz	r5, 8007170 <_printf_i+0x118>
 800716c:	2e00      	cmp	r6, #0
 800716e:	d04d      	beq.n	800720c <_printf_i+0x1b4>
 8007170:	4616      	mov	r6, r2
 8007172:	fbb5 f1f3 	udiv	r1, r5, r3
 8007176:	fb03 5711 	mls	r7, r3, r1, r5
 800717a:	5dc7      	ldrb	r7, [r0, r7]
 800717c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007180:	462f      	mov	r7, r5
 8007182:	42bb      	cmp	r3, r7
 8007184:	460d      	mov	r5, r1
 8007186:	d9f4      	bls.n	8007172 <_printf_i+0x11a>
 8007188:	2b08      	cmp	r3, #8
 800718a:	d10b      	bne.n	80071a4 <_printf_i+0x14c>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	07df      	lsls	r7, r3, #31
 8007190:	d508      	bpl.n	80071a4 <_printf_i+0x14c>
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	6861      	ldr	r1, [r4, #4]
 8007196:	4299      	cmp	r1, r3
 8007198:	bfde      	ittt	le
 800719a:	2330      	movle	r3, #48	; 0x30
 800719c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071a4:	1b92      	subs	r2, r2, r6
 80071a6:	6122      	str	r2, [r4, #16]
 80071a8:	f8cd a000 	str.w	sl, [sp]
 80071ac:	464b      	mov	r3, r9
 80071ae:	aa03      	add	r2, sp, #12
 80071b0:	4621      	mov	r1, r4
 80071b2:	4640      	mov	r0, r8
 80071b4:	f7ff fee2 	bl	8006f7c <_printf_common>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d14c      	bne.n	8007256 <_printf_i+0x1fe>
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	b004      	add	sp, #16
 80071c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c6:	4835      	ldr	r0, [pc, #212]	; (800729c <_printf_i+0x244>)
 80071c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	680e      	ldr	r6, [r1, #0]
 80071d0:	061f      	lsls	r7, r3, #24
 80071d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80071d6:	600e      	str	r6, [r1, #0]
 80071d8:	d514      	bpl.n	8007204 <_printf_i+0x1ac>
 80071da:	07d9      	lsls	r1, r3, #31
 80071dc:	bf44      	itt	mi
 80071de:	f043 0320 	orrmi.w	r3, r3, #32
 80071e2:	6023      	strmi	r3, [r4, #0]
 80071e4:	b91d      	cbnz	r5, 80071ee <_printf_i+0x196>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f023 0320 	bic.w	r3, r3, #32
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	2310      	movs	r3, #16
 80071f0:	e7b0      	b.n	8007154 <_printf_i+0xfc>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	f043 0320 	orr.w	r3, r3, #32
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	2378      	movs	r3, #120	; 0x78
 80071fc:	4828      	ldr	r0, [pc, #160]	; (80072a0 <_printf_i+0x248>)
 80071fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007202:	e7e3      	b.n	80071cc <_printf_i+0x174>
 8007204:	065e      	lsls	r6, r3, #25
 8007206:	bf48      	it	mi
 8007208:	b2ad      	uxthmi	r5, r5
 800720a:	e7e6      	b.n	80071da <_printf_i+0x182>
 800720c:	4616      	mov	r6, r2
 800720e:	e7bb      	b.n	8007188 <_printf_i+0x130>
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	6826      	ldr	r6, [r4, #0]
 8007214:	6960      	ldr	r0, [r4, #20]
 8007216:	1d1d      	adds	r5, r3, #4
 8007218:	600d      	str	r5, [r1, #0]
 800721a:	0635      	lsls	r5, r6, #24
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	d501      	bpl.n	8007224 <_printf_i+0x1cc>
 8007220:	6018      	str	r0, [r3, #0]
 8007222:	e002      	b.n	800722a <_printf_i+0x1d2>
 8007224:	0671      	lsls	r1, r6, #25
 8007226:	d5fb      	bpl.n	8007220 <_printf_i+0x1c8>
 8007228:	8018      	strh	r0, [r3, #0]
 800722a:	2300      	movs	r3, #0
 800722c:	6123      	str	r3, [r4, #16]
 800722e:	4616      	mov	r6, r2
 8007230:	e7ba      	b.n	80071a8 <_printf_i+0x150>
 8007232:	680b      	ldr	r3, [r1, #0]
 8007234:	1d1a      	adds	r2, r3, #4
 8007236:	600a      	str	r2, [r1, #0]
 8007238:	681e      	ldr	r6, [r3, #0]
 800723a:	6862      	ldr	r2, [r4, #4]
 800723c:	2100      	movs	r1, #0
 800723e:	4630      	mov	r0, r6
 8007240:	f7f8 ffd6 	bl	80001f0 <memchr>
 8007244:	b108      	cbz	r0, 800724a <_printf_i+0x1f2>
 8007246:	1b80      	subs	r0, r0, r6
 8007248:	6060      	str	r0, [r4, #4]
 800724a:	6863      	ldr	r3, [r4, #4]
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	2300      	movs	r3, #0
 8007250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007254:	e7a8      	b.n	80071a8 <_printf_i+0x150>
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	4632      	mov	r2, r6
 800725a:	4649      	mov	r1, r9
 800725c:	4640      	mov	r0, r8
 800725e:	47d0      	blx	sl
 8007260:	3001      	adds	r0, #1
 8007262:	d0ab      	beq.n	80071bc <_printf_i+0x164>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	079b      	lsls	r3, r3, #30
 8007268:	d413      	bmi.n	8007292 <_printf_i+0x23a>
 800726a:	68e0      	ldr	r0, [r4, #12]
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	4298      	cmp	r0, r3
 8007270:	bfb8      	it	lt
 8007272:	4618      	movlt	r0, r3
 8007274:	e7a4      	b.n	80071c0 <_printf_i+0x168>
 8007276:	2301      	movs	r3, #1
 8007278:	4632      	mov	r2, r6
 800727a:	4649      	mov	r1, r9
 800727c:	4640      	mov	r0, r8
 800727e:	47d0      	blx	sl
 8007280:	3001      	adds	r0, #1
 8007282:	d09b      	beq.n	80071bc <_printf_i+0x164>
 8007284:	3501      	adds	r5, #1
 8007286:	68e3      	ldr	r3, [r4, #12]
 8007288:	9903      	ldr	r1, [sp, #12]
 800728a:	1a5b      	subs	r3, r3, r1
 800728c:	42ab      	cmp	r3, r5
 800728e:	dcf2      	bgt.n	8007276 <_printf_i+0x21e>
 8007290:	e7eb      	b.n	800726a <_printf_i+0x212>
 8007292:	2500      	movs	r5, #0
 8007294:	f104 0619 	add.w	r6, r4, #25
 8007298:	e7f5      	b.n	8007286 <_printf_i+0x22e>
 800729a:	bf00      	nop
 800729c:	08007af1 	.word	0x08007af1
 80072a0:	08007b02 	.word	0x08007b02

080072a4 <_sbrk_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d06      	ldr	r5, [pc, #24]	; (80072c0 <_sbrk_r+0x1c>)
 80072a8:	2300      	movs	r3, #0
 80072aa:	4604      	mov	r4, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	f7fb f8ee 	bl	8002490 <_sbrk>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_sbrk_r+0x1a>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_sbrk_r+0x1a>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	2000034c 	.word	0x2000034c

080072c4 <__sread>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	460c      	mov	r4, r1
 80072c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072cc:	f000 f8e0 	bl	8007490 <_read_r>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	bfab      	itete	ge
 80072d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072d6:	89a3      	ldrhlt	r3, [r4, #12]
 80072d8:	181b      	addge	r3, r3, r0
 80072da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072de:	bfac      	ite	ge
 80072e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80072e2:	81a3      	strhlt	r3, [r4, #12]
 80072e4:	bd10      	pop	{r4, pc}

080072e6 <__swrite>:
 80072e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ea:	461f      	mov	r7, r3
 80072ec:	898b      	ldrh	r3, [r1, #12]
 80072ee:	05db      	lsls	r3, r3, #23
 80072f0:	4605      	mov	r5, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	4616      	mov	r6, r2
 80072f6:	d505      	bpl.n	8007304 <__swrite+0x1e>
 80072f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fc:	2302      	movs	r3, #2
 80072fe:	2200      	movs	r2, #0
 8007300:	f000 f868 	bl	80073d4 <_lseek_r>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	4632      	mov	r2, r6
 8007312:	463b      	mov	r3, r7
 8007314:	4628      	mov	r0, r5
 8007316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731a:	f000 b817 	b.w	800734c <_write_r>

0800731e <__sseek>:
 800731e:	b510      	push	{r4, lr}
 8007320:	460c      	mov	r4, r1
 8007322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007326:	f000 f855 	bl	80073d4 <_lseek_r>
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	bf15      	itete	ne
 8007330:	6560      	strne	r0, [r4, #84]	; 0x54
 8007332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800733a:	81a3      	strheq	r3, [r4, #12]
 800733c:	bf18      	it	ne
 800733e:	81a3      	strhne	r3, [r4, #12]
 8007340:	bd10      	pop	{r4, pc}

08007342 <__sclose>:
 8007342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007346:	f000 b813 	b.w	8007370 <_close_r>
	...

0800734c <_write_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	; (800736c <_write_r+0x20>)
 8007350:	4604      	mov	r4, r0
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	2200      	movs	r2, #0
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7fa f9dc 	bl	8001718 <_write>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_write_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_write_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	2000034c 	.word	0x2000034c

08007370 <_close_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d06      	ldr	r5, [pc, #24]	; (800738c <_close_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7fb f853 	bl	8002426 <_close>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_close_r+0x1a>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_close_r+0x1a>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	2000034c 	.word	0x2000034c

08007390 <_fstat_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d07      	ldr	r5, [pc, #28]	; (80073b0 <_fstat_r+0x20>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	f7fb f84e 	bl	800243e <_fstat>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d102      	bne.n	80073ac <_fstat_r+0x1c>
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	b103      	cbz	r3, 80073ac <_fstat_r+0x1c>
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	bf00      	nop
 80073b0:	2000034c 	.word	0x2000034c

080073b4 <_isatty_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d06      	ldr	r5, [pc, #24]	; (80073d0 <_isatty_r+0x1c>)
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	602b      	str	r3, [r5, #0]
 80073c0:	f7fb f84d 	bl	800245e <_isatty>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d102      	bne.n	80073ce <_isatty_r+0x1a>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	b103      	cbz	r3, 80073ce <_isatty_r+0x1a>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	2000034c 	.word	0x2000034c

080073d4 <_lseek_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d07      	ldr	r5, [pc, #28]	; (80073f4 <_lseek_r+0x20>)
 80073d8:	4604      	mov	r4, r0
 80073da:	4608      	mov	r0, r1
 80073dc:	4611      	mov	r1, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	602a      	str	r2, [r5, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	f7fb f846 	bl	8002474 <_lseek>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_lseek_r+0x1e>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_lseek_r+0x1e>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	2000034c 	.word	0x2000034c

080073f8 <memmove>:
 80073f8:	4288      	cmp	r0, r1
 80073fa:	b510      	push	{r4, lr}
 80073fc:	eb01 0402 	add.w	r4, r1, r2
 8007400:	d902      	bls.n	8007408 <memmove+0x10>
 8007402:	4284      	cmp	r4, r0
 8007404:	4623      	mov	r3, r4
 8007406:	d807      	bhi.n	8007418 <memmove+0x20>
 8007408:	1e43      	subs	r3, r0, #1
 800740a:	42a1      	cmp	r1, r4
 800740c:	d008      	beq.n	8007420 <memmove+0x28>
 800740e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007416:	e7f8      	b.n	800740a <memmove+0x12>
 8007418:	4402      	add	r2, r0
 800741a:	4601      	mov	r1, r0
 800741c:	428a      	cmp	r2, r1
 800741e:	d100      	bne.n	8007422 <memmove+0x2a>
 8007420:	bd10      	pop	{r4, pc}
 8007422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800742a:	e7f7      	b.n	800741c <memmove+0x24>

0800742c <__malloc_lock>:
 800742c:	4801      	ldr	r0, [pc, #4]	; (8007434 <__malloc_lock+0x8>)
 800742e:	f7ff b9df 	b.w	80067f0 <__retarget_lock_acquire_recursive>
 8007432:	bf00      	nop
 8007434:	20000344 	.word	0x20000344

08007438 <__malloc_unlock>:
 8007438:	4801      	ldr	r0, [pc, #4]	; (8007440 <__malloc_unlock+0x8>)
 800743a:	f7ff b9da 	b.w	80067f2 <__retarget_lock_release_recursive>
 800743e:	bf00      	nop
 8007440:	20000344 	.word	0x20000344

08007444 <_realloc_r>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	4607      	mov	r7, r0
 8007448:	4614      	mov	r4, r2
 800744a:	460e      	mov	r6, r1
 800744c:	b921      	cbnz	r1, 8007458 <_realloc_r+0x14>
 800744e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007452:	4611      	mov	r1, r2
 8007454:	f7ff ba82 	b.w	800695c <_malloc_r>
 8007458:	b922      	cbnz	r2, 8007464 <_realloc_r+0x20>
 800745a:	f7ff fa2f 	bl	80068bc <_free_r>
 800745e:	4625      	mov	r5, r4
 8007460:	4628      	mov	r0, r5
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007464:	f000 f826 	bl	80074b4 <_malloc_usable_size_r>
 8007468:	42a0      	cmp	r0, r4
 800746a:	d20f      	bcs.n	800748c <_realloc_r+0x48>
 800746c:	4621      	mov	r1, r4
 800746e:	4638      	mov	r0, r7
 8007470:	f7ff fa74 	bl	800695c <_malloc_r>
 8007474:	4605      	mov	r5, r0
 8007476:	2800      	cmp	r0, #0
 8007478:	d0f2      	beq.n	8007460 <_realloc_r+0x1c>
 800747a:	4631      	mov	r1, r6
 800747c:	4622      	mov	r2, r4
 800747e:	f7fe fe7b 	bl	8006178 <memcpy>
 8007482:	4631      	mov	r1, r6
 8007484:	4638      	mov	r0, r7
 8007486:	f7ff fa19 	bl	80068bc <_free_r>
 800748a:	e7e9      	b.n	8007460 <_realloc_r+0x1c>
 800748c:	4635      	mov	r5, r6
 800748e:	e7e7      	b.n	8007460 <_realloc_r+0x1c>

08007490 <_read_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	; (80074b0 <_read_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fa ffa4 	bl	80023ec <_read>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_read_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_read_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	2000034c 	.word	0x2000034c

080074b4 <_malloc_usable_size_r>:
 80074b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b8:	1f18      	subs	r0, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bfbc      	itt	lt
 80074be:	580b      	ldrlt	r3, [r1, r0]
 80074c0:	18c0      	addlt	r0, r0, r3
 80074c2:	4770      	bx	lr

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
