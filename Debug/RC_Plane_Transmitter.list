
RC_Plane_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007054  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007818  08007818  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007820  08007820  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007828  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000078  080078a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080078a0  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001673c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c50  00000000  00000000  000367e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00039438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001959f  00000000  00000000  0003b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141f8  00000000  00000000  00054d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e14b  00000000  00000000  00068f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001070e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  00107138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071dc 	.word	0x080071dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080071dc 	.word	0x080071dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	volatile uint32_t uSecVar = uSec;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <NRF24_DelayMicroSeconds+0x3c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <NRF24_DelayMicroSeconds+0x40>)
 800059a:	fba2 2303 	umull	r2, r3, r2, r3
 800059e:	0c9b      	lsrs	r3, r3, #18
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005a8:	bf00      	nop
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	60fa      	str	r2, [r7, #12]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1fa      	bne.n	80005aa <NRF24_DelayMicroSeconds+0x22>
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000008 	.word	0x20000008
 80005c8:	165e9f81 	.word	0x165e9f81

080005cc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <NRF24_csn+0x20>
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <NRF24_csn+0x38>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <NRF24_csn+0x3c>)
 80005e0:	8811      	ldrh	r1, [r2, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 f9f1 	bl	80039cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ea:	e007      	b.n	80005fc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <NRF24_csn+0x38>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <NRF24_csn+0x3c>)
 80005f2:	8811      	ldrh	r1, [r2, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f9e8 	bl	80039cc <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000009c 	.word	0x2000009c
 8000608:	200000a0 	.word	0x200000a0

0800060c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <NRF24_ce+0x20>
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <NRF24_ce+0x38>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <NRF24_ce+0x3c>)
 8000620:	8811      	ldrh	r1, [r2, #0]
 8000622:	2201      	movs	r2, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f003 f9d1 	bl	80039cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800062a:	e007      	b.n	800063c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <NRF24_ce+0x38>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <NRF24_ce+0x3c>)
 8000632:	8811      	ldrh	r1, [r2, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 f9c8 	bl	80039cc <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000009c 	.word	0x2000009c
 8000648:	200000a2 	.word	0x200000a2

0800064c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffb8 	bl	80005cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 031f 	and.w	r3, r3, #31
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <NRF24_read_register+0x4c>)
 8000670:	f003 ff0f 	bl	8004492 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	1c59      	adds	r1, r3, #1
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	2201      	movs	r2, #1
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <NRF24_read_register+0x4c>)
 8000680:	f004 f843 	bl	800470a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000684:	7b7b      	ldrb	r3, [r7, #13]
 8000686:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff9f 	bl	80005cc <NRF24_csn>
	return retData;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000a4 	.word	0x200000a4

0800069c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ff8d 	bl	80005cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 031f 	and.w	r3, r3, #31
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	2201      	movs	r2, #1
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <NRF24_read_registerN+0x4c>)
 80006c6:	f003 fee4 	bl	8004492 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <NRF24_read_registerN+0x4c>)
 80006d4:	f004 f819 	bl	800470a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff77 	bl	80005cc <NRF24_csn>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a4 	.word	0x200000a4

080006ec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff65 	bl	80005cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	b2db      	uxtb	r3, r3
 800070a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	2202      	movs	r2, #2
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <NRF24_write_register+0x40>)
 800071a:	f003 feba 	bl	8004492 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ff54 	bl	80005cc <NRF24_csn>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000a4 	.word	0x200000a4

08000730 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff43 	bl	80005cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	b2db      	uxtb	r3, r3
 800074e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000750:	f107 010c 	add.w	r1, r7, #12
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <NRF24_write_registerN+0x4c>)
 800075a:	f003 fe9a 	bl	8004492 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	b29a      	uxth	r2, r3
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	6839      	ldr	r1, [r7, #0]
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <NRF24_write_registerN+0x4c>)
 8000768:	f003 fe93 	bl	8004492 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff2d 	bl	80005cc <NRF24_csn>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000a4 	.word	0x200000a4

08000780 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff ff1d 	bl	80005cc <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000796:	f107 010f 	add.w	r1, r7, #15
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <NRF24_write_payload+0x40>)
 80007a0:	f003 fe77 	bl	8004492 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <NRF24_write_payload+0x40>)
 80007ae:	f003 fe70 	bl	8004492 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ff0a 	bl	80005cc <NRF24_csn>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000a4 	.word	0x200000a4

080007c4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007c8:	21ff      	movs	r1, #255	; 0xff
 80007ca:	20e1      	movs	r0, #225	; 0xe1
 80007cc:	f7ff ff8e 	bl	80006ec <NRF24_write_register>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80007d8:	21ff      	movs	r1, #255	; 0xff
 80007da:	20e2      	movs	r0, #226	; 0xe2
 80007dc:	f7ff ff86 	bl	80006ec <NRF24_write_register>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80007ea:	2007      	movs	r0, #7
 80007ec:	f7ff ff2e 	bl	800064c <NRF24_read_register>
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000800:	b082      	sub	sp, #8
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
 8000810:	4613      	mov	r3, r2
 8000812:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000814:	4b66      	ldr	r3, [pc, #408]	; (80009b0 <NRF24_begin+0x1b0>)
 8000816:	4618      	mov	r0, r3
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2258      	movs	r2, #88	; 0x58
 800081e:	4619      	mov	r1, r3
 8000820:	f005 fb36 	bl	8005e90 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000824:	4a63      	ldr	r2, [pc, #396]	; (80009b4 <NRF24_begin+0x1b4>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800082a:	4a63      	ldr	r2, [pc, #396]	; (80009b8 <NRF24_begin+0x1b8>)
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000830:	4a62      	ldr	r2, [pc, #392]	; (80009bc <NRF24_begin+0x1bc>)
 8000832:	883b      	ldrh	r3, [r7, #0]
 8000834:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fec8 	bl	80005cc <NRF24_csn>
	NRF24_ce(0);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fee5 	bl	800060c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000842:	2005      	movs	r0, #5
 8000844:	f001 fd7c 	bl	8002340 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000848:	2108      	movs	r1, #8
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff4e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000850:	213f      	movs	r1, #63	; 0x3f
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff ff4a 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000858:	2103      	movs	r1, #3
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ff46 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000860:	2103      	movs	r1, #3
 8000862:	2003      	movs	r0, #3
 8000864:	f7ff ff42 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000868:	2103      	movs	r1, #3
 800086a:	2004      	movs	r0, #4
 800086c:	f7ff ff3e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000870:	2102      	movs	r1, #2
 8000872:	2005      	movs	r0, #5
 8000874:	f7ff ff3a 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000878:	210f      	movs	r1, #15
 800087a:	2006      	movs	r0, #6
 800087c:	f7ff ff36 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000880:	210e      	movs	r1, #14
 8000882:	2007      	movs	r0, #7
 8000884:	f7ff ff32 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000888:	2100      	movs	r1, #0
 800088a:	2008      	movs	r0, #8
 800088c:	f7ff ff2e 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000890:	2100      	movs	r1, #0
 8000892:	2009      	movs	r0, #9
 8000894:	f7ff ff2a 	bl	80006ec <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000898:	23e7      	movs	r3, #231	; 0xe7
 800089a:	733b      	strb	r3, [r7, #12]
 800089c:	23e7      	movs	r3, #231	; 0xe7
 800089e:	72fb      	strb	r3, [r7, #11]
 80008a0:	23e7      	movs	r3, #231	; 0xe7
 80008a2:	72bb      	strb	r3, [r7, #10]
 80008a4:	23e7      	movs	r3, #231	; 0xe7
 80008a6:	727b      	strb	r3, [r7, #9]
 80008a8:	23e7      	movs	r3, #231	; 0xe7
 80008aa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2205      	movs	r2, #5
 80008b2:	4619      	mov	r1, r3
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff ff3b 	bl	8000730 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80008ba:	23c2      	movs	r3, #194	; 0xc2
 80008bc:	733b      	strb	r3, [r7, #12]
 80008be:	23c2      	movs	r3, #194	; 0xc2
 80008c0:	72fb      	strb	r3, [r7, #11]
 80008c2:	23c2      	movs	r3, #194	; 0xc2
 80008c4:	72bb      	strb	r3, [r7, #10]
 80008c6:	23c2      	movs	r3, #194	; 0xc2
 80008c8:	727b      	strb	r3, [r7, #9]
 80008ca:	23c2      	movs	r3, #194	; 0xc2
 80008cc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2205      	movs	r2, #5
 80008d4:	4619      	mov	r1, r3
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff ff2a 	bl	8000730 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008dc:	21c3      	movs	r1, #195	; 0xc3
 80008de:	200c      	movs	r0, #12
 80008e0:	f7ff ff04 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008e4:	21c4      	movs	r1, #196	; 0xc4
 80008e6:	200d      	movs	r0, #13
 80008e8:	f7ff ff00 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008ec:	21c5      	movs	r1, #197	; 0xc5
 80008ee:	200e      	movs	r0, #14
 80008f0:	f7ff fefc 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008f4:	21c6      	movs	r1, #198	; 0xc6
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fef8 	bl	80006ec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80008fc:	23e7      	movs	r3, #231	; 0xe7
 80008fe:	733b      	strb	r3, [r7, #12]
 8000900:	23e7      	movs	r3, #231	; 0xe7
 8000902:	72fb      	strb	r3, [r7, #11]
 8000904:	23e7      	movs	r3, #231	; 0xe7
 8000906:	72bb      	strb	r3, [r7, #10]
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	727b      	strb	r3, [r7, #9]
 800090c:	23e7      	movs	r3, #231	; 0xe7
 800090e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2205      	movs	r2, #5
 8000916:	4619      	mov	r1, r3
 8000918:	2010      	movs	r0, #16
 800091a:	f7ff ff09 	bl	8000730 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800091e:	2100      	movs	r1, #0
 8000920:	2011      	movs	r0, #17
 8000922:	f7ff fee3 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000926:	2100      	movs	r1, #0
 8000928:	2012      	movs	r0, #18
 800092a:	f7ff fedf 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2013      	movs	r0, #19
 8000932:	f7ff fedb 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	2014      	movs	r0, #20
 800093a:	f7ff fed7 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	2015      	movs	r0, #21
 8000942:	f7ff fed3 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2016      	movs	r0, #22
 800094a:	f7ff fecf 	bl	80006ec <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800094e:	f000 fa89 	bl	8000e64 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff fec9 	bl	80006ec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	201d      	movs	r0, #29
 800095e:	f7ff fec5 	bl	80006ec <NRF24_write_register>
	printRadioSettings();
 8000962:	f000 fa99 	bl	8000e98 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000966:	210f      	movs	r1, #15
 8000968:	200f      	movs	r0, #15
 800096a:	f000 f8ad 	bl	8000ac8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f927 	bl	8000bc2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f95d 	bl	8000c34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800097a:	2002      	movs	r0, #2
 800097c:	f000 f9a0 	bl	8000cc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000980:	f000 f8f2 	bl	8000b68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000984:	2020      	movs	r0, #32
 8000986:	f000 f8cf 	bl	8000b28 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800098a:	f000 fa62 	bl	8000e52 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800098e:	204c      	movs	r0, #76	; 0x4c
 8000990:	f000 f8b5 	bl	8000afe <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000994:	f7ff ff16 	bl	80007c4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000998:	f7ff ff1c 	bl	80007d4 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800099c:	f000 f9b8 	bl	8000d10 <NRF24_powerDown>
	
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009aa:	b002      	add	sp, #8
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000a4 	.word	0x200000a4
 80009b4:	2000009c 	.word	0x2000009c
 80009b8:	200000a0 	.word	0x200000a0
 80009bc:	200000a2 	.word	0x200000a2

080009c0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fe21 	bl	800060c <NRF24_ce>
	NRF24_flush_tx();
 80009ca:	f7ff fefb 	bl	80007c4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009ce:	f7ff ff01 	bl	80007d4 <NRF24_flush_rx>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009e4:	f000 fa35 	bl	8000e52 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	4619      	mov	r1, r3
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f9ce 	bl	8000d8e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009f2:	f001 fc99 	bl	8002328 <HAL_GetTick>
 80009f6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009f8:	230a      	movs	r3, #10
 80009fa:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009fc:	f107 030d 	add.w	r3, r7, #13
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	2008      	movs	r0, #8
 8000a06:	f7ff fe49 	bl	800069c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a0a:	f7ff feeb 	bl	80007e4 <NRF24_get_status>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d107      	bne.n	8000a2c <NRF24_write+0x54>
 8000a1c:	f001 fc84 	bl	8002328 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8e7      	bhi.n	80009fc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a2c:	f107 010b 	add.w	r1, r7, #11
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <NRF24_write+0x90>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f9d8 	bl	8000dec <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a3c:	7b3b      	ldrb	r3, [r7, #12]
 8000a3e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <NRF24_write+0x90>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d005      	beq.n	8000a54 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a48:	f000 f886 	bl	8000b58 <NRF24_getDynamicPayloadSize>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <NRF24_write+0x94>)
 8000a52:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a54:	f000 f80c 	bl	8000a70 <NRF24_available>
	NRF24_flush_tx();
 8000a58:	f7ff feb4 	bl	80007c4 <NRF24_flush_tx>
	return retStatus;
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000094 	.word	0x20000094
 8000a6c:	20000095 	.word	0x20000095

08000a70 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f95a 	bl	8000d2e <NRF24_availablePipe>
 8000a7a:	4603      	mov	r3, r0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	4619      	mov	r1, r3
 8000a90:	200a      	movs	r0, #10
 8000a92:	f7ff fe4d 	bl	8000730 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2205      	movs	r2, #5
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f7ff fe47 	bl	8000730 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <NRF24_openWritingPipe+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	7bfa      	ldrb	r2, [r7, #15]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	bf28      	it	cs
 8000ab0:	4613      	movcs	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff fe18 	bl	80006ec <NRF24_write_register>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000096 	.word	0x20000096

08000ac8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	2004      	movs	r0, #4
 8000af2:	f7ff fdfb 	bl	80006ec <NRF24_write_register>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b08:	237f      	movs	r3, #127	; 0x7f
 8000b0a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4293      	cmp	r3, r2
 8000b12:	bf28      	it	cs
 8000b14:	4613      	movcs	r3, r2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f7ff fde6 	bl	80006ec <NRF24_write_register>
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b32:	2320      	movs	r3, #32
 8000b34:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	bf28      	it	cs
 8000b3e:	4613      	movcs	r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <NRF24_setPayloadSize+0x2c>)
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000096 	.word	0x20000096

08000b58 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b5c:	2060      	movs	r0, #96	; 0x60
 8000b5e:	f7ff fd75 	bl	800064c <NRF24_read_register>
 8000b62:	4603      	mov	r3, r0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b6c:	201d      	movs	r0, #29
 8000b6e:	f7ff fd6d 	bl	800064c <NRF24_read_register>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f023 0304 	bic.w	r3, r3, #4
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	201d      	movs	r0, #29
 8000b7e:	f7ff fdb5 	bl	80006ec <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	201c      	movs	r0, #28
 8000b86:	f7ff fdb1 	bl	80006ec <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b8a:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <NRF24_disableDynamicPayloads+0x2c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000097 	.word	0x20000097

08000b98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ba8:	213f      	movs	r1, #63	; 0x3f
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fd9e 	bl	80006ec <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bb0:	e003      	b.n	8000bba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fd99 	bl	80006ec <NRF24_write_register>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f7ff fd3d 	bl	800064c <NRF24_read_register>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f023 0306 	bic.w	r3, r3, #6
 8000bdc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d104      	bne.n	8000bee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 0306 	orr.w	r3, r3, #6
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e019      	b.n	8000c22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d104      	bne.n	8000bfe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e011      	b.n	8000c22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d104      	bne.n	8000c0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e009      	b.n	8000c22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d103      	bne.n	8000c22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	f043 0306 	orr.w	r3, r3, #6
 8000c20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4619      	mov	r1, r3
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff fd60 	bl	80006ec <NRF24_write_register>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c42:	2006      	movs	r0, #6
 8000c44:	f7ff fd02 	bl	800064c <NRF24_read_register>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d107      	bne.n	8000c70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	f043 0320 	orr.w	r3, r3, #32
 8000c6c:	73bb      	strb	r3, [r7, #14]
 8000c6e:	e00d      	b.n	8000c8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d107      	bne.n	8000c86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	73bb      	strb	r3, [r7, #14]
 8000c84:	e002      	b.n	8000c8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff fd2b 	bl	80006ec <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000c96:	2006      	movs	r0, #6
 8000c98:	f7ff fcd8 	bl	800064c <NRF24_read_register>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d102      	bne.n	8000cac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e002      	b.n	8000cb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <NRF24_setDataRate+0x88>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000098 	.word	0x20000098

08000cc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fcbe 	bl	800064c <NRF24_read_register>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f023 030c 	bic.w	r3, r3, #12
 8000cd6:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00f      	beq.n	8000cfe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d104      	bne.n	8000cee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e007      	b.n	8000cfe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fcf2 	bl	80006ec <NRF24_write_register>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fc99 	bl	800064c <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f023 0302 	bic.w	r3, r3, #2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fce1 	bl	80006ec <NRF24_write_register>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d36:	f7ff fd55 	bl	80007e4 <NRF24_get_status>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d017      	beq.n	8000d84 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	085b      	lsrs	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f7ff fcbd 	bl	80006ec <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff fcb4 	bl	80006ec <NRF24_write_register>
    }
  }
  return result;
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fc36 	bl	800060c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fc53 	bl	800064c <NRF24_read_register>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fc98 	bl	80006ec <NRF24_write_register>
  NRF24_ce(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fc25 	bl	800060c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000dc2:	2096      	movs	r0, #150	; 0x96
 8000dc4:	f7ff fbe0 	bl	8000588 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fcd7 	bl	8000780 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fc1a 	bl	800060c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000dd8:	200f      	movs	r0, #15
 8000dda:	f7ff fbd5 	bl	8000588 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fc14 	bl	800060c <NRF24_ce>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000df8:	f7ff fcf4 	bl	80007e4 <NRF24_get_status>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e06:	2170      	movs	r1, #112	; 0x70
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f7ff fc6f 	bl	80006ec <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf14      	ite	ne
 8000e40:	2301      	movne	r3, #1
 8000e42:	2300      	moveq	r3, #0
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e56:	2170      	movs	r1, #112	; 0x70
 8000e58:	2007      	movs	r0, #7
 8000e5a:	f7ff fc47 	bl	80006ec <NRF24_write_register>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fbae 	bl	80005cc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e70:	2350      	movs	r3, #80	; 0x50
 8000e72:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000e74:	2373      	movs	r3, #115	; 0x73
 8000e76:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <NRF24_ACTIVATE_cmd+0x30>)
 8000e80:	f003 fb07 	bl	8004492 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fba1 	bl	80005cc <NRF24_csn>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000a4 	.word	0x200000a4

08000e98 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b0a1      	sub	sp, #132	; 0x84
 8000e9c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	49c3      	ldr	r1, [pc, #780]	; (80011b0 <printRadioSettings+0x318>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 f897 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f996 	bl	80001e0 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f107 0108 	add.w	r1, r7, #8
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	48bd      	ldr	r0, [pc, #756]	; (80011b4 <printRadioSettings+0x31c>)
 8000ec0:	f004 fcf3 	bl	80058aa <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fbc1 	bl	800064c <NRF24_read_register>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000ed0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <printRadioSettings+0x5e>
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	49b2      	ldr	r1, [pc, #712]	; (80011b8 <printRadioSettings+0x320>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f005 f872 	bl	8005fd8 <siprintf>
 8000ef4:	e00c      	b.n	8000f10 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	49b0      	ldr	r1, [pc, #704]	; (80011bc <printRadioSettings+0x324>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f86b 	bl	8005fd8 <siprintf>
 8000f02:	e005      	b.n	8000f10 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	49ad      	ldr	r1, [pc, #692]	; (80011c0 <printRadioSettings+0x328>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 f864 	bl	8005fd8 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f963 	bl	80001e0 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 0108 	add.w	r1, r7, #8
 8000f22:	230a      	movs	r3, #10
 8000f24:	48a3      	ldr	r0, [pc, #652]	; (80011b4 <printRadioSettings+0x31c>)
 8000f26:	f004 fcc0 	bl	80058aa <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fb8e 	bl	800064c <NRF24_read_register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f3a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bfcc      	ite	gt
 8000f42:	2301      	movgt	r3, #1
 8000f44:	2300      	movle	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f4e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bfcc      	ite	gt
 8000f56:	2301      	movgt	r3, #1
 8000f58:	2300      	movle	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f62:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bfcc      	ite	gt
 8000f6a:	2301      	movgt	r3, #1
 8000f6c:	2300      	movle	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f76:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bfcc      	ite	gt
 8000f7e:	2301      	movgt	r3, #1
 8000f80:	2300      	movle	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f8a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfcc      	ite	gt
 8000f92:	2301      	movgt	r3, #1
 8000f94:	2300      	movle	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bfcc      	ite	gt
 8000fa6:	2301      	movgt	r3, #1
 8000fa8:	2300      	movle	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f107 0008 	add.w	r0, r7, #8
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	9402      	str	r4, [sp, #8]
 8000fb4:	9101      	str	r1, [sp, #4]
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	4633      	mov	r3, r6
 8000fba:	462a      	mov	r2, r5
 8000fbc:	4981      	ldr	r1, [pc, #516]	; (80011c4 <printRadioSettings+0x32c>)
 8000fbe:	f005 f80b 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f90a 	bl	80001e0 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	4877      	ldr	r0, [pc, #476]	; (80011b4 <printRadioSettings+0x31c>)
 8000fd8:	f004 fc67 	bl	80058aa <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fb35 	bl	800064c <NRF24_read_register>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fec:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bfcc      	ite	gt
 8000ff4:	2301      	movgt	r3, #1
 8000ff6:	2300      	movle	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ffc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001000:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001004:	2b00      	cmp	r3, #0
 8001006:	bfcc      	ite	gt
 8001008:	2301      	movgt	r3, #1
 800100a:	2300      	movle	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001014:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001018:	2b00      	cmp	r3, #0
 800101a:	bfcc      	ite	gt
 800101c:	2301      	movgt	r3, #1
 800101e:	2300      	movle	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001024:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001028:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800102c:	2b00      	cmp	r3, #0
 800102e:	bfcc      	ite	gt
 8001030:	2301      	movgt	r3, #1
 8001032:	2300      	movle	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001038:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800103c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001040:	2b00      	cmp	r3, #0
 8001042:	bfcc      	ite	gt
 8001044:	2301      	movgt	r3, #1
 8001046:	2300      	movle	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800104c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001050:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001054:	2b00      	cmp	r3, #0
 8001056:	bfcc      	ite	gt
 8001058:	2301      	movgt	r3, #1
 800105a:	2300      	movle	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f107 0008 	add.w	r0, r7, #8
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	9402      	str	r4, [sp, #8]
 8001066:	9101      	str	r1, [sp, #4]
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	4633      	mov	r3, r6
 800106c:	462a      	mov	r2, r5
 800106e:	4956      	ldr	r1, [pc, #344]	; (80011c8 <printRadioSettings+0x330>)
 8001070:	f004 ffb2 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 0108 	add.w	r1, r7, #8
 8001086:	230a      	movs	r3, #10
 8001088:	484a      	ldr	r0, [pc, #296]	; (80011b4 <printRadioSettings+0x31c>)
 800108a:	f004 fc0e 	bl	80058aa <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800108e:	2003      	movs	r0, #3
 8001090:	f7ff fadc 	bl	800064c <NRF24_read_register>
 8001094:	4603      	mov	r3, r0
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800109e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a2:	3302      	adds	r3, #2
 80010a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80010a8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4946      	ldr	r1, [pc, #280]	; (80011cc <printRadioSettings+0x334>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 ff90 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f88f 	bl	80001e0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f107 0108 	add.w	r1, r7, #8
 80010ca:	230a      	movs	r3, #10
 80010cc:	4839      	ldr	r0, [pc, #228]	; (80011b4 <printRadioSettings+0x31c>)
 80010ce:	f004 fbec 	bl	80058aa <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80010d2:	2005      	movs	r0, #5
 80010d4:	f7ff faba 	bl	800064c <NRF24_read_register>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80010de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4939      	ldr	r1, [pc, #228]	; (80011d0 <printRadioSettings+0x338>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 ff73 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	230a      	movs	r3, #10
 8001106:	482b      	ldr	r0, [pc, #172]	; (80011b4 <printRadioSettings+0x31c>)
 8001108:	f004 fbcf 	bl	80058aa <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800110c:	2006      	movs	r0, #6
 800110e:	f7ff fa9d 	bl	800064c <NRF24_read_register>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x29a>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	492a      	ldr	r1, [pc, #168]	; (80011d4 <printRadioSettings+0x33c>)
 800112a:	4618      	mov	r0, r3
 800112c:	f004 ff54 	bl	8005fd8 <siprintf>
 8001130:	e005      	b.n	800113e <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4928      	ldr	r1, [pc, #160]	; (80011d8 <printRadioSettings+0x340>)
 8001138:	4618      	mov	r0, r3
 800113a:	f004 ff4d 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f84c 	bl	80001e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f107 0108 	add.w	r1, r7, #8
 8001150:	230a      	movs	r3, #10
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <printRadioSettings+0x31c>)
 8001154:	f004 fba9 	bl	80058aa <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115c:	f003 0306 	and.w	r3, r3, #6
 8001160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001164:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800116e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <printRadioSettings+0x2ec>
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4918      	ldr	r1, [pc, #96]	; (80011dc <printRadioSettings+0x344>)
 800117c:	4618      	mov	r0, r3
 800117e:	f004 ff2b 	bl	8005fd8 <siprintf>
 8001182:	e03b      	b.n	80011fc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <printRadioSettings+0x302>
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4913      	ldr	r1, [pc, #76]	; (80011e0 <printRadioSettings+0x348>)
 8001192:	4618      	mov	r0, r3
 8001194:	f004 ff20 	bl	8005fd8 <siprintf>
 8001198:	e030      	b.n	80011fc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d122      	bne.n	80011e8 <printRadioSettings+0x350>
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	490f      	ldr	r1, [pc, #60]	; (80011e4 <printRadioSettings+0x34c>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 ff15 	bl	8005fd8 <siprintf>
 80011ae:	e025      	b.n	80011fc <printRadioSettings+0x364>
 80011b0:	080071f4 	.word	0x080071f4
 80011b4:	200000fc 	.word	0x200000fc
 80011b8:	08007228 	.word	0x08007228
 80011bc:	08007244 	.word	0x08007244
 80011c0:	08007260 	.word	0x08007260
 80011c4:	08007274 	.word	0x08007274
 80011c8:	080072b8 	.word	0x080072b8
 80011cc:	08007304 	.word	0x08007304
 80011d0:	08007320 	.word	0x08007320
 80011d4:	08007334 	.word	0x08007334
 80011d8:	0800734c 	.word	0x0800734c
 80011dc:	08007364 	.word	0x08007364
 80011e0:	08007378 	.word	0x08007378
 80011e4:	0800738c 	.word	0x0800738c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d105      	bne.n	80011fc <printRadioSettings+0x364>
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	49d7      	ldr	r1, [pc, #860]	; (8001554 <printRadioSettings+0x6bc>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 feee 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffed 	bl	80001e0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	48d1      	ldr	r0, [pc, #836]	; (8001558 <printRadioSettings+0x6c0>)
 8001212:	f004 fb4a 	bl	80058aa <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001216:	463b      	mov	r3, r7
 8001218:	2205      	movs	r2, #5
 800121a:	4619      	mov	r1, r3
 800121c:	200a      	movs	r0, #10
 800121e:	f7ff fa3d 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	461c      	mov	r4, r3
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	461d      	mov	r5, r3
 800122a:	78bb      	ldrb	r3, [r7, #2]
 800122c:	787a      	ldrb	r2, [r7, #1]
 800122e:	7839      	ldrb	r1, [r7, #0]
 8001230:	f107 0008 	add.w	r0, r7, #8
 8001234:	9102      	str	r1, [sp, #8]
 8001236:	9201      	str	r2, [sp, #4]
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	462b      	mov	r3, r5
 800123c:	4622      	mov	r2, r4
 800123e:	49c7      	ldr	r1, [pc, #796]	; (800155c <printRadioSettings+0x6c4>)
 8001240:	f004 feca 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc9 	bl	80001e0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 0108 	add.w	r1, r7, #8
 8001256:	230a      	movs	r3, #10
 8001258:	48bf      	ldr	r0, [pc, #764]	; (8001558 <printRadioSettings+0x6c0>)
 800125a:	f004 fb26 	bl	80058aa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800125e:	463b      	mov	r3, r7
 8001260:	2205      	movs	r2, #5
 8001262:	4619      	mov	r1, r3
 8001264:	200b      	movs	r0, #11
 8001266:	f7ff fa19 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	461c      	mov	r4, r3
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	461d      	mov	r5, r3
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	787a      	ldrb	r2, [r7, #1]
 8001276:	7839      	ldrb	r1, [r7, #0]
 8001278:	f107 0008 	add.w	r0, r7, #8
 800127c:	9102      	str	r1, [sp, #8]
 800127e:	9201      	str	r2, [sp, #4]
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	462b      	mov	r3, r5
 8001284:	4622      	mov	r2, r4
 8001286:	49b6      	ldr	r1, [pc, #728]	; (8001560 <printRadioSettings+0x6c8>)
 8001288:	f004 fea6 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffa5 	bl	80001e0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 0108 	add.w	r1, r7, #8
 800129e:	230a      	movs	r3, #10
 80012a0:	48ad      	ldr	r0, [pc, #692]	; (8001558 <printRadioSettings+0x6c0>)
 80012a2:	f004 fb02 	bl	80058aa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80012a6:	463b      	mov	r3, r7
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	200c      	movs	r0, #12
 80012ae:	f7ff f9f5 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012b2:	783b      	ldrb	r3, [r7, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	49aa      	ldr	r1, [pc, #680]	; (8001564 <printRadioSettings+0x6cc>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fe8b 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff8a 	bl	80001e0 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f107 0108 	add.w	r1, r7, #8
 80012d4:	230a      	movs	r3, #10
 80012d6:	48a0      	ldr	r0, [pc, #640]	; (8001558 <printRadioSettings+0x6c0>)
 80012d8:	f004 fae7 	bl	80058aa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80012dc:	463b      	mov	r3, r7
 80012de:	2201      	movs	r2, #1
 80012e0:	4619      	mov	r1, r3
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff f9da 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012e8:	783b      	ldrb	r3, [r7, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	499d      	ldr	r1, [pc, #628]	; (8001568 <printRadioSettings+0x6d0>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fe70 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	230a      	movs	r3, #10
 800130c:	4892      	ldr	r0, [pc, #584]	; (8001558 <printRadioSettings+0x6c0>)
 800130e:	f004 facc 	bl	80058aa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001312:	463b      	mov	r3, r7
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	200e      	movs	r0, #14
 800131a:	f7ff f9bf 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800131e:	783b      	ldrb	r3, [r7, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4991      	ldr	r1, [pc, #580]	; (800156c <printRadioSettings+0x6d4>)
 8001328:	4618      	mov	r0, r3
 800132a:	f004 fe55 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff54 	bl	80001e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	4885      	ldr	r0, [pc, #532]	; (8001558 <printRadioSettings+0x6c0>)
 8001344:	f004 fab1 	bl	80058aa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001348:	463b      	mov	r3, r7
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	200f      	movs	r0, #15
 8001350:	f7ff f9a4 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001354:	783b      	ldrb	r3, [r7, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4984      	ldr	r1, [pc, #528]	; (8001570 <printRadioSettings+0x6d8>)
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fe3a 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff39 	bl	80001e0 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	f107 0108 	add.w	r1, r7, #8
 8001376:	230a      	movs	r3, #10
 8001378:	4877      	ldr	r0, [pc, #476]	; (8001558 <printRadioSettings+0x6c0>)
 800137a:	f004 fa96 	bl	80058aa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800137e:	463b      	mov	r3, r7
 8001380:	2205      	movs	r2, #5
 8001382:	4619      	mov	r1, r3
 8001384:	2010      	movs	r0, #16
 8001386:	f7ff f989 	bl	800069c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800138a:	793b      	ldrb	r3, [r7, #4]
 800138c:	461c      	mov	r4, r3
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	461d      	mov	r5, r3
 8001392:	78bb      	ldrb	r3, [r7, #2]
 8001394:	787a      	ldrb	r2, [r7, #1]
 8001396:	7839      	ldrb	r1, [r7, #0]
 8001398:	f107 0008 	add.w	r0, r7, #8
 800139c:	9102      	str	r1, [sp, #8]
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	462b      	mov	r3, r5
 80013a4:	4622      	mov	r2, r4
 80013a6:	4973      	ldr	r1, [pc, #460]	; (8001574 <printRadioSettings+0x6dc>)
 80013a8:	f004 fe16 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff15 	bl	80001e0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f107 0108 	add.w	r1, r7, #8
 80013be:	230a      	movs	r3, #10
 80013c0:	4865      	ldr	r0, [pc, #404]	; (8001558 <printRadioSettings+0x6c0>)
 80013c2:	f004 fa72 	bl	80058aa <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80013c6:	2011      	movs	r0, #17
 80013c8:	f7ff f940 	bl	800064c <NRF24_read_register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4966      	ldr	r1, [pc, #408]	; (8001578 <printRadioSettings+0x6e0>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fdf9 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fef8 	bl	80001e0 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	230a      	movs	r3, #10
 80013fa:	4857      	ldr	r0, [pc, #348]	; (8001558 <printRadioSettings+0x6c0>)
 80013fc:	f004 fa55 	bl	80058aa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001400:	2012      	movs	r0, #18
 8001402:	f7ff f923 	bl	800064c <NRF24_read_register>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800140c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4958      	ldr	r1, [pc, #352]	; (800157c <printRadioSettings+0x6e4>)
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fddc 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fedb 	bl	80001e0 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f107 0108 	add.w	r1, r7, #8
 8001432:	230a      	movs	r3, #10
 8001434:	4848      	ldr	r0, [pc, #288]	; (8001558 <printRadioSettings+0x6c0>)
 8001436:	f004 fa38 	bl	80058aa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800143a:	2013      	movs	r0, #19
 800143c:	f7ff f906 	bl	800064c <NRF24_read_register>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800144a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	494b      	ldr	r1, [pc, #300]	; (8001580 <printRadioSettings+0x6e8>)
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fdbf 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe febe 	bl	80001e0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 0108 	add.w	r1, r7, #8
 800146c:	230a      	movs	r3, #10
 800146e:	483a      	ldr	r0, [pc, #232]	; (8001558 <printRadioSettings+0x6c0>)
 8001470:	f004 fa1b 	bl	80058aa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001474:	2014      	movs	r0, #20
 8001476:	f7ff f8e9 	bl	800064c <NRF24_read_register>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	493d      	ldr	r1, [pc, #244]	; (8001584 <printRadioSettings+0x6ec>)
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fda2 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe fea1 	bl	80001e0 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0108 	add.w	r1, r7, #8
 80014a6:	230a      	movs	r3, #10
 80014a8:	482b      	ldr	r0, [pc, #172]	; (8001558 <printRadioSettings+0x6c0>)
 80014aa:	f004 f9fe 	bl	80058aa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80014ae:	2015      	movs	r0, #21
 80014b0:	f7ff f8cc 	bl	800064c <NRF24_read_register>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4930      	ldr	r1, [pc, #192]	; (8001588 <printRadioSettings+0x6f0>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fd85 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe84 	bl	80001e0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f107 0108 	add.w	r1, r7, #8
 80014e0:	230a      	movs	r3, #10
 80014e2:	481d      	ldr	r0, [pc, #116]	; (8001558 <printRadioSettings+0x6c0>)
 80014e4:	f004 f9e1 	bl	80058aa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80014e8:	2016      	movs	r0, #22
 80014ea:	f7ff f8af 	bl	800064c <NRF24_read_register>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4922      	ldr	r1, [pc, #136]	; (800158c <printRadioSettings+0x6f4>)
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fd68 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe67 	bl	80001e0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	230a      	movs	r3, #10
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <printRadioSettings+0x6c0>)
 800151e:	f004 f9c4 	bl	80058aa <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001522:	201c      	movs	r0, #28
 8001524:	f7ff f892 	bl	800064c <NRF24_read_register>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001532:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfcc      	ite	gt
 800153a:	2301      	movgt	r3, #1
 800153c:	2300      	movle	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001546:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800154a:	2b00      	cmp	r3, #0
 800154c:	bfcc      	ite	gt
 800154e:	2301      	movgt	r3, #1
 8001550:	2300      	movle	r3, #0
 8001552:	e01d      	b.n	8001590 <printRadioSettings+0x6f8>
 8001554:	080073a0 	.word	0x080073a0
 8001558:	200000fc 	.word	0x200000fc
 800155c:	080073b4 	.word	0x080073b4
 8001560:	080073e4 	.word	0x080073e4
 8001564:	08007414 	.word	0x08007414
 8001568:	0800743c 	.word	0x0800743c
 800156c:	08007464 	.word	0x08007464
 8001570:	0800748c 	.word	0x0800748c
 8001574:	080074b4 	.word	0x080074b4
 8001578:	080074e0 	.word	0x080074e0
 800157c:	080074fc 	.word	0x080074fc
 8001580:	08007518 	.word	0x08007518
 8001584:	08007534 	.word	0x08007534
 8001588:	08007550 	.word	0x08007550
 800158c:	0800756c 	.word	0x0800756c
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001594:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001598:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800159c:	2b00      	cmp	r3, #0
 800159e:	bfcc      	ite	gt
 80015a0:	2301      	movgt	r3, #1
 80015a2:	2300      	movle	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bfcc      	ite	gt
 80015b4:	2301      	movgt	r3, #1
 80015b6:	2300      	movle	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015c0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bfcc      	ite	gt
 80015c8:	2301      	movgt	r3, #1
 80015ca:	2300      	movle	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bfcc      	ite	gt
 80015dc:	2301      	movgt	r3, #1
 80015de:	2300      	movle	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f107 0008 	add.w	r0, r7, #8
 80015e6:	9303      	str	r3, [sp, #12]
 80015e8:	9402      	str	r4, [sp, #8]
 80015ea:	9101      	str	r1, [sp, #4]
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	4633      	mov	r3, r6
 80015f0:	462a      	mov	r2, r5
 80015f2:	4936      	ldr	r1, [pc, #216]	; (80016cc <printRadioSettings+0x834>)
 80015f4:	f004 fcf0 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdef 	bl	80001e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	230a      	movs	r3, #10
 800160c:	4830      	ldr	r0, [pc, #192]	; (80016d0 <printRadioSettings+0x838>)
 800160e:	f004 f94c 	bl	80058aa <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001612:	201d      	movs	r0, #29
 8001614:	f7ff f81a 	bl	800064c <NRF24_read_register>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800161e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <printRadioSettings+0x7a0>
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4929      	ldr	r1, [pc, #164]	; (80016d4 <printRadioSettings+0x83c>)
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fcd1 	bl	8005fd8 <siprintf>
 8001636:	e005      	b.n	8001644 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001638:	f107 0308 	add.w	r3, r7, #8
 800163c:	4926      	ldr	r1, [pc, #152]	; (80016d8 <printRadioSettings+0x840>)
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fcca 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fdc9 	bl	80001e0 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	f107 0108 	add.w	r1, r7, #8
 8001656:	230a      	movs	r3, #10
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <printRadioSettings+0x838>)
 800165a:	f004 f926 	bl	80058aa <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800165e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <printRadioSettings+0x7e0>
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	491b      	ldr	r1, [pc, #108]	; (80016dc <printRadioSettings+0x844>)
 8001670:	4618      	mov	r0, r3
 8001672:	f004 fcb1 	bl	8005fd8 <siprintf>
 8001676:	e005      	b.n	8001684 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4918      	ldr	r1, [pc, #96]	; (80016e0 <printRadioSettings+0x848>)
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fcaa 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fda9 	bl	80001e0 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f107 0108 	add.w	r1, r7, #8
 8001696:	230a      	movs	r3, #10
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <printRadioSettings+0x838>)
 800169a:	f004 f906 	bl	80058aa <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	4910      	ldr	r1, [pc, #64]	; (80016e4 <printRadioSettings+0x84c>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fc97 	bl	8005fd8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fd96 	bl	80001e0 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f107 0108 	add.w	r1, r7, #8
 80016bc:	230a      	movs	r3, #10
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <printRadioSettings+0x838>)
 80016c0:	f004 f8f3 	bl	80058aa <HAL_UART_Transmit>
}
 80016c4:	bf00      	nop
 80016c6:	3774      	adds	r7, #116	; 0x74
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016cc:	08007588 	.word	0x08007588
 80016d0:	200000fc 	.word	0x200000fc
 80016d4:	080075d4 	.word	0x080075d4
 80016d8:	080075ec 	.word	0x080075ec
 80016dc:	08007604 	.word	0x08007604
 80016e0:	08007620 	.word	0x08007620
 80016e4:	080071f4 	.word	0x080071f4

080016e8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80016e8:	b084      	sub	sp, #16
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	f107 0c08 	add.w	ip, r7, #8
 80016f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <nrf24_DebugUART_Init+0x2c>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2244      	movs	r2, #68	; 0x44
 8001700:	4619      	mov	r1, r3
 8001702:	f004 fbc5 	bl	8005e90 <memcpy>
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800170e:	b004      	add	sp, #16
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200000fc 	.word	0x200000fc

08001718 <_write>:
uint64_t TxpipeAddrs = 0x11223344AA;
uint32_t adcVal[4];
uint8_t payload[4];


int _write(int file, char *outgoing, int len) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart2, outgoing, len, 100);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b29a      	uxth	r2, r3
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <_write+0x24>)
 800172e:	f004 f8bc 	bl	80058aa <HAL_UART_Transmit>
   return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002a8 	.word	0x200002a8

08001740 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	69b9      	ldr	r1, [r7, #24]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	1a8a      	subs	r2, r1, r2
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1acb      	subs	r3, r1, r3
 8001764:	fb92 f2f3 	sdiv	r2, r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4413      	add	r3, r2
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b099      	sub	sp, #100	; 0x64
 800177c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177e:	f000 fd9d 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001782:	f000 f88d 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //*********MAKE SURE DMA IS INITIALIZED BEFORE ADC****
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001786:	f000 fa3b 	bl	8001c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800178a:	f000 f9ef 	bl	8001b6c <MX_USART2_UART_Init>
  MX_DMA_Init();
 800178e:	f000 fa17 	bl	8001bc0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001792:	f000 f8ed 	bl	8001970 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001796:	f000 f967 	bl	8001a68 <MX_SPI1_Init>
  MX_TIM2_Init();
 800179a:	f000 f99b 	bl	8001ad4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start our ADC/DMA Timer
  HAL_TIM_Base_Start(&htim2);
 800179e:	4836      	ldr	r0, [pc, #216]	; (8001878 <main+0x100>)
 80017a0:	f003 fbe6 	bl	8004f70 <HAL_TIM_Base_Start>

  //Start DMA in circular mode
  HAL_ADC_Start_DMA(&hadc1, adcVal, 4);
 80017a4:	2204      	movs	r2, #4
 80017a6:	4935      	ldr	r1, [pc, #212]	; (800187c <main+0x104>)
 80017a8:	4835      	ldr	r0, [pc, #212]	; (8001880 <main+0x108>)
 80017aa:	f000 ff71 	bl	8002690 <HAL_ADC_Start_DMA>

  //Initialize NRF24
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi1);
 80017ae:	4c35      	ldr	r4, [pc, #212]	; (8001884 <main+0x10c>)
 80017b0:	4668      	mov	r0, sp
 80017b2:	1d23      	adds	r3, r4, #4
 80017b4:	2254      	movs	r2, #84	; 0x54
 80017b6:	4619      	mov	r1, r3
 80017b8:	f004 fb6a 	bl	8005e90 <memcpy>
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c6:	4830      	ldr	r0, [pc, #192]	; (8001888 <main+0x110>)
 80017c8:	f7ff f81a 	bl	8000800 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 80017cc:	4e2f      	ldr	r6, [pc, #188]	; (800188c <main+0x114>)
 80017ce:	466d      	mov	r5, sp
 80017d0:	f106 0410 	add.w	r4, r6, #16
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	602b      	str	r3, [r5, #0]
 80017e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017e8:	f7ff ff7e 	bl	80016e8 <nrf24_DebugUART_Init>

  //Print NRF24 Settings
  printRadioSettings();
 80017ec:	f7ff fb54 	bl	8000e98 <printRadioSettings>

  //Setup NRF24 for transmitting data
  NRF24_stopListening();
 80017f0:	f7ff f8e6 	bl	80009c0 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <main+0x118>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff f93f 	bl	8000a80 <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff f9c8 	bl	8000b98 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001808:	2034      	movs	r0, #52	; 0x34
 800180a:	f7ff f978 	bl	8000afe <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 800180e:	2020      	movs	r0, #32
 8001810:	f7ff f98a 	bl	8000b28 <NRF24_setPayloadSize>

    /* USER CODE BEGIN 3 */


	uint8_t i;
	for(i = 0; i < 4; i++){
 8001814:	2300      	movs	r3, #0
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	e01c      	b.n	8001854 <main+0xdc>
		uint8_t mappedVal = map(adcVal[i],350, 3600, 0, 180);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <main+0x104>)
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	4618      	mov	r0, r3
 8001824:	23b4      	movs	r3, #180	; 0xb4
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800182e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001832:	f7ff ff85 	bl	8001740 <map>
 8001836:	4603      	mov	r3, r0
 8001838:	71bb      	strb	r3, [r7, #6]
		printf("%d: %d\r\n", i, mappedVal);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	79ba      	ldrb	r2, [r7, #6]
 800183e:	4619      	mov	r1, r3
 8001840:	4814      	ldr	r0, [pc, #80]	; (8001894 <main+0x11c>)
 8001842:	f004 fb3b 	bl	8005ebc <iprintf>
		payload[i] = mappedVal;
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4913      	ldr	r1, [pc, #76]	; (8001898 <main+0x120>)
 800184a:	79ba      	ldrb	r2, [r7, #6]
 800184c:	54ca      	strb	r2, [r1, r3]
	for(i = 0; i < 4; i++){
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	3301      	adds	r3, #1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d9df      	bls.n	800181a <main+0xa2>

	}
	if(NRF24_write(payload, 32)){
 800185a:	2120      	movs	r1, #32
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <main+0x120>)
 800185e:	f7ff f8bb 	bl	80009d8 <NRF24_write>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <main+0xf6>
		printf("Transmission successful\r\n");
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <main+0x124>)
 800186a:	f004 fbad 	bl	8005fc8 <puts>
	}
	HAL_Delay(10);
 800186e:	200a      	movs	r0, #10
 8001870:	f000 fd66 	bl	8002340 <HAL_Delay>
  {
 8001874:	e7ce      	b.n	8001814 <main+0x9c>
 8001876:	bf00      	nop
 8001878:	20000260 	.word	0x20000260
 800187c:	200001f4 	.word	0x200001f4
 8001880:	2000014c 	.word	0x2000014c
 8001884:	20000208 	.word	0x20000208
 8001888:	40020400 	.word	0x40020400
 800188c:	200002a8 	.word	0x200002a8
 8001890:	20000000 	.word	0x20000000
 8001894:	08007738 	.word	0x08007738
 8001898:	20000204 	.word	0x20000204
 800189c:	08007744 	.word	0x08007744

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2230      	movs	r2, #48	; 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fafc 	bl	8005eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <SystemClock_Config+0xc8>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <SystemClock_Config+0xc8>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <SystemClock_Config+0xc8>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <SystemClock_Config+0xcc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <SystemClock_Config+0xcc>)
 80018ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <SystemClock_Config+0xcc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001910:	2308      	movs	r3, #8
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001914:	2354      	movs	r3, #84	; 0x54
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800191c:	2308      	movs	r3, #8
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f002 f885 	bl	8003a34 <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001930:	f000 fa00 	bl	8001d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2102      	movs	r1, #2
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fae7 	bl	8003f24 <HAL_RCC_ClockConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800195c:	f000 f9ea 	bl	8001d34 <Error_Handler>
  }
}
 8001960:	bf00      	nop
 8001962:	3750      	adds	r7, #80	; 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001976:	463b      	mov	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <MX_ADC1_Init+0xf0>)
 8001984:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <MX_ADC1_Init+0xf4>)
 8001986:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <MX_ADC1_Init+0xf0>)
 800198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800198e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <MX_ADC1_Init+0xf0>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <MX_ADC1_Init+0xf0>)
 8001998:	2201      	movs	r2, #1
 800199a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <MX_ADC1_Init+0xf0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019c2:	2204      	movs	r2, #4
 80019c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d4:	4822      	ldr	r0, [pc, #136]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019d6:	f000 fcd7 	bl	8002388 <HAL_ADC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80019e0:	f000 f9a8 	bl	8001d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4619      	mov	r1, r3
 80019f4:	481a      	ldr	r0, [pc, #104]	; (8001a60 <MX_ADC1_Init+0xf0>)
 80019f6:	f000 ff59 	bl	80028ac <HAL_ADC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001a00:	f000 f998 	bl	8001d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_ADC1_Init+0xf0>)
 8001a12:	f000 ff4b 	bl	80028ac <HAL_ADC_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001a1c:	f000 f98a 	bl	8001d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a24:	2303      	movs	r3, #3
 8001a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_ADC1_Init+0xf0>)
 8001a2e:	f000 ff3d 	bl	80028ac <HAL_ADC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001a38:	f000 f97c 	bl	8001d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a40:	2304      	movs	r3, #4
 8001a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_ADC1_Init+0xf0>)
 8001a4a:	f000 ff2f 	bl	80028ac <HAL_ADC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001a54:	f000 f96e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000014c 	.word	0x2000014c
 8001a64:	40012000 	.word	0x40012000

08001a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <MX_SPI1_Init+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI1_Init+0x64>)
 8001ab4:	220a      	movs	r2, #10
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aba:	f002 fc61 	bl	8004380 <HAL_SPI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ac4:	f000 f936 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000208 	.word	0x20000208
 8001ad0:	40013000 	.word	0x40013000

08001ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001afa:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b18:	4813      	ldr	r0, [pc, #76]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b1a:	f003 f9d9 	bl	8004ed0 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b24:	f000 f906 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b36:	f003 fbdf 	bl	80052f8 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b40:	f000 f8f8 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b44:	2320      	movs	r3, #32
 8001b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM2_Init+0x94>)
 8001b52:	f003 fddb 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b5c:	f000 f8ea 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000260 	.word	0x20000260

08001b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f003 fe34 	bl	8005810 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f000 f8c1 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002a8 	.word	0x200002a8
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_DMA_Init+0x3c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <MX_DMA_Init+0x3c>)
 8001bd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_DMA_Init+0x3c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2038      	movs	r0, #56	; 0x38
 8001be8:	f001 f9d2 	bl	8002f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bec:	2038      	movs	r0, #56	; 0x38
 8001bee:	f001 f9eb 	bl	8002fc8 <HAL_NVIC_EnableIRQ>

}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a23      	ldr	r2, [pc, #140]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_GPIO_Init+0xe4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8c:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <MX_GPIO_Init+0xe8>)
 8001c8e:	f001 fe9d 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c98:	4814      	ldr	r0, [pc, #80]	; (8001cec <MX_GPIO_Init+0xec>)
 8001c9a:	f001 fe97 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 8001c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_GPIO_Init+0xe8>)
 8001cb8:	f001 fd04 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 8001cbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_GPIO_Init+0xec>)
 8001cd6:	f001 fcf5 	bl	80036c4 <HAL_GPIO_Init>

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */

  HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 8001cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x1c>)
 8001cfe:	f001 fe7e 	bl	80039fe <HAL_GPIO_TogglePin>
  //printf("adcVal[0] %lu\n", map(adcVal[0],350, 3600, 500, 2500));
//  printf("adcVal[1] %lu\n", map(adcVal[1],350, 3600, 500, 2500));
//  printf("adcVal[2] %lu\n", map(adcVal[2],350, 3600, 500, 2500));
//  printf("adcVal[3] %lu\n", map(adcVal[3],350, 3600, 500, 2500));
//  printf("\n");
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40020c00 	.word	0x40020c00

08001d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d22:	f000 faed 	bl	8002300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>
	...

08001d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d7e:	2007      	movs	r0, #7
 8001d80:	f001 f8fb 	bl	8002f7a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <HAL_ADC_MspInit+0xec>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d160      	bne.n	8001e74 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_ADC_MspInit+0xf0>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_ADC_MspInit+0xf0>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_ADC_MspInit+0xf0>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_ADC_MspInit+0xf0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <HAL_ADC_MspInit+0xf0>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_ADC_MspInit+0xf0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001dea:	230f      	movs	r3, #15
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dee:	2303      	movs	r3, #3
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4821      	ldr	r0, [pc, #132]	; (8001e84 <HAL_ADC_MspInit+0xf4>)
 8001dfe:	f001 fc61 	bl	80036c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e04:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_ADC_MspInit+0xfc>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e48:	480f      	ldr	r0, [pc, #60]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e4a:	f001 f8cb 	bl	8002fe4 <HAL_DMA_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001e54:	f7ff ff6e 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_ADC_MspInit+0xf8>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	2012      	movs	r0, #18
 8001e6a:	f001 f891 	bl	8002f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e6e:	2012      	movs	r0, #18
 8001e70:	f001 f8aa 	bl	8002fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40012000 	.word	0x40012000
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	20000194 	.word	0x20000194
 8001e8c:	40026410 	.word	0x40026410

08001e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_SPI_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12b      	bne.n	8001f0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eea:	23e0      	movs	r3, #224	; 0xe0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efa:	2305      	movs	r3, #5
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_SPI_MspInit+0x8c>)
 8001f06:	f001 fbdd 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d10d      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_TIM_Base_MspInit+0x3c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_TIM_Base_MspInit+0x3c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_TIM_Base_MspInit+0x3c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_UART_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fba:	2360      	movs	r3, #96	; 0x60
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_UART_MspInit+0x8c>)
 8001fd6:	f001 fb75 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020c00 	.word	0x40020c00

08001ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002000:	2200      	movs	r2, #0
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	2019      	movs	r0, #25
 8002006:	f000 ffc3 	bl	8002f90 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800200a:	2019      	movs	r0, #25
 800200c:	f000 ffdc 	bl	8002fc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_InitTick+0xa0>)
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_InitTick+0xa0>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6453      	str	r3, [r2, #68]	; 0x44
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_InitTick+0xa0>)
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800202c:	f107 0210 	add.w	r2, r7, #16
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f002 f970 	bl	800431c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800203c:	f002 f95a 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8002040:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_InitTick+0xa4>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	3b01      	subs	r3, #1
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_InitTick+0xa8>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_InitTick+0xac>)
 8002054:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_InitTick+0xa8>)
 8002058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800205c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <HAL_InitTick+0xa8>)
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_InitTick+0xa8>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_InitTick+0xa8>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <HAL_InitTick+0xa8>)
 8002072:	f002 ff2d 	bl	8004ed0 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d104      	bne.n	8002086 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800207c:	4806      	ldr	r0, [pc, #24]	; (8002098 <HAL_InitTick+0xa8>)
 800207e:	f002 ffd1 	bl	8005024 <HAL_TIM_Base_Start_IT>
 8002082:	4603      	mov	r3, r0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3730      	adds	r7, #48	; 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	431bde83 	.word	0x431bde83
 8002098:	200002ec 	.word	0x200002ec
 800209c:	40010000 	.word	0x40010000

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <NMI_Handler+0x4>

080020a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <MemManage_Handler+0x4>

080020b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler+0x4>

080020be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <ADC_IRQHandler+0x10>)
 80020fe:	f000 f986 	bl	800240e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000014c 	.word	0x2000014c

0800210c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002112:	f002 ffe9 	bl	80050e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200002ec 	.word	0x200002ec

08002120 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA2_Stream0_IRQHandler+0x10>)
 8002126:	f001 f863 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000194 	.word	0x20000194

08002134 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e00a      	b.n	800215c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002146:	f3af 8000 	nop.w
 800214a:	4601      	mov	r1, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf0      	blt.n	8002146 <_read+0x12>
	}

return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_close>:
	}
	return len;
}

int _close(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	605a      	str	r2, [r3, #4]
	return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_isatty>:

int _isatty(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	return 1;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f003 fe18 	bl	8005e3c <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20020000 	.word	0x20020000
 8002238:	00000400 	.word	0x00000400
 800223c:	20000140 	.word	0x20000140
 8002240:	20000348 	.word	0x20000348

08002244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002284:	4c0b      	ldr	r4, [pc, #44]	; (80022b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002292:	f7ff ffd7 	bl	8002244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002296:	f003 fdd7 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7ff fa6d 	bl	8001778 <main>
  bx  lr    
 800229e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80022ac:	08007828 	.word	0x08007828
  ldr r2, =_sbss
 80022b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80022b4:	20000348 	.word	0x20000348

080022b8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <DMA1_Stream0_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <HAL_Init+0x40>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_Init+0x40>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_Init+0x40>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 fe48 	bl	8002f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff fe80 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fd26 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000010 	.word	0x20000010
 8002324:	20000334 	.word	0x20000334

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000334 	.word	0x20000334

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000010 	.word	0x20000010

08002388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e033      	b.n	8002406 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fcf2 	bl	8001d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ce:	f023 0302 	bic.w	r3, r3, #2
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fb98 	bl	8002b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
 80023f6:	e001      	b.n	80023fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b20      	cmp	r3, #32
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d049      	beq.n	80024e4 <HAL_ADC_IRQHandler+0xd6>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d046      	beq.n	80024e4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d12b      	bne.n	80024d4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002480:	2b00      	cmp	r3, #0
 8002482:	d127      	bne.n	80024d4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800249c:	2b00      	cmp	r3, #0
 800249e:	d119      	bne.n	80024d4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0220 	bic.w	r2, r2, #32
 80024ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fc0b 	bl	8001cf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f06f 0212 	mvn.w	r2, #18
 80024e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d057      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1b8>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d054      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d139      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800255a:	2b00      	cmp	r3, #0
 800255c:	d12b      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002568:	2b00      	cmp	r3, #0
 800256a:	d124      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11d      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d119      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002590:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fc28 	bl	8002e0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 020c 	mvn.w	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d017      	beq.n	8002628 <HAL_ADC_IRQHandler+0x21a>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d014      	beq.n	8002628 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10d      	bne.n	8002628 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f933 	bl	8002884 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f06f 0201 	mvn.w	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_ADC_IRQHandler+0x27a>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f043 0202 	orr.w	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f06f 0220 	mvn.w	r2, #32
 8002676:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f90d 	bl	8002898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f06f 0220 	mvn.w	r2, #32
 8002686:	601a      	str	r2, [r3, #0]
  }
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Start_DMA+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0ce      	b.n	800284c <HAL_ADC_Start_DMA+0x1bc>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d018      	beq.n	80026f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026d4:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_ADC_Start_DMA+0x1c4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <HAL_ADC_Start_DMA+0x1c8>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0c9a      	lsrs	r2, r3, #18
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002704:	d107      	bne.n	8002716 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002714:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 8086 	bne.w	8002832 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002750:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	d106      	bne.n	8002774 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f023 0206 	bic.w	r2, r3, #6
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
 8002772:	e002      	b.n	800277a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_ADC_Start_DMA+0x1cc>)
 8002784:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	4a35      	ldr	r2, [pc, #212]	; (8002860 <HAL_ADC_Start_DMA+0x1d0>)
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	4a34      	ldr	r2, [pc, #208]	; (8002864 <HAL_ADC_Start_DMA+0x1d4>)
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	4a33      	ldr	r2, [pc, #204]	; (8002868 <HAL_ADC_Start_DMA+0x1d8>)
 800279c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	334c      	adds	r3, #76	; 0x4c
 80027d2:	4619      	mov	r1, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f000 fcb2 	bl	8003140 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d129      	bne.n	800284a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e020      	b.n	800284a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_ADC_Start_DMA+0x1dc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d11b      	bne.n	800284a <HAL_ADC_Start_DMA+0x1ba>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d114      	bne.n	800284a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e00b      	b.n	800284a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000008 	.word	0x20000008
 8002858:	431bde83 	.word	0x431bde83
 800285c:	40012300 	.word	0x40012300
 8002860:	08002d09 	.word	0x08002d09
 8002864:	08002dc3 	.word	0x08002dc3
 8002868:	08002ddf 	.word	0x08002ddf
 800286c:	40012000 	.word	0x40012000

08002870 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e113      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x244>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d925      	bls.n	8002924 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	3b1e      	subs	r3, #30
 80028ee:	2207      	movs	r2, #7
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43da      	mvns	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	400a      	ands	r2, r1
 80028fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68d9      	ldr	r1, [r3, #12]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	4603      	mov	r3, r0
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4403      	add	r3, r0
 8002916:	3b1e      	subs	r3, #30
 8002918:	409a      	lsls	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e022      	b.n	800296a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6919      	ldr	r1, [r3, #16]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	2207      	movs	r2, #7
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	400a      	ands	r2, r1
 8002946:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	4603      	mov	r3, r0
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4403      	add	r3, r0
 8002960:	409a      	lsls	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d824      	bhi.n	80029bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b05      	subs	r3, #5
 8002984:	221f      	movs	r2, #31
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	400a      	ands	r2, r1
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b05      	subs	r3, #5
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ba:	e04c      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d824      	bhi.n	8002a0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b23      	subs	r3, #35	; 0x23
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43da      	mvns	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	400a      	ands	r2, r1
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3b23      	subs	r3, #35	; 0x23
 8002a00:	fa00 f203 	lsl.w	r2, r0, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	e023      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b41      	subs	r3, #65	; 0x41
 8002a20:	221f      	movs	r2, #31
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b41      	subs	r3, #65	; 0x41
 8002a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_ADC_ConfigChannel+0x250>)
 8002a58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_ADC_ConfigChannel+0x254>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10f      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1d8>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d10b      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_ADC_ConfigChannel+0x254>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12b      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x23a>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_ADC_ConfigChannel+0x258>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <HAL_ADC_ConfigChannel+0x1f4>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b11      	cmp	r3, #17
 8002a9e:	d122      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <HAL_ADC_ConfigChannel+0x258>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_ADC_ConfigChannel+0x25c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <HAL_ADC_ConfigChannel+0x260>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	0c9a      	lsrs	r2, r3, #18
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f9      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40012300 	.word	0x40012300
 8002b00:	40012000 	.word	0x40012000
 8002b04:	10000012 	.word	0x10000012
 8002b08:	20000008 	.word	0x20000008
 8002b0c:	431bde83 	.word	0x431bde83

08002b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b18:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <ADC_Init+0x1f0>)
 8002b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	021a      	lsls	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <ADC_Init+0x1f4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d022      	beq.n	8002bee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6899      	ldr	r1, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e00f      	b.n	8002c0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0202 	bic.w	r2, r2, #2
 8002c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e1b      	ldrb	r3, [r3, #24]
 8002c28:	005a      	lsls	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	3b01      	subs	r3, #1
 8002c68:	035a      	lsls	r2, r3, #13
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	e007      	b.n	8002c84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	051a      	lsls	r2, r3, #20
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc6:	025a      	lsls	r2, r3, #9
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	029a      	lsls	r2, r3, #10
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40012300 	.word	0x40012300
 8002d04:	0f000001 	.word	0x0f000001

08002d08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d13c      	bne.n	8002d9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d12b      	bne.n	8002d94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d127      	bne.n	8002d94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d119      	bne.n	8002d94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0220 	bic.w	r2, r2, #32
 8002d6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7fe ffab 	bl	8001cf0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d9a:	e00e      	b.n	8002dba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fd75 	bl	8002898 <HAL_ADC_ErrorCallback>
}
 8002dae:	e004      	b.n	8002dba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fd4d 	bl	8002870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff fd4a 	bl	8002898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db0b      	blt.n	8002eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <__NVIC_EnableIRQ+0x38>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100

08002ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	; (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	; (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
         );
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff4c 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa2:	f7ff ff61 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	6978      	ldr	r0, [r7, #20]
 8002fae:	f7ff ffb1 	bl	8002f14 <NVIC_EncodePriority>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff80 	bl	8002ec0 <__NVIC_SetPriority>
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff54 	bl	8002e84 <__NVIC_EnableIRQ>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff f99a 	bl	8002328 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e099      	b.n	8003134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003022:	f7ff f981 	bl	8002328 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b05      	cmp	r3, #5
 800302e:	d908      	bls.n	8003042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e078      	b.n	8003134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e8      	bne.n	8003022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_DMA_Init+0x158>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d117      	bne.n	8003106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa6f 	bl	80035cc <DMA_CheckFifoParam>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2240      	movs	r2, #64	; 0x40
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	e016      	b.n	8003134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa26 	bl	8003560 <DMA_CalcBaseAndBitshift>
 8003114:	4603      	mov	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f010803f 	.word	0xf010803f

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Start_IT+0x26>
 8003162:	2302      	movs	r3, #2
 8003164:	e040      	b.n	80031e8 <HAL_DMA_Start_IT+0xa8>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d12f      	bne.n	80031da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f9b8 	bl	8003504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	223f      	movs	r2, #63	; 0x3f
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0216 	orr.w	r2, r2, #22
 80031ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e005      	b.n	80031e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031fc:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_DMA_IRQHandler+0x258>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a92      	ldr	r2, [pc, #584]	; (800344c <HAL_DMA_IRQHandler+0x25c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	2208      	movs	r2, #8
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01a      	beq.n	800325c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2208      	movs	r2, #8
 800324a:	409a      	lsls	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	2201      	movs	r2, #1
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2204      	movs	r2, #4
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2210      	movs	r2, #16
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d043      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03c      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2210      	movs	r2, #16
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	e01f      	b.n	8003360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
 8003330:	e016      	b.n	8003360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0208 	bic.w	r2, r2, #8
 800334e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2220      	movs	r2, #32
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 808e 	beq.w	800348e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8086 	beq.w	800348e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	2220      	movs	r2, #32
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b05      	cmp	r3, #5
 8003398:	d136      	bne.n	8003408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0216 	bic.w	r2, r2, #22
 80033a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_DMA_IRQHandler+0x1da>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0208 	bic.w	r2, r2, #8
 80033d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	223f      	movs	r2, #63	; 0x3f
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d07d      	beq.n	80034fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
        }
        return;
 8003406:	e078      	b.n	80034fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01c      	beq.n	8003450 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	2b00      	cmp	r3, #0
 800342a:	d030      	beq.n	800348e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
 8003434:	e02b      	b.n	800348e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d027      	beq.n	800348e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
 8003446:	e022      	b.n	800348e <HAL_DMA_IRQHandler+0x29e>
 8003448:	20000008 	.word	0x20000008
 800344c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0210 	bic.w	r2, r2, #16
 800346c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	2b00      	cmp	r3, #0
 8003494:	d032      	beq.n	80034fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d022      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2205      	movs	r2, #5
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d307      	bcc.n	80034d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f2      	bne.n	80034ba <HAL_DMA_IRQHandler+0x2ca>
 80034d4:	e000      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e000      	b.n	80034fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80034fa:	bf00      	nop
    }
  }
}
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop

08003504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d108      	bne.n	8003544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003542:	e007      	b.n	8003554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3b10      	subs	r3, #16
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <DMA_CalcBaseAndBitshift+0x68>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d909      	bls.n	80035a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	1d1a      	adds	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	659a      	str	r2, [r3, #88]	; 0x58
 80035a0:	e007      	b.n	80035b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	aaaaaaab 	.word	0xaaaaaaab
 80035c8:	08007778 	.word	0x08007778

080035cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11f      	bne.n	8003626 <DMA_CheckFifoParam+0x5a>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d856      	bhi.n	800369a <DMA_CheckFifoParam+0xce>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <DMA_CheckFifoParam+0x28>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003617 	.word	0x08003617
 80035fc:	08003605 	.word	0x08003605
 8003600:	0800369b 	.word	0x0800369b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d046      	beq.n	800369e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003614:	e043      	b.n	800369e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800361e:	d140      	bne.n	80036a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e03d      	b.n	80036a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	d121      	bne.n	8003674 <DMA_CheckFifoParam+0xa8>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d837      	bhi.n	80036a6 <DMA_CheckFifoParam+0xda>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <DMA_CheckFifoParam+0x70>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003653 	.word	0x08003653
 8003644:	0800364d 	.word	0x0800364d
 8003648:	08003665 	.word	0x08003665
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e030      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d025      	beq.n	80036aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003662:	e022      	b.n	80036aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800366c:	d11f      	bne.n	80036ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003672:	e01c      	b.n	80036ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d903      	bls.n	8003682 <DMA_CheckFifoParam+0xb6>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d003      	beq.n	8003688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003680:	e018      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      break;
 8003686:	e015      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e00b      	b.n	80036b2 <DMA_CheckFifoParam+0xe6>
      break;
 800369a:	bf00      	nop
 800369c:	e00a      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e008      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e006      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e004      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
    }
  } 
  
  return status; 
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e159      	b.n	8003994 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 8148 	bne.w	800398e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d005      	beq.n	8003716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003712:	2b02      	cmp	r3, #2
 8003714:	d130      	bne.n	8003778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d017      	beq.n	80037b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d123      	bne.n	8003808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a2 	beq.w	800398e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b57      	ldr	r3, [pc, #348]	; (80039ac <HAL_GPIO_Init+0x2e8>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_GPIO_Init+0x2e8>)
 8003854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003858:	6453      	str	r3, [r2, #68]	; 0x44
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <HAL_GPIO_Init+0x2e8>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003866:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <HAL_GPIO_Init+0x2ec>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a49      	ldr	r2, [pc, #292]	; (80039b4 <HAL_GPIO_Init+0x2f0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_Init+0x202>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a48      	ldr	r2, [pc, #288]	; (80039b8 <HAL_GPIO_Init+0x2f4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x1fe>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a47      	ldr	r2, [pc, #284]	; (80039bc <HAL_GPIO_Init+0x2f8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_Init+0x1fa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a46      	ldr	r2, [pc, #280]	; (80039c0 <HAL_GPIO_Init+0x2fc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_Init+0x1f6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a45      	ldr	r2, [pc, #276]	; (80039c4 <HAL_GPIO_Init+0x300>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_Init+0x1f2>
 80038b2:	2304      	movs	r3, #4
 80038b4:	e008      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e004      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038be:	2302      	movs	r3, #2
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038c6:	2300      	movs	r3, #0
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f002 0203 	and.w	r2, r2, #3
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	4093      	lsls	r3, r2
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d8:	4935      	ldr	r1, [pc, #212]	; (80039b0 <HAL_GPIO_Init+0x2ec>)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e6:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <HAL_GPIO_Init+0x304>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390a:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_GPIO_Init+0x304>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <HAL_GPIO_Init+0x304>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003934:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_GPIO_Init+0x304>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_GPIO_Init+0x304>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395e:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <HAL_GPIO_Init+0x304>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <HAL_GPIO_Init+0x304>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003988:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <HAL_GPIO_Init+0x304>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f aea2 	bls.w	80036e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40013800 	.word	0x40013800
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020c00 	.word	0x40020c00
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	4613      	mov	r3, r2
 80039da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e8:	e003      	b.n	80039f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	041a      	lsls	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	619a      	str	r2, [r3, #24]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a10:	887a      	ldrh	r2, [r7, #2]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	041a      	lsls	r2, r3, #16
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	400b      	ands	r3, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e264      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d075      	beq.n	8003b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a52:	4ba3      	ldr	r3, [pc, #652]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4ba0      	ldr	r3, [pc, #640]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b9d      	ldr	r3, [pc, #628]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b99      	ldr	r3, [pc, #612]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x108>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d157      	bne.n	8003b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e23f      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x74>
 8003a9a:	4b91      	ldr	r3, [pc, #580]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a90      	ldr	r2, [pc, #576]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e01d      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x98>
 8003ab2:	4b8b      	ldr	r3, [pc, #556]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a8a      	ldr	r2, [pc, #552]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a87      	ldr	r2, [pc, #540]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003acc:	4b84      	ldr	r3, [pc, #528]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a83      	ldr	r2, [pc, #524]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a80      	ldr	r2, [pc, #512]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fc1c 	bl	8002328 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe fc18 	bl	8002328 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e204      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xc0>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fc08 	bl	8002328 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe fc04 	bl	8002328 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1f0      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b6c      	ldr	r3, [pc, #432]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0xe8>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4a:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b62      	ldr	r3, [pc, #392]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d11c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1c4      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4952      	ldr	r1, [pc, #328]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	e03a      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <HAL_RCC_OscConfig+0x2b0>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fbbd 	bl	8002328 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fbb9 	bl	8002328 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1a5      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4940      	ldr	r1, [pc, #256]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_RCC_OscConfig+0x2b0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fb9c 	bl	8002328 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fb98 	bl	8002328 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e184      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d030      	beq.n	8003c80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_RCC_OscConfig+0x2b4>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe fb7c 	bl	8002328 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fe fb78 	bl	8002328 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e164      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x200>
 8003c52:	e015      	b.n	8003c80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c54:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <HAL_RCC_OscConfig+0x2b4>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fb65 	bl	8002328 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fb61 	bl	8002328 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e14d      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a0 	beq.w	8003dce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_OscConfig+0x2b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d121      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_RCC_OscConfig+0x2b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a07      	ldr	r2, [pc, #28]	; (8003cec <HAL_RCC_OscConfig+0x2b8>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fe fb27 	bl	8002328 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	e011      	b.n	8003d02 <HAL_RCC_OscConfig+0x2ce>
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	42470000 	.word	0x42470000
 8003ce8:	42470e80 	.word	0x42470e80
 8003cec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf0:	f7fe fb1a 	bl	8002328 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e106      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_RCC_OscConfig+0x4e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d106      	bne.n	8003d24 <HAL_RCC_OscConfig+0x2f0>
 8003d16:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	e01c      	b.n	8003d5e <HAL_RCC_OscConfig+0x32a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x312>
 8003d2c:	4b7b      	ldr	r3, [pc, #492]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a7a      	ldr	r2, [pc, #488]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	4b78      	ldr	r3, [pc, #480]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a77      	ldr	r2, [pc, #476]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	e00b      	b.n	8003d5e <HAL_RCC_OscConfig+0x32a>
 8003d46:	4b75      	ldr	r3, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a74      	ldr	r2, [pc, #464]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	4b72      	ldr	r3, [pc, #456]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a71      	ldr	r2, [pc, #452]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d015      	beq.n	8003d92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fadf 	bl	8002328 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fe fadb 	bl	8002328 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0c5      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ee      	beq.n	8003d6e <HAL_RCC_OscConfig+0x33a>
 8003d90:	e014      	b.n	8003dbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fac9 	bl	8002328 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fe fac5 	bl	8002328 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0af      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	4b5a      	ldr	r3, [pc, #360]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ee      	bne.n	8003d9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a55      	ldr	r2, [pc, #340]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 809b 	beq.w	8003f0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d05c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d141      	bne.n	8003e70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fa99 	bl	8002328 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe fa95 	bl	8002328 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e081      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0c:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	019b      	lsls	r3, r3, #6
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e42:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe fa6e 	bl	8002328 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe fa6a 	bl	8002328 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e056      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x41c>
 8003e6e:	e04e      	b.n	8003f0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e70:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe fa57 	bl	8002328 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fa53 	bl	8002328 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e03f      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x44a>
 8003e9c:	e037      	b.n	8003f0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e032      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eaa:	4b1c      	ldr	r3, [pc, #112]	; (8003f1c <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d028      	beq.n	8003f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d121      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d11a      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eda:	4013      	ands	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d111      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470060 	.word	0x42470060

08003f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0cc      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b68      	ldr	r3, [pc, #416]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d90c      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d044      	beq.n	8004044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d119      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e067      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4934      	ldr	r1, [pc, #208]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fe f988 	bl	8002328 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fe f984 	bl	8002328 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e04f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d20c      	bcs.n	800406c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	; (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd ff90 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	08007760 	.word	0x08007760
 80040e8:	20000008 	.word	0x20000008
 80040ec:	2000000c 	.word	0x2000000c

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	2300      	movs	r3, #0
 8004102:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004108:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d00d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x40>
 8004114:	2b08      	cmp	r3, #8
 8004116:	f200 80bd 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x1a4>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x3a>
 8004122:	e0b7      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b61      	ldr	r3, [pc, #388]	; (80042ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004126:	60bb      	str	r3, [r7, #8]
       break;
 8004128:	e0b7      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800412a:	4b61      	ldr	r3, [pc, #388]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800412c:	60bb      	str	r3, [r7, #8]
      break;
 800412e:	e0b4      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004130:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004138:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800413a:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d04d      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	ea02 0800 	and.w	r8, r2, r0
 800415e:	ea03 0901 	and.w	r9, r3, r1
 8004162:	4640      	mov	r0, r8
 8004164:	4649      	mov	r1, r9
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	014b      	lsls	r3, r1, #5
 8004170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004174:	0142      	lsls	r2, r0, #5
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	ebb0 0008 	subs.w	r0, r0, r8
 800417e:	eb61 0109 	sbc.w	r1, r1, r9
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004190:	0182      	lsls	r2, r0, #6
 8004192:	1a12      	subs	r2, r2, r0
 8004194:	eb63 0301 	sbc.w	r3, r3, r1
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	00d9      	lsls	r1, r3, #3
 80041a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a6:	00d0      	lsls	r0, r2, #3
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	eb12 0208 	adds.w	r2, r2, r8
 80041b0:	eb43 0309 	adc.w	r3, r3, r9
 80041b4:	f04f 0000 	mov.w	r0, #0
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	0259      	lsls	r1, r3, #9
 80041be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041c2:	0250      	lsls	r0, r2, #9
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f7fc f85c 	bl	8000290 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e04a      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	ea02 0400 	and.w	r4, r2, r0
 80041fa:	ea03 0501 	and.w	r5, r3, r1
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	014b      	lsls	r3, r1, #5
 800420c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004210:	0142      	lsls	r2, r0, #5
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	1b00      	subs	r0, r0, r4
 8004218:	eb61 0105 	sbc.w	r1, r1, r5
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	018b      	lsls	r3, r1, #6
 8004226:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800422a:	0182      	lsls	r2, r0, #6
 800422c:	1a12      	subs	r2, r2, r0
 800422e:	eb63 0301 	sbc.w	r3, r3, r1
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	00d9      	lsls	r1, r3, #3
 800423c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004240:	00d0      	lsls	r0, r2, #3
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	1912      	adds	r2, r2, r4
 8004248:	eb45 0303 	adc.w	r3, r5, r3
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	0299      	lsls	r1, r3, #10
 8004256:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800425a:	0290      	lsls	r0, r2, #10
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f7fc f810 	bl	8000290 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	60bb      	str	r3, [r7, #8]
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004296:	60bb      	str	r3, [r7, #8]
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	68bb      	ldr	r3, [r7, #8]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000008 	.word	0x20000008

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08007770 	.word	0x08007770

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	08007770 	.word	0x08007770

0800431c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	220f      	movs	r2, #15
 800432a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0203 	and.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <HAL_RCC_GetClockConfig+0x60>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0207 	and.w	r2, r3, #7
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	40023c00 	.word	0x40023c00

08004380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e07b      	b.n	800448a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a2:	d009      	beq.n	80043b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	61da      	str	r2, [r3, #28]
 80043aa:	e005      	b.n	80043b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fd5c 	bl	8001e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	ea42 0103 	orr.w	r1, r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0104 	and.w	r1, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0210 	and.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_SPI_Transmit+0x22>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e126      	b.n	8004702 <HAL_SPI_Transmit+0x270>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044bc:	f7fd ff34 	bl	8002328 <HAL_GetTick>
 80044c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d6:	e10b      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0x52>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044e8:	e102      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2203      	movs	r2, #3
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004530:	d10f      	bne.n	8004552 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004550:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d007      	beq.n	8004570 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d14b      	bne.n	8004612 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Transmit+0xf6>
 8004582:	8afb      	ldrh	r3, [r7, #22]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d13e      	bne.n	8004606 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ac:	e02b      	b.n	8004606 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d112      	bne.n	80045e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e0:	e011      	b.n	8004606 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e2:	f7fd fea1 	bl	8002328 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d803      	bhi.n	80045fa <HAL_SPI_Transmit+0x168>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d102      	bne.n	8004600 <HAL_SPI_Transmit+0x16e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004604:	e074      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ce      	bne.n	80045ae <HAL_SPI_Transmit+0x11c>
 8004610:	e04c      	b.n	80046ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Transmit+0x18e>
 800461a:	8afb      	ldrh	r3, [r7, #22]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d140      	bne.n	80046a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004646:	e02c      	b.n	80046a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d113      	bne.n	800467e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	; 0x36
 800467c:	e011      	b.n	80046a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467e:	f7fd fe53 	bl	8002328 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d803      	bhi.n	8004696 <HAL_SPI_Transmit+0x204>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d102      	bne.n	800469c <HAL_SPI_Transmit+0x20a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a0:	e026      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1cd      	bne.n	8004648 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fbcb 	bl	8004e4c <SPI_EndRxTxTransaction>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e000      	b.n	80046f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80046ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004700:	7ffb      	ldrb	r3, [r7, #31]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b088      	sub	sp, #32
 800470e:	af02      	add	r7, sp, #8
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d112      	bne.n	800474e <HAL_SPI_Receive+0x44>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10e      	bne.n	800474e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2204      	movs	r2, #4
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8f1 	bl	800492c <HAL_SPI_TransmitReceive>
 800474a:	4603      	mov	r3, r0
 800474c:	e0ea      	b.n	8004924 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_SPI_Receive+0x52>
 8004758:	2302      	movs	r3, #2
 800475a:	e0e3      	b.n	8004924 <HAL_SPI_Receive+0x21a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004764:	f7fd fde0 	bl	8002328 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d002      	beq.n	800477c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	75fb      	strb	r3, [r7, #23]
    goto error;
 800477a:	e0ca      	b.n	8004912 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Receive+0x7e>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800478c:	e0c1      	b.n	8004912 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2204      	movs	r2, #4
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	d10f      	bne.n	80047f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d162      	bne.n	80048e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800481c:	e02e      	b.n	800487c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d115      	bne.n	8004858 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f103 020c 	add.w	r2, r3, #12
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004856:	e011      	b.n	800487c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004858:	f7fd fd66 	bl	8002328 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d803      	bhi.n	8004870 <HAL_SPI_Receive+0x166>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d102      	bne.n	8004876 <HAL_SPI_Receive+0x16c>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	75fb      	strb	r3, [r7, #23]
          goto error;
 800487a:	e04a      	b.n	8004912 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1cb      	bne.n	800481e <HAL_SPI_Receive+0x114>
 8004886:	e031      	b.n	80048ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d113      	bne.n	80048be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	b292      	uxth	r2, r2
 80048a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048bc:	e011      	b.n	80048e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048be:	f7fd fd33 	bl	8002328 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d803      	bhi.n	80048d6 <HAL_SPI_Receive+0x1cc>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_Receive+0x1d2>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048e0:	e017      	b.n	8004912 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1cd      	bne.n	8004888 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fa45 	bl	8004d80 <SPI_EndRxTransaction>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
 800490e:	e000      	b.n	8004912 <HAL_SPI_Receive+0x208>
  }

error :
 8004910:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	; 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800493a:	2301      	movs	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x26>
 800494e:	2302      	movs	r3, #2
 8004950:	e18a      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x33c>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495a:	f7fd fce5 	bl	8002328 <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b01      	cmp	r3, #1
 800497a:	d00f      	beq.n	800499c <HAL_SPI_TransmitReceive+0x70>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004982:	d107      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x68>
 800498c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004990:	2b04      	cmp	r3, #4
 8004992:	d003      	beq.n	800499c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800499a:	e15b      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x82>
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049b4:	e14e      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d003      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2205      	movs	r2, #5
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	887a      	ldrh	r2, [r7, #2]
 80049f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d007      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a26:	d178      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_TransmitReceive+0x10a>
 8004a30:	8b7b      	ldrh	r3, [r7, #26]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d166      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	881a      	ldrh	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a5a:	e053      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d11b      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x176>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x176>
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d113      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	1c9a      	adds	r2, r3, #2
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d119      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x1b8>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d014      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ae4:	f7fd fc20 	bl	8002328 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d807      	bhi.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d003      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b02:	e0a7      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1a6      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x130>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1a1      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x130>
 8004b18:	e07c      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x1fc>
 8004b22:	8b7b      	ldrh	r3, [r7, #26]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d16b      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4e:	e057      	b.n	8004c00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11c      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x26c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d017      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0x26c>
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d114      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d119      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x2ae>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d014      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bda:	f7fd fba5 	bl	8002328 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d803      	bhi.n	8004bf2 <HAL_SPI_TransmitReceive+0x2c6>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x2cc>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bfe:	e029      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1a2      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x224>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d19d      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f917 	bl	8004e4c <SPI_EndRxTxTransaction>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c30:	e010      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e000      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3730      	adds	r7, #48	; 0x30
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c80:	f7fd fb52 	bl	8002328 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c90:	f7fd fb4a 	bl	8002328 <HAL_GetTick>
 8004c94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c96:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	015b      	lsls	r3, r3, #5
 8004c9c:	0d1b      	lsrs	r3, r3, #20
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	fb02 f303 	mul.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca6:	e054      	b.n	8004d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d050      	beq.n	8004d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cb0:	f7fd fb3a 	bl	8002328 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d902      	bls.n	8004cc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d13d      	bne.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cde:	d111      	bne.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	d004      	beq.n	8004cf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf2:	d107      	bne.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0c:	d10f      	bne.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e017      	b.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d19b      	bne.n	8004ca8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000008 	.word	0x20000008

08004d80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d94:	d111      	bne.n	8004dba <SPI_EndRxTransaction+0x3a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9e:	d004      	beq.n	8004daa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da8:	d107      	bne.n	8004dba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d12a      	bne.n	8004e1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d012      	beq.n	8004df4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff ff49 	bl	8004c70 <SPI_WaitFlagStateUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d02d      	beq.n	8004e40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e026      	b.n	8004e42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ff36 	bl	8004c70 <SPI_WaitFlagStateUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01a      	beq.n	8004e40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e013      	b.n	8004e42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2101      	movs	r1, #1
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff ff23 	bl	8004c70 <SPI_WaitFlagStateUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e000      	b.n	8004e42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <SPI_EndRxTxTransaction+0x7c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <SPI_EndRxTxTransaction+0x80>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	0d5b      	lsrs	r3, r3, #21
 8004e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d112      	bne.n	8004e9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff fef4 	bl	8004c70 <SPI_WaitFlagStateUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00f      	b.n	8004ebe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d0f2      	beq.n	8004e9e <SPI_EndRxTxTransaction+0x52>
 8004eb8:	e000      	b.n	8004ebc <SPI_EndRxTxTransaction+0x70>
        break;
 8004eba:	bf00      	nop
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000008 	.word	0x20000008
 8004ecc:	165e9f81 	.word	0x165e9f81

08004ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e041      	b.n	8004f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd f812 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f000 fae2 	bl	80054d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e03c      	b.n	8005002 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <HAL_TIM_Base_Start+0xa0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_TIM_Base_Start+0x5c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d013      	beq.n	8004fcc <HAL_TIM_Base_Start+0x5c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <HAL_TIM_Base_Start+0xa4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_TIM_Base_Start+0x5c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a19      	ldr	r2, [pc, #100]	; (8005018 <HAL_TIM_Base_Start+0xa8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_TIM_Base_Start+0x5c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	; (800501c <HAL_TIM_Base_Start+0xac>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_Base_Start+0x5c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <HAL_TIM_Base_Start+0xb0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d111      	bne.n	8004ff0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d010      	beq.n	8005000 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	e007      	b.n	8005000 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800
 800501c:	40000c00 	.word	0x40000c00
 8005020:	40014000 	.word	0x40014000

08005024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d001      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e044      	b.n	80050c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005066:	d013      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a19      	ldr	r2, [pc, #100]	; (80050dc <HAL_TIM_Base_Start_IT+0xb8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d111      	bne.n	80050b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d010      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	e007      	b.n	80050c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40014000 	.word	0x40014000

080050e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b02      	cmp	r3, #2
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0202 	mvn.w	r2, #2
 8005114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f9b5 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9a7 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f9b8 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b04      	cmp	r3, #4
 8005150:	d122      	bne.n	8005198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b04      	cmp	r3, #4
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0204 	mvn.w	r2, #4
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f98b 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f97d 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f98e 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0208 	mvn.w	r2, #8
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2204      	movs	r2, #4
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f961 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f953 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f964 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b10      	cmp	r3, #16
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2208      	movs	r2, #8
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f937 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f929 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f93a 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b01      	cmp	r3, #1
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0201 	mvn.w	r2, #1
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fc fd52 	bl	8001d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b80      	cmp	r3, #128	; 0x80
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fab2 	bl	80057fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8ff 	bl	80054c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0220 	mvn.w	r2, #32
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa7c 	bl	80057e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIM_ConfigClockSource+0x1c>
 8005310:	2302      	movs	r3, #2
 8005312:	e0b4      	b.n	800547e <HAL_TIM_ConfigClockSource+0x186>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800533a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534c:	d03e      	beq.n	80053cc <HAL_TIM_ConfigClockSource+0xd4>
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005352:	f200 8087 	bhi.w	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	f000 8086 	beq.w	800546a <HAL_TIM_ConfigClockSource+0x172>
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	d87f      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b70      	cmp	r3, #112	; 0x70
 8005366:	d01a      	beq.n	800539e <HAL_TIM_ConfigClockSource+0xa6>
 8005368:	2b70      	cmp	r3, #112	; 0x70
 800536a:	d87b      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b60      	cmp	r3, #96	; 0x60
 800536e:	d050      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x11a>
 8005370:	2b60      	cmp	r3, #96	; 0x60
 8005372:	d877      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b50      	cmp	r3, #80	; 0x50
 8005376:	d03c      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005378:	2b50      	cmp	r3, #80	; 0x50
 800537a:	d873      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d058      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x13a>
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d86f      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d064      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x15a>
 8005388:	2b30      	cmp	r3, #48	; 0x30
 800538a:	d86b      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d060      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	2b20      	cmp	r3, #32
 8005392:	d867      	bhi.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d05c      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	2b10      	cmp	r3, #16
 800539a:	d05a      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x15a>
 800539c:	e062      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6899      	ldr	r1, [r3, #8]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f000 f98d 	bl	80056cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	609a      	str	r2, [r3, #8]
      break;
 80053ca:	e04f      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6899      	ldr	r1, [r3, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f000 f976 	bl	80056cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ee:	609a      	str	r2, [r3, #8]
      break;
 80053f0:	e03c      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6859      	ldr	r1, [r3, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	461a      	mov	r2, r3
 8005400:	f000 f8ea 	bl	80055d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2150      	movs	r1, #80	; 0x50
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f943 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 8005410:	e02c      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6859      	ldr	r1, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	461a      	mov	r2, r3
 8005420:	f000 f909 	bl	8005636 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2160      	movs	r1, #96	; 0x60
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f933 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 8005430:	e01c      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	461a      	mov	r2, r3
 8005440:	f000 f8ca 	bl	80055d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2140      	movs	r1, #64	; 0x40
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f923 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 8005450:	e00c      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f000 f91a 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 8005462:	e003      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
      break;
 8005468:	e000      	b.n	800546c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800546a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a34      	ldr	r2, [pc, #208]	; (80055bc <TIM_Base_SetConfig+0xe4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00f      	beq.n	8005510 <TIM_Base_SetConfig+0x38>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f6:	d00b      	beq.n	8005510 <TIM_Base_SetConfig+0x38>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <TIM_Base_SetConfig+0xe8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_Base_SetConfig+0x38>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a30      	ldr	r2, [pc, #192]	; (80055c4 <TIM_Base_SetConfig+0xec>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_Base_SetConfig+0x38>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a2f      	ldr	r2, [pc, #188]	; (80055c8 <TIM_Base_SetConfig+0xf0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d108      	bne.n	8005522 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a25      	ldr	r2, [pc, #148]	; (80055bc <TIM_Base_SetConfig+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01b      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005530:	d017      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <TIM_Base_SetConfig+0xe8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <TIM_Base_SetConfig+0xec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <TIM_Base_SetConfig+0xf0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <TIM_Base_SetConfig+0xf4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <TIM_Base_SetConfig+0xf8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_Base_SetConfig+0x8a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <TIM_Base_SetConfig+0xfc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a08      	ldr	r2, [pc, #32]	; (80055bc <TIM_Base_SetConfig+0xe4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d103      	bne.n	80055a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	615a      	str	r2, [r3, #20]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40000400 	.word	0x40000400
 80055c4:	40000800 	.word	0x40000800
 80055c8:	40000c00 	.word	0x40000c00
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400
 80055d4:	40014800 	.word	0x40014800

080055d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 030a 	bic.w	r3, r3, #10
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f023 0210 	bic.w	r2, r3, #16
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f043 0307 	orr.w	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e050      	b.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d013      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a16      	ldr	r2, [pc, #88]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d10c      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40014000 	.word	0x40014000

080057e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e03f      	b.n	80058a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fc fb92 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2224      	movs	r2, #36	; 0x24
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f929 	bl	8005aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b08a      	sub	sp, #40	; 0x28
 80058ae:	af02      	add	r7, sp, #8
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d17c      	bne.n	80059c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_UART_Transmit+0x2c>
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e075      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_UART_Transmit+0x3e>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e06e      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2221      	movs	r2, #33	; 0x21
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fe:	f7fc fd13 	bl	8002328 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005918:	d108      	bne.n	800592c <HAL_UART_Transmit+0x82>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e003      	b.n	8005934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800593c:	e02a      	b.n	8005994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f840 	bl	80059ce <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e036      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800596c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	3302      	adds	r3, #2
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e007      	b.n	8005986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1cf      	bne.n	800593e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f810 	bl	80059ce <UART_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e006      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b090      	sub	sp, #64	; 0x40
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059de:	e050      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d04c      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0x30>
 80059ee:	f7fc fc9b 	bl	8002328 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d241      	bcs.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a1e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e5      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3314      	adds	r3, #20
 8005a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	613b      	str	r3, [r7, #16]
   return(result);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a52:	623a      	str	r2, [r7, #32]
 8005a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	69f9      	ldr	r1, [r7, #28]
 8005a58:	6a3a      	ldr	r2, [r7, #32]
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e5      	bne.n	8005a32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d09f      	beq.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3740      	adds	r7, #64	; 0x40
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	b09f      	sub	sp, #124	; 0x7c
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac2:	68d9      	ldr	r1, [r3, #12]
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	ea40 0301 	orr.w	r3, r0, r1
 8005acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af0:	f021 010c 	bic.w	r1, r1, #12
 8005af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005afa:	430b      	orrs	r3, r1
 8005afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	6999      	ldr	r1, [r3, #24]
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	ea40 0301 	orr.w	r3, r0, r1
 8005b14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4bc5      	ldr	r3, [pc, #788]	; (8005e30 <UART_SetConfig+0x384>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d004      	beq.n	8005b2a <UART_SetConfig+0x7e>
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4bc3      	ldr	r3, [pc, #780]	; (8005e34 <UART_SetConfig+0x388>)
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d103      	bne.n	8005b32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b2a:	f7fe fbe3 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8005b2e:	6778      	str	r0, [r7, #116]	; 0x74
 8005b30:	e002      	b.n	8005b38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b32:	f7fe fbcb 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8005b36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b40:	f040 80b6 	bne.w	8005cb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b46:	461c      	mov	r4, r3
 8005b48:	f04f 0500 	mov.w	r5, #0
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	462b      	mov	r3, r5
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	6439      	str	r1, [r7, #64]	; 0x40
 8005b54:	415b      	adcs	r3, r3
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
 8005b58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b5c:	1912      	adds	r2, r2, r4
 8005b5e:	eb45 0303 	adc.w	r3, r5, r3
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	00d9      	lsls	r1, r3, #3
 8005b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b70:	00d0      	lsls	r0, r2, #3
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	1911      	adds	r1, r2, r4
 8005b78:	6639      	str	r1, [r7, #96]	; 0x60
 8005b7a:	416b      	adcs	r3, r5
 8005b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	1891      	adds	r1, r2, r2
 8005b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b8c:	415b      	adcs	r3, r3
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b98:	f7fa fb7a 	bl	8000290 <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4ba5      	ldr	r3, [pc, #660]	; (8005e38 <UART_SetConfig+0x38c>)
 8005ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	011e      	lsls	r6, r3, #4
 8005baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bac:	461c      	mov	r4, r3
 8005bae:	f04f 0500 	mov.w	r5, #0
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bc2:	1912      	adds	r2, r2, r4
 8005bc4:	eb45 0303 	adc.w	r3, r5, r3
 8005bc8:	f04f 0000 	mov.w	r0, #0
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	00d9      	lsls	r1, r3, #3
 8005bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd6:	00d0      	lsls	r0, r2, #3
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	1911      	adds	r1, r2, r4
 8005bde:	65b9      	str	r1, [r7, #88]	; 0x58
 8005be0:	416b      	adcs	r3, r5
 8005be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bfe:	f7fa fb47 	bl	8000290 <__aeabi_uldivmod>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4b8c      	ldr	r3, [pc, #560]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	2164      	movs	r1, #100	; 0x64
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	3332      	adds	r3, #50	; 0x32
 8005c1a:	4a87      	ldr	r2, [pc, #540]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c28:	441e      	add	r6, r3
 8005c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	1894      	adds	r4, r2, r2
 8005c38:	623c      	str	r4, [r7, #32]
 8005c3a:	415b      	adcs	r3, r3
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c42:	1812      	adds	r2, r2, r0
 8005c44:	eb41 0303 	adc.w	r3, r1, r3
 8005c48:	f04f 0400 	mov.w	r4, #0
 8005c4c:	f04f 0500 	mov.w	r5, #0
 8005c50:	00dd      	lsls	r5, r3, #3
 8005c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c56:	00d4      	lsls	r4, r2, #3
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	1814      	adds	r4, r2, r0
 8005c5e:	653c      	str	r4, [r7, #80]	; 0x50
 8005c60:	414b      	adcs	r3, r1
 8005c62:	657b      	str	r3, [r7, #84]	; 0x54
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	61b9      	str	r1, [r7, #24]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c7e:	f7fa fb07 	bl	8000290 <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4b6c      	ldr	r3, [pc, #432]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c88:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	2164      	movs	r1, #100	; 0x64
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	3332      	adds	r3, #50	; 0x32
 8005c9a:	4a67      	ldr	r2, [pc, #412]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 0207 	and.w	r2, r3, #7
 8005ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4432      	add	r2, r6
 8005cac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cae:	e0b9      	b.n	8005e24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	f04f 0500 	mov.w	r5, #0
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	6139      	str	r1, [r7, #16]
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cc8:	1912      	adds	r2, r2, r4
 8005cca:	eb45 0303 	adc.w	r3, r5, r3
 8005cce:	f04f 0000 	mov.w	r0, #0
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	00d9      	lsls	r1, r3, #3
 8005cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cdc:	00d0      	lsls	r0, r2, #3
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	eb12 0804 	adds.w	r8, r2, r4
 8005ce6:	eb43 0905 	adc.w	r9, r3, r5
 8005cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	008b      	lsls	r3, r1, #2
 8005cfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d02:	0082      	lsls	r2, r0, #2
 8005d04:	4640      	mov	r0, r8
 8005d06:	4649      	mov	r1, r9
 8005d08:	f7fa fac2 	bl	8000290 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b49      	ldr	r3, [pc, #292]	; (8005e38 <UART_SetConfig+0x38c>)
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	011e      	lsls	r6, r3, #4
 8005d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	1894      	adds	r4, r2, r2
 8005d28:	60bc      	str	r4, [r7, #8]
 8005d2a:	415b      	adcs	r3, r3
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d32:	1812      	adds	r2, r2, r0
 8005d34:	eb41 0303 	adc.w	r3, r1, r3
 8005d38:	f04f 0400 	mov.w	r4, #0
 8005d3c:	f04f 0500 	mov.w	r5, #0
 8005d40:	00dd      	lsls	r5, r3, #3
 8005d42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d46:	00d4      	lsls	r4, r2, #3
 8005d48:	4622      	mov	r2, r4
 8005d4a:	462b      	mov	r3, r5
 8005d4c:	1814      	adds	r4, r2, r0
 8005d4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d50:	414b      	adcs	r3, r1
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f04f 0100 	mov.w	r1, #0
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d6c:	0082      	lsls	r2, r0, #2
 8005d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d72:	f7fa fa8d 	bl	8000290 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <UART_SetConfig+0x38c>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	; 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	; 0x32
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	; (8005e38 <UART_SetConfig+0x38c>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d9a:	441e      	add	r6, r3
 8005d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	1894      	adds	r4, r2, r2
 8005daa:	603c      	str	r4, [r7, #0]
 8005dac:	415b      	adcs	r3, r3
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db4:	1812      	adds	r2, r2, r0
 8005db6:	eb41 0303 	adc.w	r3, r1, r3
 8005dba:	f04f 0400 	mov.w	r4, #0
 8005dbe:	f04f 0500 	mov.w	r5, #0
 8005dc2:	00dd      	lsls	r5, r3, #3
 8005dc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dc8:	00d4      	lsls	r4, r2, #3
 8005dca:	4622      	mov	r2, r4
 8005dcc:	462b      	mov	r3, r5
 8005dce:	eb12 0a00 	adds.w	sl, r2, r0
 8005dd2:	eb43 0b01 	adc.w	fp, r3, r1
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f04f 0100 	mov.w	r1, #0
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dee:	0082      	lsls	r2, r0, #2
 8005df0:	4650      	mov	r0, sl
 8005df2:	4659      	mov	r1, fp
 8005df4:	f7fa fa4c 	bl	8000290 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <UART_SetConfig+0x38c>)
 8005dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2164      	movs	r1, #100	; 0x64
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <UART_SetConfig+0x38c>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4432      	add	r2, r6
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	377c      	adds	r7, #124	; 0x7c
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	40011000 	.word	0x40011000
 8005e34:	40011400 	.word	0x40011400
 8005e38:	51eb851f 	.word	0x51eb851f

08005e3c <__errno>:
 8005e3c:	4b01      	ldr	r3, [pc, #4]	; (8005e44 <__errno+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000014 	.word	0x20000014

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f001 f9be 	bl	80071dc <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08007820 	.word	0x08007820
 8005e84:	08007820 	.word	0x08007820
 8005e88:	08007820 	.word	0x08007820
 8005e8c:	08007824 	.word	0x08007824

08005e90 <memcpy>:
 8005e90:	440a      	add	r2, r1
 8005e92:	4291      	cmp	r1, r2
 8005e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e98:	d100      	bne.n	8005e9c <memcpy+0xc>
 8005e9a:	4770      	bx	lr
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea6:	4291      	cmp	r1, r2
 8005ea8:	d1f9      	bne.n	8005e9e <memcpy+0xe>
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <memset>:
 8005eac:	4402      	add	r2, r0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <memset+0xa>
 8005eb4:	4770      	bx	lr
 8005eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eba:	e7f9      	b.n	8005eb0 <memset+0x4>

08005ebc <iprintf>:
 8005ebc:	b40f      	push	{r0, r1, r2, r3}
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <iprintf+0x2c>)
 8005ec0:	b513      	push	{r0, r1, r4, lr}
 8005ec2:	681c      	ldr	r4, [r3, #0]
 8005ec4:	b124      	cbz	r4, 8005ed0 <iprintf+0x14>
 8005ec6:	69a3      	ldr	r3, [r4, #24]
 8005ec8:	b913      	cbnz	r3, 8005ed0 <iprintf+0x14>
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fa7e 	bl	80063cc <__sinit>
 8005ed0:	ab05      	add	r3, sp, #20
 8005ed2:	9a04      	ldr	r2, [sp, #16]
 8005ed4:	68a1      	ldr	r1, [r4, #8]
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 fdab 	bl	8006a34 <_vfiprintf_r>
 8005ede:	b002      	add	sp, #8
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	b004      	add	sp, #16
 8005ee6:	4770      	bx	lr
 8005ee8:	20000014 	.word	0x20000014

08005eec <_puts_r>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	460e      	mov	r6, r1
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	b118      	cbz	r0, 8005efc <_puts_r+0x10>
 8005ef4:	6983      	ldr	r3, [r0, #24]
 8005ef6:	b90b      	cbnz	r3, 8005efc <_puts_r+0x10>
 8005ef8:	f000 fa68 	bl	80063cc <__sinit>
 8005efc:	69ab      	ldr	r3, [r5, #24]
 8005efe:	68ac      	ldr	r4, [r5, #8]
 8005f00:	b913      	cbnz	r3, 8005f08 <_puts_r+0x1c>
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 fa62 	bl	80063cc <__sinit>
 8005f08:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <_puts_r+0xd0>)
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	d120      	bne.n	8005f50 <_puts_r+0x64>
 8005f0e:	686c      	ldr	r4, [r5, #4]
 8005f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f12:	07db      	lsls	r3, r3, #31
 8005f14:	d405      	bmi.n	8005f22 <_puts_r+0x36>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	0598      	lsls	r0, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <_puts_r+0x36>
 8005f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f1e:	f000 faf3 	bl	8006508 <__retarget_lock_acquire_recursive>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	0719      	lsls	r1, r3, #28
 8005f26:	d51d      	bpl.n	8005f64 <_puts_r+0x78>
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	b1db      	cbz	r3, 8005f64 <_puts_r+0x78>
 8005f2c:	3e01      	subs	r6, #1
 8005f2e:	68a3      	ldr	r3, [r4, #8]
 8005f30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f34:	3b01      	subs	r3, #1
 8005f36:	60a3      	str	r3, [r4, #8]
 8005f38:	bb39      	cbnz	r1, 8005f8a <_puts_r+0x9e>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da38      	bge.n	8005fb0 <_puts_r+0xc4>
 8005f3e:	4622      	mov	r2, r4
 8005f40:	210a      	movs	r1, #10
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f868 	bl	8006018 <__swbuf_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d011      	beq.n	8005f70 <_puts_r+0x84>
 8005f4c:	250a      	movs	r5, #10
 8005f4e:	e011      	b.n	8005f74 <_puts_r+0x88>
 8005f50:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <_puts_r+0xd4>)
 8005f52:	429c      	cmp	r4, r3
 8005f54:	d101      	bne.n	8005f5a <_puts_r+0x6e>
 8005f56:	68ac      	ldr	r4, [r5, #8]
 8005f58:	e7da      	b.n	8005f10 <_puts_r+0x24>
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <_puts_r+0xd8>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	bf08      	it	eq
 8005f60:	68ec      	ldreq	r4, [r5, #12]
 8005f62:	e7d5      	b.n	8005f10 <_puts_r+0x24>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f8a8 	bl	80060bc <__swsetup_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d0dd      	beq.n	8005f2c <_puts_r+0x40>
 8005f70:	f04f 35ff 	mov.w	r5, #4294967295
 8005f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f76:	07da      	lsls	r2, r3, #31
 8005f78:	d405      	bmi.n	8005f86 <_puts_r+0x9a>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	059b      	lsls	r3, r3, #22
 8005f7e:	d402      	bmi.n	8005f86 <_puts_r+0x9a>
 8005f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f82:	f000 fac2 	bl	800650a <__retarget_lock_release_recursive>
 8005f86:	4628      	mov	r0, r5
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da04      	bge.n	8005f98 <_puts_r+0xac>
 8005f8e:	69a2      	ldr	r2, [r4, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	dc06      	bgt.n	8005fa2 <_puts_r+0xb6>
 8005f94:	290a      	cmp	r1, #10
 8005f96:	d004      	beq.n	8005fa2 <_puts_r+0xb6>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	6022      	str	r2, [r4, #0]
 8005f9e:	7019      	strb	r1, [r3, #0]
 8005fa0:	e7c5      	b.n	8005f2e <_puts_r+0x42>
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f837 	bl	8006018 <__swbuf_r>
 8005faa:	3001      	adds	r0, #1
 8005fac:	d1bf      	bne.n	8005f2e <_puts_r+0x42>
 8005fae:	e7df      	b.n	8005f70 <_puts_r+0x84>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	250a      	movs	r5, #10
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	701d      	strb	r5, [r3, #0]
 8005fba:	e7db      	b.n	8005f74 <_puts_r+0x88>
 8005fbc:	080077a4 	.word	0x080077a4
 8005fc0:	080077c4 	.word	0x080077c4
 8005fc4:	08007784 	.word	0x08007784

08005fc8 <puts>:
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <puts+0xc>)
 8005fca:	4601      	mov	r1, r0
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	f7ff bf8d 	b.w	8005eec <_puts_r>
 8005fd2:	bf00      	nop
 8005fd4:	20000014 	.word	0x20000014

08005fd8 <siprintf>:
 8005fd8:	b40e      	push	{r1, r2, r3}
 8005fda:	b500      	push	{lr}
 8005fdc:	b09c      	sub	sp, #112	; 0x70
 8005fde:	ab1d      	add	r3, sp, #116	; 0x74
 8005fe0:	9002      	str	r0, [sp, #8]
 8005fe2:	9006      	str	r0, [sp, #24]
 8005fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fe8:	4809      	ldr	r0, [pc, #36]	; (8006010 <siprintf+0x38>)
 8005fea:	9107      	str	r1, [sp, #28]
 8005fec:	9104      	str	r1, [sp, #16]
 8005fee:	4909      	ldr	r1, [pc, #36]	; (8006014 <siprintf+0x3c>)
 8005ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff4:	9105      	str	r1, [sp, #20]
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	a902      	add	r1, sp, #8
 8005ffc:	f000 fbf0 	bl	80067e0 <_svfiprintf_r>
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	b01c      	add	sp, #112	; 0x70
 8006008:	f85d eb04 	ldr.w	lr, [sp], #4
 800600c:	b003      	add	sp, #12
 800600e:	4770      	bx	lr
 8006010:	20000014 	.word	0x20000014
 8006014:	ffff0208 	.word	0xffff0208

08006018 <__swbuf_r>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	460e      	mov	r6, r1
 800601c:	4614      	mov	r4, r2
 800601e:	4605      	mov	r5, r0
 8006020:	b118      	cbz	r0, 800602a <__swbuf_r+0x12>
 8006022:	6983      	ldr	r3, [r0, #24]
 8006024:	b90b      	cbnz	r3, 800602a <__swbuf_r+0x12>
 8006026:	f000 f9d1 	bl	80063cc <__sinit>
 800602a:	4b21      	ldr	r3, [pc, #132]	; (80060b0 <__swbuf_r+0x98>)
 800602c:	429c      	cmp	r4, r3
 800602e:	d12b      	bne.n	8006088 <__swbuf_r+0x70>
 8006030:	686c      	ldr	r4, [r5, #4]
 8006032:	69a3      	ldr	r3, [r4, #24]
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	071a      	lsls	r2, r3, #28
 800603a:	d52f      	bpl.n	800609c <__swbuf_r+0x84>
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	b36b      	cbz	r3, 800609c <__swbuf_r+0x84>
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	6820      	ldr	r0, [r4, #0]
 8006044:	1ac0      	subs	r0, r0, r3
 8006046:	6963      	ldr	r3, [r4, #20]
 8006048:	b2f6      	uxtb	r6, r6
 800604a:	4283      	cmp	r3, r0
 800604c:	4637      	mov	r7, r6
 800604e:	dc04      	bgt.n	800605a <__swbuf_r+0x42>
 8006050:	4621      	mov	r1, r4
 8006052:	4628      	mov	r0, r5
 8006054:	f000 f926 	bl	80062a4 <_fflush_r>
 8006058:	bb30      	cbnz	r0, 80060a8 <__swbuf_r+0x90>
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	3b01      	subs	r3, #1
 800605e:	60a3      	str	r3, [r4, #8]
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	6022      	str	r2, [r4, #0]
 8006066:	701e      	strb	r6, [r3, #0]
 8006068:	6963      	ldr	r3, [r4, #20]
 800606a:	3001      	adds	r0, #1
 800606c:	4283      	cmp	r3, r0
 800606e:	d004      	beq.n	800607a <__swbuf_r+0x62>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	07db      	lsls	r3, r3, #31
 8006074:	d506      	bpl.n	8006084 <__swbuf_r+0x6c>
 8006076:	2e0a      	cmp	r6, #10
 8006078:	d104      	bne.n	8006084 <__swbuf_r+0x6c>
 800607a:	4621      	mov	r1, r4
 800607c:	4628      	mov	r0, r5
 800607e:	f000 f911 	bl	80062a4 <_fflush_r>
 8006082:	b988      	cbnz	r0, 80060a8 <__swbuf_r+0x90>
 8006084:	4638      	mov	r0, r7
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006088:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <__swbuf_r+0x9c>)
 800608a:	429c      	cmp	r4, r3
 800608c:	d101      	bne.n	8006092 <__swbuf_r+0x7a>
 800608e:	68ac      	ldr	r4, [r5, #8]
 8006090:	e7cf      	b.n	8006032 <__swbuf_r+0x1a>
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <__swbuf_r+0xa0>)
 8006094:	429c      	cmp	r4, r3
 8006096:	bf08      	it	eq
 8006098:	68ec      	ldreq	r4, [r5, #12]
 800609a:	e7ca      	b.n	8006032 <__swbuf_r+0x1a>
 800609c:	4621      	mov	r1, r4
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 f80c 	bl	80060bc <__swsetup_r>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d0cb      	beq.n	8006040 <__swbuf_r+0x28>
 80060a8:	f04f 37ff 	mov.w	r7, #4294967295
 80060ac:	e7ea      	b.n	8006084 <__swbuf_r+0x6c>
 80060ae:	bf00      	nop
 80060b0:	080077a4 	.word	0x080077a4
 80060b4:	080077c4 	.word	0x080077c4
 80060b8:	08007784 	.word	0x08007784

080060bc <__swsetup_r>:
 80060bc:	4b32      	ldr	r3, [pc, #200]	; (8006188 <__swsetup_r+0xcc>)
 80060be:	b570      	push	{r4, r5, r6, lr}
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	4606      	mov	r6, r0
 80060c4:	460c      	mov	r4, r1
 80060c6:	b125      	cbz	r5, 80060d2 <__swsetup_r+0x16>
 80060c8:	69ab      	ldr	r3, [r5, #24]
 80060ca:	b913      	cbnz	r3, 80060d2 <__swsetup_r+0x16>
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f97d 	bl	80063cc <__sinit>
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <__swsetup_r+0xd0>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d10f      	bne.n	80060f8 <__swsetup_r+0x3c>
 80060d8:	686c      	ldr	r4, [r5, #4]
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e0:	0719      	lsls	r1, r3, #28
 80060e2:	d42c      	bmi.n	800613e <__swsetup_r+0x82>
 80060e4:	06dd      	lsls	r5, r3, #27
 80060e6:	d411      	bmi.n	800610c <__swsetup_r+0x50>
 80060e8:	2309      	movs	r3, #9
 80060ea:	6033      	str	r3, [r6, #0]
 80060ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295
 80060f6:	e03e      	b.n	8006176 <__swsetup_r+0xba>
 80060f8:	4b25      	ldr	r3, [pc, #148]	; (8006190 <__swsetup_r+0xd4>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	d101      	bne.n	8006102 <__swsetup_r+0x46>
 80060fe:	68ac      	ldr	r4, [r5, #8]
 8006100:	e7eb      	b.n	80060da <__swsetup_r+0x1e>
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <__swsetup_r+0xd8>)
 8006104:	429c      	cmp	r4, r3
 8006106:	bf08      	it	eq
 8006108:	68ec      	ldreq	r4, [r5, #12]
 800610a:	e7e6      	b.n	80060da <__swsetup_r+0x1e>
 800610c:	0758      	lsls	r0, r3, #29
 800610e:	d512      	bpl.n	8006136 <__swsetup_r+0x7a>
 8006110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006112:	b141      	cbz	r1, 8006126 <__swsetup_r+0x6a>
 8006114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006118:	4299      	cmp	r1, r3
 800611a:	d002      	beq.n	8006122 <__swsetup_r+0x66>
 800611c:	4630      	mov	r0, r6
 800611e:	f000 fa59 	bl	80065d4 <_free_r>
 8006122:	2300      	movs	r3, #0
 8006124:	6363      	str	r3, [r4, #52]	; 0x34
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	2300      	movs	r3, #0
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	f043 0308 	orr.w	r3, r3, #8
 800613c:	81a3      	strh	r3, [r4, #12]
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	b94b      	cbnz	r3, 8006156 <__swsetup_r+0x9a>
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614c:	d003      	beq.n	8006156 <__swsetup_r+0x9a>
 800614e:	4621      	mov	r1, r4
 8006150:	4630      	mov	r0, r6
 8006152:	f000 f9ff 	bl	8006554 <__smakebuf_r>
 8006156:	89a0      	ldrh	r0, [r4, #12]
 8006158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800615c:	f010 0301 	ands.w	r3, r0, #1
 8006160:	d00a      	beq.n	8006178 <__swsetup_r+0xbc>
 8006162:	2300      	movs	r3, #0
 8006164:	60a3      	str	r3, [r4, #8]
 8006166:	6963      	ldr	r3, [r4, #20]
 8006168:	425b      	negs	r3, r3
 800616a:	61a3      	str	r3, [r4, #24]
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	b943      	cbnz	r3, 8006182 <__swsetup_r+0xc6>
 8006170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006174:	d1ba      	bne.n	80060ec <__swsetup_r+0x30>
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	0781      	lsls	r1, r0, #30
 800617a:	bf58      	it	pl
 800617c:	6963      	ldrpl	r3, [r4, #20]
 800617e:	60a3      	str	r3, [r4, #8]
 8006180:	e7f4      	b.n	800616c <__swsetup_r+0xb0>
 8006182:	2000      	movs	r0, #0
 8006184:	e7f7      	b.n	8006176 <__swsetup_r+0xba>
 8006186:	bf00      	nop
 8006188:	20000014 	.word	0x20000014
 800618c:	080077a4 	.word	0x080077a4
 8006190:	080077c4 	.word	0x080077c4
 8006194:	08007784 	.word	0x08007784

08006198 <__sflush_r>:
 8006198:	898a      	ldrh	r2, [r1, #12]
 800619a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	4605      	mov	r5, r0
 80061a0:	0710      	lsls	r0, r2, #28
 80061a2:	460c      	mov	r4, r1
 80061a4:	d458      	bmi.n	8006258 <__sflush_r+0xc0>
 80061a6:	684b      	ldr	r3, [r1, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	dc05      	bgt.n	80061b8 <__sflush_r+0x20>
 80061ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dc02      	bgt.n	80061b8 <__sflush_r+0x20>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	d0f9      	beq.n	80061b2 <__sflush_r+0x1a>
 80061be:	2300      	movs	r3, #0
 80061c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061c4:	682f      	ldr	r7, [r5, #0]
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	d032      	beq.n	8006230 <__sflush_r+0x98>
 80061ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	075a      	lsls	r2, r3, #29
 80061d0:	d505      	bpl.n	80061de <__sflush_r+0x46>
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	1ac0      	subs	r0, r0, r3
 80061d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061d8:	b10b      	cbz	r3, 80061de <__sflush_r+0x46>
 80061da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061dc:	1ac0      	subs	r0, r0, r3
 80061de:	2300      	movs	r3, #0
 80061e0:	4602      	mov	r2, r0
 80061e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e4:	6a21      	ldr	r1, [r4, #32]
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b0      	blx	r6
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	d106      	bne.n	80061fe <__sflush_r+0x66>
 80061f0:	6829      	ldr	r1, [r5, #0]
 80061f2:	291d      	cmp	r1, #29
 80061f4:	d82c      	bhi.n	8006250 <__sflush_r+0xb8>
 80061f6:	4a2a      	ldr	r2, [pc, #168]	; (80062a0 <__sflush_r+0x108>)
 80061f8:	40ca      	lsrs	r2, r1
 80061fa:	07d6      	lsls	r6, r2, #31
 80061fc:	d528      	bpl.n	8006250 <__sflush_r+0xb8>
 80061fe:	2200      	movs	r2, #0
 8006200:	6062      	str	r2, [r4, #4]
 8006202:	04d9      	lsls	r1, r3, #19
 8006204:	6922      	ldr	r2, [r4, #16]
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	d504      	bpl.n	8006214 <__sflush_r+0x7c>
 800620a:	1c42      	adds	r2, r0, #1
 800620c:	d101      	bne.n	8006212 <__sflush_r+0x7a>
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	b903      	cbnz	r3, 8006214 <__sflush_r+0x7c>
 8006212:	6560      	str	r0, [r4, #84]	; 0x54
 8006214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006216:	602f      	str	r7, [r5, #0]
 8006218:	2900      	cmp	r1, #0
 800621a:	d0ca      	beq.n	80061b2 <__sflush_r+0x1a>
 800621c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006220:	4299      	cmp	r1, r3
 8006222:	d002      	beq.n	800622a <__sflush_r+0x92>
 8006224:	4628      	mov	r0, r5
 8006226:	f000 f9d5 	bl	80065d4 <_free_r>
 800622a:	2000      	movs	r0, #0
 800622c:	6360      	str	r0, [r4, #52]	; 0x34
 800622e:	e7c1      	b.n	80061b4 <__sflush_r+0x1c>
 8006230:	6a21      	ldr	r1, [r4, #32]
 8006232:	2301      	movs	r3, #1
 8006234:	4628      	mov	r0, r5
 8006236:	47b0      	blx	r6
 8006238:	1c41      	adds	r1, r0, #1
 800623a:	d1c7      	bne.n	80061cc <__sflush_r+0x34>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0c4      	beq.n	80061cc <__sflush_r+0x34>
 8006242:	2b1d      	cmp	r3, #29
 8006244:	d001      	beq.n	800624a <__sflush_r+0xb2>
 8006246:	2b16      	cmp	r3, #22
 8006248:	d101      	bne.n	800624e <__sflush_r+0xb6>
 800624a:	602f      	str	r7, [r5, #0]
 800624c:	e7b1      	b.n	80061b2 <__sflush_r+0x1a>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	e7ad      	b.n	80061b4 <__sflush_r+0x1c>
 8006258:	690f      	ldr	r7, [r1, #16]
 800625a:	2f00      	cmp	r7, #0
 800625c:	d0a9      	beq.n	80061b2 <__sflush_r+0x1a>
 800625e:	0793      	lsls	r3, r2, #30
 8006260:	680e      	ldr	r6, [r1, #0]
 8006262:	bf08      	it	eq
 8006264:	694b      	ldreq	r3, [r1, #20]
 8006266:	600f      	str	r7, [r1, #0]
 8006268:	bf18      	it	ne
 800626a:	2300      	movne	r3, #0
 800626c:	eba6 0807 	sub.w	r8, r6, r7
 8006270:	608b      	str	r3, [r1, #8]
 8006272:	f1b8 0f00 	cmp.w	r8, #0
 8006276:	dd9c      	ble.n	80061b2 <__sflush_r+0x1a>
 8006278:	6a21      	ldr	r1, [r4, #32]
 800627a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800627c:	4643      	mov	r3, r8
 800627e:	463a      	mov	r2, r7
 8006280:	4628      	mov	r0, r5
 8006282:	47b0      	blx	r6
 8006284:	2800      	cmp	r0, #0
 8006286:	dc06      	bgt.n	8006296 <__sflush_r+0xfe>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628e:	81a3      	strh	r3, [r4, #12]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	e78e      	b.n	80061b4 <__sflush_r+0x1c>
 8006296:	4407      	add	r7, r0
 8006298:	eba8 0800 	sub.w	r8, r8, r0
 800629c:	e7e9      	b.n	8006272 <__sflush_r+0xda>
 800629e:	bf00      	nop
 80062a0:	20400001 	.word	0x20400001

080062a4 <_fflush_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	690b      	ldr	r3, [r1, #16]
 80062a8:	4605      	mov	r5, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b913      	cbnz	r3, 80062b4 <_fflush_r+0x10>
 80062ae:	2500      	movs	r5, #0
 80062b0:	4628      	mov	r0, r5
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	b118      	cbz	r0, 80062be <_fflush_r+0x1a>
 80062b6:	6983      	ldr	r3, [r0, #24]
 80062b8:	b90b      	cbnz	r3, 80062be <_fflush_r+0x1a>
 80062ba:	f000 f887 	bl	80063cc <__sinit>
 80062be:	4b14      	ldr	r3, [pc, #80]	; (8006310 <_fflush_r+0x6c>)
 80062c0:	429c      	cmp	r4, r3
 80062c2:	d11b      	bne.n	80062fc <_fflush_r+0x58>
 80062c4:	686c      	ldr	r4, [r5, #4]
 80062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ef      	beq.n	80062ae <_fflush_r+0xa>
 80062ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062d0:	07d0      	lsls	r0, r2, #31
 80062d2:	d404      	bmi.n	80062de <_fflush_r+0x3a>
 80062d4:	0599      	lsls	r1, r3, #22
 80062d6:	d402      	bmi.n	80062de <_fflush_r+0x3a>
 80062d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062da:	f000 f915 	bl	8006508 <__retarget_lock_acquire_recursive>
 80062de:	4628      	mov	r0, r5
 80062e0:	4621      	mov	r1, r4
 80062e2:	f7ff ff59 	bl	8006198 <__sflush_r>
 80062e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e8:	07da      	lsls	r2, r3, #31
 80062ea:	4605      	mov	r5, r0
 80062ec:	d4e0      	bmi.n	80062b0 <_fflush_r+0xc>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	059b      	lsls	r3, r3, #22
 80062f2:	d4dd      	bmi.n	80062b0 <_fflush_r+0xc>
 80062f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f6:	f000 f908 	bl	800650a <__retarget_lock_release_recursive>
 80062fa:	e7d9      	b.n	80062b0 <_fflush_r+0xc>
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <_fflush_r+0x70>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d101      	bne.n	8006306 <_fflush_r+0x62>
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	e7df      	b.n	80062c6 <_fflush_r+0x22>
 8006306:	4b04      	ldr	r3, [pc, #16]	; (8006318 <_fflush_r+0x74>)
 8006308:	429c      	cmp	r4, r3
 800630a:	bf08      	it	eq
 800630c:	68ec      	ldreq	r4, [r5, #12]
 800630e:	e7da      	b.n	80062c6 <_fflush_r+0x22>
 8006310:	080077a4 	.word	0x080077a4
 8006314:	080077c4 	.word	0x080077c4
 8006318:	08007784 	.word	0x08007784

0800631c <std>:
 800631c:	2300      	movs	r3, #0
 800631e:	b510      	push	{r4, lr}
 8006320:	4604      	mov	r4, r0
 8006322:	e9c0 3300 	strd	r3, r3, [r0]
 8006326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800632a:	6083      	str	r3, [r0, #8]
 800632c:	8181      	strh	r1, [r0, #12]
 800632e:	6643      	str	r3, [r0, #100]	; 0x64
 8006330:	81c2      	strh	r2, [r0, #14]
 8006332:	6183      	str	r3, [r0, #24]
 8006334:	4619      	mov	r1, r3
 8006336:	2208      	movs	r2, #8
 8006338:	305c      	adds	r0, #92	; 0x5c
 800633a:	f7ff fdb7 	bl	8005eac <memset>
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <std+0x38>)
 8006340:	6263      	str	r3, [r4, #36]	; 0x24
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <std+0x3c>)
 8006344:	62a3      	str	r3, [r4, #40]	; 0x28
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <std+0x40>)
 8006348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <std+0x44>)
 800634c:	6224      	str	r4, [r4, #32]
 800634e:	6323      	str	r3, [r4, #48]	; 0x30
 8006350:	bd10      	pop	{r4, pc}
 8006352:	bf00      	nop
 8006354:	08006fdd 	.word	0x08006fdd
 8006358:	08006fff 	.word	0x08006fff
 800635c:	08007037 	.word	0x08007037
 8006360:	0800705b 	.word	0x0800705b

08006364 <_cleanup_r>:
 8006364:	4901      	ldr	r1, [pc, #4]	; (800636c <_cleanup_r+0x8>)
 8006366:	f000 b8af 	b.w	80064c8 <_fwalk_reent>
 800636a:	bf00      	nop
 800636c:	080062a5 	.word	0x080062a5

08006370 <__sfmoreglue>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	1e4a      	subs	r2, r1, #1
 8006374:	2568      	movs	r5, #104	; 0x68
 8006376:	4355      	muls	r5, r2
 8006378:	460e      	mov	r6, r1
 800637a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800637e:	f000 f979 	bl	8006674 <_malloc_r>
 8006382:	4604      	mov	r4, r0
 8006384:	b140      	cbz	r0, 8006398 <__sfmoreglue+0x28>
 8006386:	2100      	movs	r1, #0
 8006388:	e9c0 1600 	strd	r1, r6, [r0]
 800638c:	300c      	adds	r0, #12
 800638e:	60a0      	str	r0, [r4, #8]
 8006390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006394:	f7ff fd8a 	bl	8005eac <memset>
 8006398:	4620      	mov	r0, r4
 800639a:	bd70      	pop	{r4, r5, r6, pc}

0800639c <__sfp_lock_acquire>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__sfp_lock_acquire+0x8>)
 800639e:	f000 b8b3 	b.w	8006508 <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	20000340 	.word	0x20000340

080063a8 <__sfp_lock_release>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__sfp_lock_release+0x8>)
 80063aa:	f000 b8ae 	b.w	800650a <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	20000340 	.word	0x20000340

080063b4 <__sinit_lock_acquire>:
 80063b4:	4801      	ldr	r0, [pc, #4]	; (80063bc <__sinit_lock_acquire+0x8>)
 80063b6:	f000 b8a7 	b.w	8006508 <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	2000033b 	.word	0x2000033b

080063c0 <__sinit_lock_release>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__sinit_lock_release+0x8>)
 80063c2:	f000 b8a2 	b.w	800650a <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	2000033b 	.word	0x2000033b

080063cc <__sinit>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	4604      	mov	r4, r0
 80063d0:	f7ff fff0 	bl	80063b4 <__sinit_lock_acquire>
 80063d4:	69a3      	ldr	r3, [r4, #24]
 80063d6:	b11b      	cbz	r3, 80063e0 <__sinit+0x14>
 80063d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063dc:	f7ff bff0 	b.w	80063c0 <__sinit_lock_release>
 80063e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063e4:	6523      	str	r3, [r4, #80]	; 0x50
 80063e6:	4b13      	ldr	r3, [pc, #76]	; (8006434 <__sinit+0x68>)
 80063e8:	4a13      	ldr	r2, [pc, #76]	; (8006438 <__sinit+0x6c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	bf04      	itt	eq
 80063f2:	2301      	moveq	r3, #1
 80063f4:	61a3      	streq	r3, [r4, #24]
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 f820 	bl	800643c <__sfp>
 80063fc:	6060      	str	r0, [r4, #4]
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 f81c 	bl	800643c <__sfp>
 8006404:	60a0      	str	r0, [r4, #8]
 8006406:	4620      	mov	r0, r4
 8006408:	f000 f818 	bl	800643c <__sfp>
 800640c:	2200      	movs	r2, #0
 800640e:	60e0      	str	r0, [r4, #12]
 8006410:	2104      	movs	r1, #4
 8006412:	6860      	ldr	r0, [r4, #4]
 8006414:	f7ff ff82 	bl	800631c <std>
 8006418:	68a0      	ldr	r0, [r4, #8]
 800641a:	2201      	movs	r2, #1
 800641c:	2109      	movs	r1, #9
 800641e:	f7ff ff7d 	bl	800631c <std>
 8006422:	68e0      	ldr	r0, [r4, #12]
 8006424:	2202      	movs	r2, #2
 8006426:	2112      	movs	r1, #18
 8006428:	f7ff ff78 	bl	800631c <std>
 800642c:	2301      	movs	r3, #1
 800642e:	61a3      	str	r3, [r4, #24]
 8006430:	e7d2      	b.n	80063d8 <__sinit+0xc>
 8006432:	bf00      	nop
 8006434:	08007780 	.word	0x08007780
 8006438:	08006365 	.word	0x08006365

0800643c <__sfp>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	4607      	mov	r7, r0
 8006440:	f7ff ffac 	bl	800639c <__sfp_lock_acquire>
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <__sfp+0x84>)
 8006446:	681e      	ldr	r6, [r3, #0]
 8006448:	69b3      	ldr	r3, [r6, #24]
 800644a:	b913      	cbnz	r3, 8006452 <__sfp+0x16>
 800644c:	4630      	mov	r0, r6
 800644e:	f7ff ffbd 	bl	80063cc <__sinit>
 8006452:	3648      	adds	r6, #72	; 0x48
 8006454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006458:	3b01      	subs	r3, #1
 800645a:	d503      	bpl.n	8006464 <__sfp+0x28>
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	b30b      	cbz	r3, 80064a4 <__sfp+0x68>
 8006460:	6836      	ldr	r6, [r6, #0]
 8006462:	e7f7      	b.n	8006454 <__sfp+0x18>
 8006464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006468:	b9d5      	cbnz	r5, 80064a0 <__sfp+0x64>
 800646a:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <__sfp+0x88>)
 800646c:	60e3      	str	r3, [r4, #12]
 800646e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006472:	6665      	str	r5, [r4, #100]	; 0x64
 8006474:	f000 f847 	bl	8006506 <__retarget_lock_init_recursive>
 8006478:	f7ff ff96 	bl	80063a8 <__sfp_lock_release>
 800647c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006484:	6025      	str	r5, [r4, #0]
 8006486:	61a5      	str	r5, [r4, #24]
 8006488:	2208      	movs	r2, #8
 800648a:	4629      	mov	r1, r5
 800648c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006490:	f7ff fd0c 	bl	8005eac <memset>
 8006494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800649c:	4620      	mov	r0, r4
 800649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a0:	3468      	adds	r4, #104	; 0x68
 80064a2:	e7d9      	b.n	8006458 <__sfp+0x1c>
 80064a4:	2104      	movs	r1, #4
 80064a6:	4638      	mov	r0, r7
 80064a8:	f7ff ff62 	bl	8006370 <__sfmoreglue>
 80064ac:	4604      	mov	r4, r0
 80064ae:	6030      	str	r0, [r6, #0]
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1d5      	bne.n	8006460 <__sfp+0x24>
 80064b4:	f7ff ff78 	bl	80063a8 <__sfp_lock_release>
 80064b8:	230c      	movs	r3, #12
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	e7ee      	b.n	800649c <__sfp+0x60>
 80064be:	bf00      	nop
 80064c0:	08007780 	.word	0x08007780
 80064c4:	ffff0001 	.word	0xffff0001

080064c8 <_fwalk_reent>:
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	4606      	mov	r6, r0
 80064ce:	4688      	mov	r8, r1
 80064d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064d4:	2700      	movs	r7, #0
 80064d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064da:	f1b9 0901 	subs.w	r9, r9, #1
 80064de:	d505      	bpl.n	80064ec <_fwalk_reent+0x24>
 80064e0:	6824      	ldr	r4, [r4, #0]
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	d1f7      	bne.n	80064d6 <_fwalk_reent+0xe>
 80064e6:	4638      	mov	r0, r7
 80064e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ec:	89ab      	ldrh	r3, [r5, #12]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d907      	bls.n	8006502 <_fwalk_reent+0x3a>
 80064f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064f6:	3301      	adds	r3, #1
 80064f8:	d003      	beq.n	8006502 <_fwalk_reent+0x3a>
 80064fa:	4629      	mov	r1, r5
 80064fc:	4630      	mov	r0, r6
 80064fe:	47c0      	blx	r8
 8006500:	4307      	orrs	r7, r0
 8006502:	3568      	adds	r5, #104	; 0x68
 8006504:	e7e9      	b.n	80064da <_fwalk_reent+0x12>

08006506 <__retarget_lock_init_recursive>:
 8006506:	4770      	bx	lr

08006508 <__retarget_lock_acquire_recursive>:
 8006508:	4770      	bx	lr

0800650a <__retarget_lock_release_recursive>:
 800650a:	4770      	bx	lr

0800650c <__swhatbuf_r>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	460e      	mov	r6, r1
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	2900      	cmp	r1, #0
 8006516:	b096      	sub	sp, #88	; 0x58
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	da07      	bge.n	800652e <__swhatbuf_r+0x22>
 800651e:	2300      	movs	r3, #0
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	89b3      	ldrh	r3, [r6, #12]
 8006524:	061a      	lsls	r2, r3, #24
 8006526:	d410      	bmi.n	800654a <__swhatbuf_r+0x3e>
 8006528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800652c:	e00e      	b.n	800654c <__swhatbuf_r+0x40>
 800652e:	466a      	mov	r2, sp
 8006530:	f000 fdba 	bl	80070a8 <_fstat_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	dbf2      	blt.n	800651e <__swhatbuf_r+0x12>
 8006538:	9a01      	ldr	r2, [sp, #4]
 800653a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800653e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006542:	425a      	negs	r2, r3
 8006544:	415a      	adcs	r2, r3
 8006546:	602a      	str	r2, [r5, #0]
 8006548:	e7ee      	b.n	8006528 <__swhatbuf_r+0x1c>
 800654a:	2340      	movs	r3, #64	; 0x40
 800654c:	2000      	movs	r0, #0
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	b016      	add	sp, #88	; 0x58
 8006552:	bd70      	pop	{r4, r5, r6, pc}

08006554 <__smakebuf_r>:
 8006554:	898b      	ldrh	r3, [r1, #12]
 8006556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006558:	079d      	lsls	r5, r3, #30
 800655a:	4606      	mov	r6, r0
 800655c:	460c      	mov	r4, r1
 800655e:	d507      	bpl.n	8006570 <__smakebuf_r+0x1c>
 8006560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	2301      	movs	r3, #1
 800656a:	6163      	str	r3, [r4, #20]
 800656c:	b002      	add	sp, #8
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	ab01      	add	r3, sp, #4
 8006572:	466a      	mov	r2, sp
 8006574:	f7ff ffca 	bl	800650c <__swhatbuf_r>
 8006578:	9900      	ldr	r1, [sp, #0]
 800657a:	4605      	mov	r5, r0
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f879 	bl	8006674 <_malloc_r>
 8006582:	b948      	cbnz	r0, 8006598 <__smakebuf_r+0x44>
 8006584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006588:	059a      	lsls	r2, r3, #22
 800658a:	d4ef      	bmi.n	800656c <__smakebuf_r+0x18>
 800658c:	f023 0303 	bic.w	r3, r3, #3
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	81a3      	strh	r3, [r4, #12]
 8006596:	e7e3      	b.n	8006560 <__smakebuf_r+0xc>
 8006598:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <__smakebuf_r+0x7c>)
 800659a:	62b3      	str	r3, [r6, #40]	; 0x28
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	6020      	str	r0, [r4, #0]
 80065a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a4:	81a3      	strh	r3, [r4, #12]
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	6163      	str	r3, [r4, #20]
 80065aa:	9b01      	ldr	r3, [sp, #4]
 80065ac:	6120      	str	r0, [r4, #16]
 80065ae:	b15b      	cbz	r3, 80065c8 <__smakebuf_r+0x74>
 80065b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b4:	4630      	mov	r0, r6
 80065b6:	f000 fd89 	bl	80070cc <_isatty_r>
 80065ba:	b128      	cbz	r0, 80065c8 <__smakebuf_r+0x74>
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	89a0      	ldrh	r0, [r4, #12]
 80065ca:	4305      	orrs	r5, r0
 80065cc:	81a5      	strh	r5, [r4, #12]
 80065ce:	e7cd      	b.n	800656c <__smakebuf_r+0x18>
 80065d0:	08006365 	.word	0x08006365

080065d4 <_free_r>:
 80065d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d048      	beq.n	800666c <_free_r+0x98>
 80065da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065de:	9001      	str	r0, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f1a1 0404 	sub.w	r4, r1, #4
 80065e6:	bfb8      	it	lt
 80065e8:	18e4      	addlt	r4, r4, r3
 80065ea:	f000 fdab 	bl	8007144 <__malloc_lock>
 80065ee:	4a20      	ldr	r2, [pc, #128]	; (8006670 <_free_r+0x9c>)
 80065f0:	9801      	ldr	r0, [sp, #4]
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	4615      	mov	r5, r2
 80065f6:	b933      	cbnz	r3, 8006606 <_free_r+0x32>
 80065f8:	6063      	str	r3, [r4, #4]
 80065fa:	6014      	str	r4, [r2, #0]
 80065fc:	b003      	add	sp, #12
 80065fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006602:	f000 bda5 	b.w	8007150 <__malloc_unlock>
 8006606:	42a3      	cmp	r3, r4
 8006608:	d90b      	bls.n	8006622 <_free_r+0x4e>
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	1862      	adds	r2, r4, r1
 800660e:	4293      	cmp	r3, r2
 8006610:	bf04      	itt	eq
 8006612:	681a      	ldreq	r2, [r3, #0]
 8006614:	685b      	ldreq	r3, [r3, #4]
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	bf04      	itt	eq
 800661a:	1852      	addeq	r2, r2, r1
 800661c:	6022      	streq	r2, [r4, #0]
 800661e:	602c      	str	r4, [r5, #0]
 8006620:	e7ec      	b.n	80065fc <_free_r+0x28>
 8006622:	461a      	mov	r2, r3
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	b10b      	cbz	r3, 800662c <_free_r+0x58>
 8006628:	42a3      	cmp	r3, r4
 800662a:	d9fa      	bls.n	8006622 <_free_r+0x4e>
 800662c:	6811      	ldr	r1, [r2, #0]
 800662e:	1855      	adds	r5, r2, r1
 8006630:	42a5      	cmp	r5, r4
 8006632:	d10b      	bne.n	800664c <_free_r+0x78>
 8006634:	6824      	ldr	r4, [r4, #0]
 8006636:	4421      	add	r1, r4
 8006638:	1854      	adds	r4, r2, r1
 800663a:	42a3      	cmp	r3, r4
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	d1dd      	bne.n	80065fc <_free_r+0x28>
 8006640:	681c      	ldr	r4, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	6053      	str	r3, [r2, #4]
 8006646:	4421      	add	r1, r4
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	e7d7      	b.n	80065fc <_free_r+0x28>
 800664c:	d902      	bls.n	8006654 <_free_r+0x80>
 800664e:	230c      	movs	r3, #12
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	e7d3      	b.n	80065fc <_free_r+0x28>
 8006654:	6825      	ldr	r5, [r4, #0]
 8006656:	1961      	adds	r1, r4, r5
 8006658:	428b      	cmp	r3, r1
 800665a:	bf04      	itt	eq
 800665c:	6819      	ldreq	r1, [r3, #0]
 800665e:	685b      	ldreq	r3, [r3, #4]
 8006660:	6063      	str	r3, [r4, #4]
 8006662:	bf04      	itt	eq
 8006664:	1949      	addeq	r1, r1, r5
 8006666:	6021      	streq	r1, [r4, #0]
 8006668:	6054      	str	r4, [r2, #4]
 800666a:	e7c7      	b.n	80065fc <_free_r+0x28>
 800666c:	b003      	add	sp, #12
 800666e:	bd30      	pop	{r4, r5, pc}
 8006670:	20000144 	.word	0x20000144

08006674 <_malloc_r>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	1ccd      	adds	r5, r1, #3
 8006678:	f025 0503 	bic.w	r5, r5, #3
 800667c:	3508      	adds	r5, #8
 800667e:	2d0c      	cmp	r5, #12
 8006680:	bf38      	it	cc
 8006682:	250c      	movcc	r5, #12
 8006684:	2d00      	cmp	r5, #0
 8006686:	4606      	mov	r6, r0
 8006688:	db01      	blt.n	800668e <_malloc_r+0x1a>
 800668a:	42a9      	cmp	r1, r5
 800668c:	d903      	bls.n	8006696 <_malloc_r+0x22>
 800668e:	230c      	movs	r3, #12
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	2000      	movs	r0, #0
 8006694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006696:	f000 fd55 	bl	8007144 <__malloc_lock>
 800669a:	4921      	ldr	r1, [pc, #132]	; (8006720 <_malloc_r+0xac>)
 800669c:	680a      	ldr	r2, [r1, #0]
 800669e:	4614      	mov	r4, r2
 80066a0:	b99c      	cbnz	r4, 80066ca <_malloc_r+0x56>
 80066a2:	4f20      	ldr	r7, [pc, #128]	; (8006724 <_malloc_r+0xb0>)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	b923      	cbnz	r3, 80066b2 <_malloc_r+0x3e>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4630      	mov	r0, r6
 80066ac:	f000 fc86 	bl	8006fbc <_sbrk_r>
 80066b0:	6038      	str	r0, [r7, #0]
 80066b2:	4629      	mov	r1, r5
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 fc81 	bl	8006fbc <_sbrk_r>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d123      	bne.n	8006706 <_malloc_r+0x92>
 80066be:	230c      	movs	r3, #12
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	4630      	mov	r0, r6
 80066c4:	f000 fd44 	bl	8007150 <__malloc_unlock>
 80066c8:	e7e3      	b.n	8006692 <_malloc_r+0x1e>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	1b5b      	subs	r3, r3, r5
 80066ce:	d417      	bmi.n	8006700 <_malloc_r+0x8c>
 80066d0:	2b0b      	cmp	r3, #11
 80066d2:	d903      	bls.n	80066dc <_malloc_r+0x68>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	441c      	add	r4, r3
 80066d8:	6025      	str	r5, [r4, #0]
 80066da:	e004      	b.n	80066e6 <_malloc_r+0x72>
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	42a2      	cmp	r2, r4
 80066e0:	bf0c      	ite	eq
 80066e2:	600b      	streq	r3, [r1, #0]
 80066e4:	6053      	strne	r3, [r2, #4]
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 fd32 	bl	8007150 <__malloc_unlock>
 80066ec:	f104 000b 	add.w	r0, r4, #11
 80066f0:	1d23      	adds	r3, r4, #4
 80066f2:	f020 0007 	bic.w	r0, r0, #7
 80066f6:	1ac2      	subs	r2, r0, r3
 80066f8:	d0cc      	beq.n	8006694 <_malloc_r+0x20>
 80066fa:	1a1b      	subs	r3, r3, r0
 80066fc:	50a3      	str	r3, [r4, r2]
 80066fe:	e7c9      	b.n	8006694 <_malloc_r+0x20>
 8006700:	4622      	mov	r2, r4
 8006702:	6864      	ldr	r4, [r4, #4]
 8006704:	e7cc      	b.n	80066a0 <_malloc_r+0x2c>
 8006706:	1cc4      	adds	r4, r0, #3
 8006708:	f024 0403 	bic.w	r4, r4, #3
 800670c:	42a0      	cmp	r0, r4
 800670e:	d0e3      	beq.n	80066d8 <_malloc_r+0x64>
 8006710:	1a21      	subs	r1, r4, r0
 8006712:	4630      	mov	r0, r6
 8006714:	f000 fc52 	bl	8006fbc <_sbrk_r>
 8006718:	3001      	adds	r0, #1
 800671a:	d1dd      	bne.n	80066d8 <_malloc_r+0x64>
 800671c:	e7cf      	b.n	80066be <_malloc_r+0x4a>
 800671e:	bf00      	nop
 8006720:	20000144 	.word	0x20000144
 8006724:	20000148 	.word	0x20000148

08006728 <__ssputs_r>:
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	688e      	ldr	r6, [r1, #8]
 800672e:	429e      	cmp	r6, r3
 8006730:	4682      	mov	sl, r0
 8006732:	460c      	mov	r4, r1
 8006734:	4690      	mov	r8, r2
 8006736:	461f      	mov	r7, r3
 8006738:	d838      	bhi.n	80067ac <__ssputs_r+0x84>
 800673a:	898a      	ldrh	r2, [r1, #12]
 800673c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006740:	d032      	beq.n	80067a8 <__ssputs_r+0x80>
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	6909      	ldr	r1, [r1, #16]
 8006746:	eba5 0901 	sub.w	r9, r5, r1
 800674a:	6965      	ldr	r5, [r4, #20]
 800674c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006754:	3301      	adds	r3, #1
 8006756:	444b      	add	r3, r9
 8006758:	106d      	asrs	r5, r5, #1
 800675a:	429d      	cmp	r5, r3
 800675c:	bf38      	it	cc
 800675e:	461d      	movcc	r5, r3
 8006760:	0553      	lsls	r3, r2, #21
 8006762:	d531      	bpl.n	80067c8 <__ssputs_r+0xa0>
 8006764:	4629      	mov	r1, r5
 8006766:	f7ff ff85 	bl	8006674 <_malloc_r>
 800676a:	4606      	mov	r6, r0
 800676c:	b950      	cbnz	r0, 8006784 <__ssputs_r+0x5c>
 800676e:	230c      	movs	r3, #12
 8006770:	f8ca 3000 	str.w	r3, [sl]
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	6921      	ldr	r1, [r4, #16]
 8006786:	464a      	mov	r2, r9
 8006788:	f7ff fb82 	bl	8005e90 <memcpy>
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	6126      	str	r6, [r4, #16]
 800679a:	6165      	str	r5, [r4, #20]
 800679c:	444e      	add	r6, r9
 800679e:	eba5 0509 	sub.w	r5, r5, r9
 80067a2:	6026      	str	r6, [r4, #0]
 80067a4:	60a5      	str	r5, [r4, #8]
 80067a6:	463e      	mov	r6, r7
 80067a8:	42be      	cmp	r6, r7
 80067aa:	d900      	bls.n	80067ae <__ssputs_r+0x86>
 80067ac:	463e      	mov	r6, r7
 80067ae:	4632      	mov	r2, r6
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	4641      	mov	r1, r8
 80067b4:	f000 fcac 	bl	8007110 <memmove>
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	4432      	add	r2, r6
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	2000      	movs	r0, #0
 80067c6:	e7db      	b.n	8006780 <__ssputs_r+0x58>
 80067c8:	462a      	mov	r2, r5
 80067ca:	f000 fcc7 	bl	800715c <_realloc_r>
 80067ce:	4606      	mov	r6, r0
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d1e1      	bne.n	8006798 <__ssputs_r+0x70>
 80067d4:	6921      	ldr	r1, [r4, #16]
 80067d6:	4650      	mov	r0, sl
 80067d8:	f7ff fefc 	bl	80065d4 <_free_r>
 80067dc:	e7c7      	b.n	800676e <__ssputs_r+0x46>
	...

080067e0 <_svfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4698      	mov	r8, r3
 80067e6:	898b      	ldrh	r3, [r1, #12]
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	b09d      	sub	sp, #116	; 0x74
 80067ec:	4607      	mov	r7, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	d50e      	bpl.n	8006812 <_svfiprintf_r+0x32>
 80067f4:	690b      	ldr	r3, [r1, #16]
 80067f6:	b963      	cbnz	r3, 8006812 <_svfiprintf_r+0x32>
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	f7ff ff3b 	bl	8006674 <_malloc_r>
 80067fe:	6028      	str	r0, [r5, #0]
 8006800:	6128      	str	r0, [r5, #16]
 8006802:	b920      	cbnz	r0, 800680e <_svfiprintf_r+0x2e>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	e0d1      	b.n	80069b2 <_svfiprintf_r+0x1d2>
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	616b      	str	r3, [r5, #20]
 8006812:	2300      	movs	r3, #0
 8006814:	9309      	str	r3, [sp, #36]	; 0x24
 8006816:	2320      	movs	r3, #32
 8006818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800681c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006820:	2330      	movs	r3, #48	; 0x30
 8006822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069cc <_svfiprintf_r+0x1ec>
 8006826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800682a:	f04f 0901 	mov.w	r9, #1
 800682e:	4623      	mov	r3, r4
 8006830:	469a      	mov	sl, r3
 8006832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006836:	b10a      	cbz	r2, 800683c <_svfiprintf_r+0x5c>
 8006838:	2a25      	cmp	r2, #37	; 0x25
 800683a:	d1f9      	bne.n	8006830 <_svfiprintf_r+0x50>
 800683c:	ebba 0b04 	subs.w	fp, sl, r4
 8006840:	d00b      	beq.n	800685a <_svfiprintf_r+0x7a>
 8006842:	465b      	mov	r3, fp
 8006844:	4622      	mov	r2, r4
 8006846:	4629      	mov	r1, r5
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ff6d 	bl	8006728 <__ssputs_r>
 800684e:	3001      	adds	r0, #1
 8006850:	f000 80aa 	beq.w	80069a8 <_svfiprintf_r+0x1c8>
 8006854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006856:	445a      	add	r2, fp
 8006858:	9209      	str	r2, [sp, #36]	; 0x24
 800685a:	f89a 3000 	ldrb.w	r3, [sl]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a2 	beq.w	80069a8 <_svfiprintf_r+0x1c8>
 8006864:	2300      	movs	r3, #0
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800686e:	f10a 0a01 	add.w	sl, sl, #1
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	9307      	str	r3, [sp, #28]
 8006876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800687a:	931a      	str	r3, [sp, #104]	; 0x68
 800687c:	4654      	mov	r4, sl
 800687e:	2205      	movs	r2, #5
 8006880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006884:	4851      	ldr	r0, [pc, #324]	; (80069cc <_svfiprintf_r+0x1ec>)
 8006886:	f7f9 fcb3 	bl	80001f0 <memchr>
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	b9d8      	cbnz	r0, 80068c6 <_svfiprintf_r+0xe6>
 800688e:	06d0      	lsls	r0, r2, #27
 8006890:	bf44      	itt	mi
 8006892:	2320      	movmi	r3, #32
 8006894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006898:	0711      	lsls	r1, r2, #28
 800689a:	bf44      	itt	mi
 800689c:	232b      	movmi	r3, #43	; 0x2b
 800689e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a2:	f89a 3000 	ldrb.w	r3, [sl]
 80068a6:	2b2a      	cmp	r3, #42	; 0x2a
 80068a8:	d015      	beq.n	80068d6 <_svfiprintf_r+0xf6>
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	4654      	mov	r4, sl
 80068ae:	2000      	movs	r0, #0
 80068b0:	f04f 0c0a 	mov.w	ip, #10
 80068b4:	4621      	mov	r1, r4
 80068b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ba:	3b30      	subs	r3, #48	; 0x30
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d94e      	bls.n	800695e <_svfiprintf_r+0x17e>
 80068c0:	b1b0      	cbz	r0, 80068f0 <_svfiprintf_r+0x110>
 80068c2:	9207      	str	r2, [sp, #28]
 80068c4:	e014      	b.n	80068f0 <_svfiprintf_r+0x110>
 80068c6:	eba0 0308 	sub.w	r3, r0, r8
 80068ca:	fa09 f303 	lsl.w	r3, r9, r3
 80068ce:	4313      	orrs	r3, r2
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	46a2      	mov	sl, r4
 80068d4:	e7d2      	b.n	800687c <_svfiprintf_r+0x9c>
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	1d19      	adds	r1, r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	9103      	str	r1, [sp, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfbb      	ittet	lt
 80068e2:	425b      	neglt	r3, r3
 80068e4:	f042 0202 	orrlt.w	r2, r2, #2
 80068e8:	9307      	strge	r3, [sp, #28]
 80068ea:	9307      	strlt	r3, [sp, #28]
 80068ec:	bfb8      	it	lt
 80068ee:	9204      	strlt	r2, [sp, #16]
 80068f0:	7823      	ldrb	r3, [r4, #0]
 80068f2:	2b2e      	cmp	r3, #46	; 0x2e
 80068f4:	d10c      	bne.n	8006910 <_svfiprintf_r+0x130>
 80068f6:	7863      	ldrb	r3, [r4, #1]
 80068f8:	2b2a      	cmp	r3, #42	; 0x2a
 80068fa:	d135      	bne.n	8006968 <_svfiprintf_r+0x188>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	1d1a      	adds	r2, r3, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	9203      	str	r2, [sp, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	bfb8      	it	lt
 8006908:	f04f 33ff 	movlt.w	r3, #4294967295
 800690c:	3402      	adds	r4, #2
 800690e:	9305      	str	r3, [sp, #20]
 8006910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069dc <_svfiprintf_r+0x1fc>
 8006914:	7821      	ldrb	r1, [r4, #0]
 8006916:	2203      	movs	r2, #3
 8006918:	4650      	mov	r0, sl
 800691a:	f7f9 fc69 	bl	80001f0 <memchr>
 800691e:	b140      	cbz	r0, 8006932 <_svfiprintf_r+0x152>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	eba0 000a 	sub.w	r0, r0, sl
 8006926:	fa03 f000 	lsl.w	r0, r3, r0
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	4303      	orrs	r3, r0
 800692e:	3401      	adds	r4, #1
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006936:	4826      	ldr	r0, [pc, #152]	; (80069d0 <_svfiprintf_r+0x1f0>)
 8006938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800693c:	2206      	movs	r2, #6
 800693e:	f7f9 fc57 	bl	80001f0 <memchr>
 8006942:	2800      	cmp	r0, #0
 8006944:	d038      	beq.n	80069b8 <_svfiprintf_r+0x1d8>
 8006946:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <_svfiprintf_r+0x1f4>)
 8006948:	bb1b      	cbnz	r3, 8006992 <_svfiprintf_r+0x1b2>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	3307      	adds	r3, #7
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	3308      	adds	r3, #8
 8006954:	9303      	str	r3, [sp, #12]
 8006956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006958:	4433      	add	r3, r6
 800695a:	9309      	str	r3, [sp, #36]	; 0x24
 800695c:	e767      	b.n	800682e <_svfiprintf_r+0x4e>
 800695e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006962:	460c      	mov	r4, r1
 8006964:	2001      	movs	r0, #1
 8006966:	e7a5      	b.n	80068b4 <_svfiprintf_r+0xd4>
 8006968:	2300      	movs	r3, #0
 800696a:	3401      	adds	r4, #1
 800696c:	9305      	str	r3, [sp, #20]
 800696e:	4619      	mov	r1, r3
 8006970:	f04f 0c0a 	mov.w	ip, #10
 8006974:	4620      	mov	r0, r4
 8006976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697a:	3a30      	subs	r2, #48	; 0x30
 800697c:	2a09      	cmp	r2, #9
 800697e:	d903      	bls.n	8006988 <_svfiprintf_r+0x1a8>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0c5      	beq.n	8006910 <_svfiprintf_r+0x130>
 8006984:	9105      	str	r1, [sp, #20]
 8006986:	e7c3      	b.n	8006910 <_svfiprintf_r+0x130>
 8006988:	fb0c 2101 	mla	r1, ip, r1, r2
 800698c:	4604      	mov	r4, r0
 800698e:	2301      	movs	r3, #1
 8006990:	e7f0      	b.n	8006974 <_svfiprintf_r+0x194>
 8006992:	ab03      	add	r3, sp, #12
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	462a      	mov	r2, r5
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <_svfiprintf_r+0x1f8>)
 800699a:	a904      	add	r1, sp, #16
 800699c:	4638      	mov	r0, r7
 800699e:	f3af 8000 	nop.w
 80069a2:	1c42      	adds	r2, r0, #1
 80069a4:	4606      	mov	r6, r0
 80069a6:	d1d6      	bne.n	8006956 <_svfiprintf_r+0x176>
 80069a8:	89ab      	ldrh	r3, [r5, #12]
 80069aa:	065b      	lsls	r3, r3, #25
 80069ac:	f53f af2c 	bmi.w	8006808 <_svfiprintf_r+0x28>
 80069b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b2:	b01d      	add	sp, #116	; 0x74
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	ab03      	add	r3, sp, #12
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	462a      	mov	r2, r5
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <_svfiprintf_r+0x1f8>)
 80069c0:	a904      	add	r1, sp, #16
 80069c2:	4638      	mov	r0, r7
 80069c4:	f000 f9d4 	bl	8006d70 <_printf_i>
 80069c8:	e7eb      	b.n	80069a2 <_svfiprintf_r+0x1c2>
 80069ca:	bf00      	nop
 80069cc:	080077e4 	.word	0x080077e4
 80069d0:	080077ee 	.word	0x080077ee
 80069d4:	00000000 	.word	0x00000000
 80069d8:	08006729 	.word	0x08006729
 80069dc:	080077ea 	.word	0x080077ea

080069e0 <__sfputc_r>:
 80069e0:	6893      	ldr	r3, [r2, #8]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	b410      	push	{r4}
 80069e8:	6093      	str	r3, [r2, #8]
 80069ea:	da08      	bge.n	80069fe <__sfputc_r+0x1e>
 80069ec:	6994      	ldr	r4, [r2, #24]
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	db01      	blt.n	80069f6 <__sfputc_r+0x16>
 80069f2:	290a      	cmp	r1, #10
 80069f4:	d103      	bne.n	80069fe <__sfputc_r+0x1e>
 80069f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069fa:	f7ff bb0d 	b.w	8006018 <__swbuf_r>
 80069fe:	6813      	ldr	r3, [r2, #0]
 8006a00:	1c58      	adds	r0, r3, #1
 8006a02:	6010      	str	r0, [r2, #0]
 8006a04:	7019      	strb	r1, [r3, #0]
 8006a06:	4608      	mov	r0, r1
 8006a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <__sfputs_r>:
 8006a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a10:	4606      	mov	r6, r0
 8006a12:	460f      	mov	r7, r1
 8006a14:	4614      	mov	r4, r2
 8006a16:	18d5      	adds	r5, r2, r3
 8006a18:	42ac      	cmp	r4, r5
 8006a1a:	d101      	bne.n	8006a20 <__sfputs_r+0x12>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	e007      	b.n	8006a30 <__sfputs_r+0x22>
 8006a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a24:	463a      	mov	r2, r7
 8006a26:	4630      	mov	r0, r6
 8006a28:	f7ff ffda 	bl	80069e0 <__sfputc_r>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d1f3      	bne.n	8006a18 <__sfputs_r+0xa>
 8006a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a34 <_vfiprintf_r>:
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	460d      	mov	r5, r1
 8006a3a:	b09d      	sub	sp, #116	; 0x74
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	4698      	mov	r8, r3
 8006a40:	4606      	mov	r6, r0
 8006a42:	b118      	cbz	r0, 8006a4c <_vfiprintf_r+0x18>
 8006a44:	6983      	ldr	r3, [r0, #24]
 8006a46:	b90b      	cbnz	r3, 8006a4c <_vfiprintf_r+0x18>
 8006a48:	f7ff fcc0 	bl	80063cc <__sinit>
 8006a4c:	4b89      	ldr	r3, [pc, #548]	; (8006c74 <_vfiprintf_r+0x240>)
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	d11b      	bne.n	8006a8a <_vfiprintf_r+0x56>
 8006a52:	6875      	ldr	r5, [r6, #4]
 8006a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a56:	07d9      	lsls	r1, r3, #31
 8006a58:	d405      	bmi.n	8006a66 <_vfiprintf_r+0x32>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	059a      	lsls	r2, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_vfiprintf_r+0x32>
 8006a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a62:	f7ff fd51 	bl	8006508 <__retarget_lock_acquire_recursive>
 8006a66:	89ab      	ldrh	r3, [r5, #12]
 8006a68:	071b      	lsls	r3, r3, #28
 8006a6a:	d501      	bpl.n	8006a70 <_vfiprintf_r+0x3c>
 8006a6c:	692b      	ldr	r3, [r5, #16]
 8006a6e:	b9eb      	cbnz	r3, 8006aac <_vfiprintf_r+0x78>
 8006a70:	4629      	mov	r1, r5
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff fb22 	bl	80060bc <__swsetup_r>
 8006a78:	b1c0      	cbz	r0, 8006aac <_vfiprintf_r+0x78>
 8006a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a7c:	07dc      	lsls	r4, r3, #31
 8006a7e:	d50e      	bpl.n	8006a9e <_vfiprintf_r+0x6a>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	b01d      	add	sp, #116	; 0x74
 8006a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8a:	4b7b      	ldr	r3, [pc, #492]	; (8006c78 <_vfiprintf_r+0x244>)
 8006a8c:	429d      	cmp	r5, r3
 8006a8e:	d101      	bne.n	8006a94 <_vfiprintf_r+0x60>
 8006a90:	68b5      	ldr	r5, [r6, #8]
 8006a92:	e7df      	b.n	8006a54 <_vfiprintf_r+0x20>
 8006a94:	4b79      	ldr	r3, [pc, #484]	; (8006c7c <_vfiprintf_r+0x248>)
 8006a96:	429d      	cmp	r5, r3
 8006a98:	bf08      	it	eq
 8006a9a:	68f5      	ldreq	r5, [r6, #12]
 8006a9c:	e7da      	b.n	8006a54 <_vfiprintf_r+0x20>
 8006a9e:	89ab      	ldrh	r3, [r5, #12]
 8006aa0:	0598      	lsls	r0, r3, #22
 8006aa2:	d4ed      	bmi.n	8006a80 <_vfiprintf_r+0x4c>
 8006aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aa6:	f7ff fd30 	bl	800650a <__retarget_lock_release_recursive>
 8006aaa:	e7e9      	b.n	8006a80 <_vfiprintf_r+0x4c>
 8006aac:	2300      	movs	r3, #0
 8006aae:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aba:	2330      	movs	r3, #48	; 0x30
 8006abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c80 <_vfiprintf_r+0x24c>
 8006ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ac4:	f04f 0901 	mov.w	r9, #1
 8006ac8:	4623      	mov	r3, r4
 8006aca:	469a      	mov	sl, r3
 8006acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad0:	b10a      	cbz	r2, 8006ad6 <_vfiprintf_r+0xa2>
 8006ad2:	2a25      	cmp	r2, #37	; 0x25
 8006ad4:	d1f9      	bne.n	8006aca <_vfiprintf_r+0x96>
 8006ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8006ada:	d00b      	beq.n	8006af4 <_vfiprintf_r+0xc0>
 8006adc:	465b      	mov	r3, fp
 8006ade:	4622      	mov	r2, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff93 	bl	8006a0e <__sfputs_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f000 80aa 	beq.w	8006c42 <_vfiprintf_r+0x20e>
 8006aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af0:	445a      	add	r2, fp
 8006af2:	9209      	str	r2, [sp, #36]	; 0x24
 8006af4:	f89a 3000 	ldrb.w	r3, [sl]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80a2 	beq.w	8006c42 <_vfiprintf_r+0x20e>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f04f 32ff 	mov.w	r2, #4294967295
 8006b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b08:	f10a 0a01 	add.w	sl, sl, #1
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b14:	931a      	str	r3, [sp, #104]	; 0x68
 8006b16:	4654      	mov	r4, sl
 8006b18:	2205      	movs	r2, #5
 8006b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1e:	4858      	ldr	r0, [pc, #352]	; (8006c80 <_vfiprintf_r+0x24c>)
 8006b20:	f7f9 fb66 	bl	80001f0 <memchr>
 8006b24:	9a04      	ldr	r2, [sp, #16]
 8006b26:	b9d8      	cbnz	r0, 8006b60 <_vfiprintf_r+0x12c>
 8006b28:	06d1      	lsls	r1, r2, #27
 8006b2a:	bf44      	itt	mi
 8006b2c:	2320      	movmi	r3, #32
 8006b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b32:	0713      	lsls	r3, r2, #28
 8006b34:	bf44      	itt	mi
 8006b36:	232b      	movmi	r3, #43	; 0x2b
 8006b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b40:	2b2a      	cmp	r3, #42	; 0x2a
 8006b42:	d015      	beq.n	8006b70 <_vfiprintf_r+0x13c>
 8006b44:	9a07      	ldr	r2, [sp, #28]
 8006b46:	4654      	mov	r4, sl
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f04f 0c0a 	mov.w	ip, #10
 8006b4e:	4621      	mov	r1, r4
 8006b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b54:	3b30      	subs	r3, #48	; 0x30
 8006b56:	2b09      	cmp	r3, #9
 8006b58:	d94e      	bls.n	8006bf8 <_vfiprintf_r+0x1c4>
 8006b5a:	b1b0      	cbz	r0, 8006b8a <_vfiprintf_r+0x156>
 8006b5c:	9207      	str	r2, [sp, #28]
 8006b5e:	e014      	b.n	8006b8a <_vfiprintf_r+0x156>
 8006b60:	eba0 0308 	sub.w	r3, r0, r8
 8006b64:	fa09 f303 	lsl.w	r3, r9, r3
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	46a2      	mov	sl, r4
 8006b6e:	e7d2      	b.n	8006b16 <_vfiprintf_r+0xe2>
 8006b70:	9b03      	ldr	r3, [sp, #12]
 8006b72:	1d19      	adds	r1, r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	9103      	str	r1, [sp, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bfbb      	ittet	lt
 8006b7c:	425b      	neglt	r3, r3
 8006b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b82:	9307      	strge	r3, [sp, #28]
 8006b84:	9307      	strlt	r3, [sp, #28]
 8006b86:	bfb8      	it	lt
 8006b88:	9204      	strlt	r2, [sp, #16]
 8006b8a:	7823      	ldrb	r3, [r4, #0]
 8006b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b8e:	d10c      	bne.n	8006baa <_vfiprintf_r+0x176>
 8006b90:	7863      	ldrb	r3, [r4, #1]
 8006b92:	2b2a      	cmp	r3, #42	; 0x2a
 8006b94:	d135      	bne.n	8006c02 <_vfiprintf_r+0x1ce>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	1d1a      	adds	r2, r3, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	9203      	str	r2, [sp, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bfb8      	it	lt
 8006ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ba6:	3402      	adds	r4, #2
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c90 <_vfiprintf_r+0x25c>
 8006bae:	7821      	ldrb	r1, [r4, #0]
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	f7f9 fb1c 	bl	80001f0 <memchr>
 8006bb8:	b140      	cbz	r0, 8006bcc <_vfiprintf_r+0x198>
 8006bba:	2340      	movs	r3, #64	; 0x40
 8006bbc:	eba0 000a 	sub.w	r0, r0, sl
 8006bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	4303      	orrs	r3, r0
 8006bc8:	3401      	adds	r4, #1
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd0:	482c      	ldr	r0, [pc, #176]	; (8006c84 <_vfiprintf_r+0x250>)
 8006bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bd6:	2206      	movs	r2, #6
 8006bd8:	f7f9 fb0a 	bl	80001f0 <memchr>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d03f      	beq.n	8006c60 <_vfiprintf_r+0x22c>
 8006be0:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <_vfiprintf_r+0x254>)
 8006be2:	bb1b      	cbnz	r3, 8006c2c <_vfiprintf_r+0x1f8>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	3307      	adds	r3, #7
 8006be8:	f023 0307 	bic.w	r3, r3, #7
 8006bec:	3308      	adds	r3, #8
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf2:	443b      	add	r3, r7
 8006bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf6:	e767      	b.n	8006ac8 <_vfiprintf_r+0x94>
 8006bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	2001      	movs	r0, #1
 8006c00:	e7a5      	b.n	8006b4e <_vfiprintf_r+0x11a>
 8006c02:	2300      	movs	r3, #0
 8006c04:	3401      	adds	r4, #1
 8006c06:	9305      	str	r3, [sp, #20]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f04f 0c0a 	mov.w	ip, #10
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c14:	3a30      	subs	r2, #48	; 0x30
 8006c16:	2a09      	cmp	r2, #9
 8006c18:	d903      	bls.n	8006c22 <_vfiprintf_r+0x1ee>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0c5      	beq.n	8006baa <_vfiprintf_r+0x176>
 8006c1e:	9105      	str	r1, [sp, #20]
 8006c20:	e7c3      	b.n	8006baa <_vfiprintf_r+0x176>
 8006c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c26:	4604      	mov	r4, r0
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e7f0      	b.n	8006c0e <_vfiprintf_r+0x1da>
 8006c2c:	ab03      	add	r3, sp, #12
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	462a      	mov	r2, r5
 8006c32:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <_vfiprintf_r+0x258>)
 8006c34:	a904      	add	r1, sp, #16
 8006c36:	4630      	mov	r0, r6
 8006c38:	f3af 8000 	nop.w
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	1c78      	adds	r0, r7, #1
 8006c40:	d1d6      	bne.n	8006bf0 <_vfiprintf_r+0x1bc>
 8006c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c44:	07d9      	lsls	r1, r3, #31
 8006c46:	d405      	bmi.n	8006c54 <_vfiprintf_r+0x220>
 8006c48:	89ab      	ldrh	r3, [r5, #12]
 8006c4a:	059a      	lsls	r2, r3, #22
 8006c4c:	d402      	bmi.n	8006c54 <_vfiprintf_r+0x220>
 8006c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c50:	f7ff fc5b 	bl	800650a <__retarget_lock_release_recursive>
 8006c54:	89ab      	ldrh	r3, [r5, #12]
 8006c56:	065b      	lsls	r3, r3, #25
 8006c58:	f53f af12 	bmi.w	8006a80 <_vfiprintf_r+0x4c>
 8006c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c5e:	e711      	b.n	8006a84 <_vfiprintf_r+0x50>
 8006c60:	ab03      	add	r3, sp, #12
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	462a      	mov	r2, r5
 8006c66:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <_vfiprintf_r+0x258>)
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f880 	bl	8006d70 <_printf_i>
 8006c70:	e7e4      	b.n	8006c3c <_vfiprintf_r+0x208>
 8006c72:	bf00      	nop
 8006c74:	080077a4 	.word	0x080077a4
 8006c78:	080077c4 	.word	0x080077c4
 8006c7c:	08007784 	.word	0x08007784
 8006c80:	080077e4 	.word	0x080077e4
 8006c84:	080077ee 	.word	0x080077ee
 8006c88:	00000000 	.word	0x00000000
 8006c8c:	08006a0f 	.word	0x08006a0f
 8006c90:	080077ea 	.word	0x080077ea

08006c94 <_printf_common>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	4616      	mov	r6, r2
 8006c9a:	4699      	mov	r9, r3
 8006c9c:	688a      	ldr	r2, [r1, #8]
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	bfb8      	it	lt
 8006ca8:	4613      	movlt	r3, r2
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b10a      	cbz	r2, 8006cba <_printf_common+0x26>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	0699      	lsls	r1, r3, #26
 8006cbe:	bf42      	ittt	mi
 8006cc0:	6833      	ldrmi	r3, [r6, #0]
 8006cc2:	3302      	addmi	r3, #2
 8006cc4:	6033      	strmi	r3, [r6, #0]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	f015 0506 	ands.w	r5, r5, #6
 8006ccc:	d106      	bne.n	8006cdc <_printf_common+0x48>
 8006cce:	f104 0a19 	add.w	sl, r4, #25
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	6832      	ldr	r2, [r6, #0]
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	dc26      	bgt.n	8006d2a <_printf_common+0x96>
 8006cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ce0:	1e13      	subs	r3, r2, #0
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	bf18      	it	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	0692      	lsls	r2, r2, #26
 8006cea:	d42b      	bmi.n	8006d44 <_printf_common+0xb0>
 8006cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	47c0      	blx	r8
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d01e      	beq.n	8006d38 <_printf_common+0xa4>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	68e5      	ldr	r5, [r4, #12]
 8006cfe:	6832      	ldr	r2, [r6, #0]
 8006d00:	f003 0306 	and.w	r3, r3, #6
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	bf08      	it	eq
 8006d08:	1aad      	subeq	r5, r5, r2
 8006d0a:	68a3      	ldr	r3, [r4, #8]
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	bf0c      	ite	eq
 8006d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d14:	2500      	movne	r5, #0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	bfc4      	itt	gt
 8006d1a:	1a9b      	subgt	r3, r3, r2
 8006d1c:	18ed      	addgt	r5, r5, r3
 8006d1e:	2600      	movs	r6, #0
 8006d20:	341a      	adds	r4, #26
 8006d22:	42b5      	cmp	r5, r6
 8006d24:	d11a      	bne.n	8006d5c <_printf_common+0xc8>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e008      	b.n	8006d3c <_printf_common+0xa8>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4638      	mov	r0, r7
 8006d32:	47c0      	blx	r8
 8006d34:	3001      	adds	r0, #1
 8006d36:	d103      	bne.n	8006d40 <_printf_common+0xac>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	3501      	adds	r5, #1
 8006d42:	e7c6      	b.n	8006cd2 <_printf_common+0x3e>
 8006d44:	18e1      	adds	r1, r4, r3
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	2030      	movs	r0, #48	; 0x30
 8006d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d4e:	4422      	add	r2, r4
 8006d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d58:	3302      	adds	r3, #2
 8006d5a:	e7c7      	b.n	8006cec <_printf_common+0x58>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4649      	mov	r1, r9
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c0      	blx	r8
 8006d66:	3001      	adds	r0, #1
 8006d68:	d0e6      	beq.n	8006d38 <_printf_common+0xa4>
 8006d6a:	3601      	adds	r6, #1
 8006d6c:	e7d9      	b.n	8006d22 <_printf_common+0x8e>
	...

08006d70 <_printf_i>:
 8006d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	460c      	mov	r4, r1
 8006d76:	4691      	mov	r9, r2
 8006d78:	7e27      	ldrb	r7, [r4, #24]
 8006d7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d7c:	2f78      	cmp	r7, #120	; 0x78
 8006d7e:	4680      	mov	r8, r0
 8006d80:	469a      	mov	sl, r3
 8006d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d86:	d807      	bhi.n	8006d98 <_printf_i+0x28>
 8006d88:	2f62      	cmp	r7, #98	; 0x62
 8006d8a:	d80a      	bhi.n	8006da2 <_printf_i+0x32>
 8006d8c:	2f00      	cmp	r7, #0
 8006d8e:	f000 80d8 	beq.w	8006f42 <_printf_i+0x1d2>
 8006d92:	2f58      	cmp	r7, #88	; 0x58
 8006d94:	f000 80a3 	beq.w	8006ede <_printf_i+0x16e>
 8006d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006da0:	e03a      	b.n	8006e18 <_printf_i+0xa8>
 8006da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006da6:	2b15      	cmp	r3, #21
 8006da8:	d8f6      	bhi.n	8006d98 <_printf_i+0x28>
 8006daa:	a001      	add	r0, pc, #4	; (adr r0, 8006db0 <_printf_i+0x40>)
 8006dac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006db0:	08006e09 	.word	0x08006e09
 8006db4:	08006e1d 	.word	0x08006e1d
 8006db8:	08006d99 	.word	0x08006d99
 8006dbc:	08006d99 	.word	0x08006d99
 8006dc0:	08006d99 	.word	0x08006d99
 8006dc4:	08006d99 	.word	0x08006d99
 8006dc8:	08006e1d 	.word	0x08006e1d
 8006dcc:	08006d99 	.word	0x08006d99
 8006dd0:	08006d99 	.word	0x08006d99
 8006dd4:	08006d99 	.word	0x08006d99
 8006dd8:	08006d99 	.word	0x08006d99
 8006ddc:	08006f29 	.word	0x08006f29
 8006de0:	08006e4d 	.word	0x08006e4d
 8006de4:	08006f0b 	.word	0x08006f0b
 8006de8:	08006d99 	.word	0x08006d99
 8006dec:	08006d99 	.word	0x08006d99
 8006df0:	08006f4b 	.word	0x08006f4b
 8006df4:	08006d99 	.word	0x08006d99
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006d99 	.word	0x08006d99
 8006e00:	08006d99 	.word	0x08006d99
 8006e04:	08006f13 	.word	0x08006f13
 8006e08:	680b      	ldr	r3, [r1, #0]
 8006e0a:	1d1a      	adds	r2, r3, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	600a      	str	r2, [r1, #0]
 8006e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0a3      	b.n	8006f64 <_printf_i+0x1f4>
 8006e1c:	6825      	ldr	r5, [r4, #0]
 8006e1e:	6808      	ldr	r0, [r1, #0]
 8006e20:	062e      	lsls	r6, r5, #24
 8006e22:	f100 0304 	add.w	r3, r0, #4
 8006e26:	d50a      	bpl.n	8006e3e <_printf_i+0xce>
 8006e28:	6805      	ldr	r5, [r0, #0]
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	da03      	bge.n	8006e38 <_printf_i+0xc8>
 8006e30:	232d      	movs	r3, #45	; 0x2d
 8006e32:	426d      	negs	r5, r5
 8006e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e38:	485e      	ldr	r0, [pc, #376]	; (8006fb4 <_printf_i+0x244>)
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	e019      	b.n	8006e72 <_printf_i+0x102>
 8006e3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e42:	6805      	ldr	r5, [r0, #0]
 8006e44:	600b      	str	r3, [r1, #0]
 8006e46:	bf18      	it	ne
 8006e48:	b22d      	sxthne	r5, r5
 8006e4a:	e7ef      	b.n	8006e2c <_printf_i+0xbc>
 8006e4c:	680b      	ldr	r3, [r1, #0]
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	1d18      	adds	r0, r3, #4
 8006e52:	6008      	str	r0, [r1, #0]
 8006e54:	0628      	lsls	r0, r5, #24
 8006e56:	d501      	bpl.n	8006e5c <_printf_i+0xec>
 8006e58:	681d      	ldr	r5, [r3, #0]
 8006e5a:	e002      	b.n	8006e62 <_printf_i+0xf2>
 8006e5c:	0669      	lsls	r1, r5, #25
 8006e5e:	d5fb      	bpl.n	8006e58 <_printf_i+0xe8>
 8006e60:	881d      	ldrh	r5, [r3, #0]
 8006e62:	4854      	ldr	r0, [pc, #336]	; (8006fb4 <_printf_i+0x244>)
 8006e64:	2f6f      	cmp	r7, #111	; 0x6f
 8006e66:	bf0c      	ite	eq
 8006e68:	2308      	moveq	r3, #8
 8006e6a:	230a      	movne	r3, #10
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e72:	6866      	ldr	r6, [r4, #4]
 8006e74:	60a6      	str	r6, [r4, #8]
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	bfa2      	ittt	ge
 8006e7a:	6821      	ldrge	r1, [r4, #0]
 8006e7c:	f021 0104 	bicge.w	r1, r1, #4
 8006e80:	6021      	strge	r1, [r4, #0]
 8006e82:	b90d      	cbnz	r5, 8006e88 <_printf_i+0x118>
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	d04d      	beq.n	8006f24 <_printf_i+0x1b4>
 8006e88:	4616      	mov	r6, r2
 8006e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e92:	5dc7      	ldrb	r7, [r0, r7]
 8006e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e98:	462f      	mov	r7, r5
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	d9f4      	bls.n	8006e8a <_printf_i+0x11a>
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d10b      	bne.n	8006ebc <_printf_i+0x14c>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	07df      	lsls	r7, r3, #31
 8006ea8:	d508      	bpl.n	8006ebc <_printf_i+0x14c>
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	6861      	ldr	r1, [r4, #4]
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	bfde      	ittt	le
 8006eb2:	2330      	movle	r3, #48	; 0x30
 8006eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ebc:	1b92      	subs	r2, r2, r6
 8006ebe:	6122      	str	r2, [r4, #16]
 8006ec0:	f8cd a000 	str.w	sl, [sp]
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	aa03      	add	r2, sp, #12
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7ff fee2 	bl	8006c94 <_printf_common>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d14c      	bne.n	8006f6e <_printf_i+0x1fe>
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	b004      	add	sp, #16
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	4835      	ldr	r0, [pc, #212]	; (8006fb4 <_printf_i+0x244>)
 8006ee0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	680e      	ldr	r6, [r1, #0]
 8006ee8:	061f      	lsls	r7, r3, #24
 8006eea:	f856 5b04 	ldr.w	r5, [r6], #4
 8006eee:	600e      	str	r6, [r1, #0]
 8006ef0:	d514      	bpl.n	8006f1c <_printf_i+0x1ac>
 8006ef2:	07d9      	lsls	r1, r3, #31
 8006ef4:	bf44      	itt	mi
 8006ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8006efa:	6023      	strmi	r3, [r4, #0]
 8006efc:	b91d      	cbnz	r5, 8006f06 <_printf_i+0x196>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	f023 0320 	bic.w	r3, r3, #32
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	2310      	movs	r3, #16
 8006f08:	e7b0      	b.n	8006e6c <_printf_i+0xfc>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	f043 0320 	orr.w	r3, r3, #32
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	2378      	movs	r3, #120	; 0x78
 8006f14:	4828      	ldr	r0, [pc, #160]	; (8006fb8 <_printf_i+0x248>)
 8006f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f1a:	e7e3      	b.n	8006ee4 <_printf_i+0x174>
 8006f1c:	065e      	lsls	r6, r3, #25
 8006f1e:	bf48      	it	mi
 8006f20:	b2ad      	uxthmi	r5, r5
 8006f22:	e7e6      	b.n	8006ef2 <_printf_i+0x182>
 8006f24:	4616      	mov	r6, r2
 8006f26:	e7bb      	b.n	8006ea0 <_printf_i+0x130>
 8006f28:	680b      	ldr	r3, [r1, #0]
 8006f2a:	6826      	ldr	r6, [r4, #0]
 8006f2c:	6960      	ldr	r0, [r4, #20]
 8006f2e:	1d1d      	adds	r5, r3, #4
 8006f30:	600d      	str	r5, [r1, #0]
 8006f32:	0635      	lsls	r5, r6, #24
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	d501      	bpl.n	8006f3c <_printf_i+0x1cc>
 8006f38:	6018      	str	r0, [r3, #0]
 8006f3a:	e002      	b.n	8006f42 <_printf_i+0x1d2>
 8006f3c:	0671      	lsls	r1, r6, #25
 8006f3e:	d5fb      	bpl.n	8006f38 <_printf_i+0x1c8>
 8006f40:	8018      	strh	r0, [r3, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	4616      	mov	r6, r2
 8006f48:	e7ba      	b.n	8006ec0 <_printf_i+0x150>
 8006f4a:	680b      	ldr	r3, [r1, #0]
 8006f4c:	1d1a      	adds	r2, r3, #4
 8006f4e:	600a      	str	r2, [r1, #0]
 8006f50:	681e      	ldr	r6, [r3, #0]
 8006f52:	6862      	ldr	r2, [r4, #4]
 8006f54:	2100      	movs	r1, #0
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7f9 f94a 	bl	80001f0 <memchr>
 8006f5c:	b108      	cbz	r0, 8006f62 <_printf_i+0x1f2>
 8006f5e:	1b80      	subs	r0, r0, r6
 8006f60:	6060      	str	r0, [r4, #4]
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	2300      	movs	r3, #0
 8006f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6c:	e7a8      	b.n	8006ec0 <_printf_i+0x150>
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	4632      	mov	r2, r6
 8006f72:	4649      	mov	r1, r9
 8006f74:	4640      	mov	r0, r8
 8006f76:	47d0      	blx	sl
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d0ab      	beq.n	8006ed4 <_printf_i+0x164>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	079b      	lsls	r3, r3, #30
 8006f80:	d413      	bmi.n	8006faa <_printf_i+0x23a>
 8006f82:	68e0      	ldr	r0, [r4, #12]
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	4298      	cmp	r0, r3
 8006f88:	bfb8      	it	lt
 8006f8a:	4618      	movlt	r0, r3
 8006f8c:	e7a4      	b.n	8006ed8 <_printf_i+0x168>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4632      	mov	r2, r6
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d09b      	beq.n	8006ed4 <_printf_i+0x164>
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	9903      	ldr	r1, [sp, #12]
 8006fa2:	1a5b      	subs	r3, r3, r1
 8006fa4:	42ab      	cmp	r3, r5
 8006fa6:	dcf2      	bgt.n	8006f8e <_printf_i+0x21e>
 8006fa8:	e7eb      	b.n	8006f82 <_printf_i+0x212>
 8006faa:	2500      	movs	r5, #0
 8006fac:	f104 0619 	add.w	r6, r4, #25
 8006fb0:	e7f5      	b.n	8006f9e <_printf_i+0x22e>
 8006fb2:	bf00      	nop
 8006fb4:	080077f5 	.word	0x080077f5
 8006fb8:	08007806 	.word	0x08007806

08006fbc <_sbrk_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d06      	ldr	r5, [pc, #24]	; (8006fd8 <_sbrk_r+0x1c>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fb f906 	bl	80021d8 <_sbrk>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_sbrk_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_sbrk_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000344 	.word	0x20000344

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 f8e0 	bl	80071a8 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	05db      	lsls	r3, r3, #23
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	2302      	movs	r3, #2
 8007016:	2200      	movs	r2, #0
 8007018:	f000 f868 	bl	80070ec <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	4632      	mov	r2, r6
 800702a:	463b      	mov	r3, r7
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b817 	b.w	8007064 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f855 	bl	80070ec <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	; 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b813 	b.w	8007088 <_close_r>
	...

08007064 <_write_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_write_r+0x20>)
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fa fb50 	bl	8001718 <_write>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_write_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_write_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000344 	.word	0x20000344

08007088 <_close_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d06      	ldr	r5, [pc, #24]	; (80070a4 <_close_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fb f86b 	bl	800216e <_close>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_close_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_close_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000344 	.word	0x20000344

080070a8 <_fstat_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	; (80070c8 <_fstat_r+0x20>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	602b      	str	r3, [r5, #0]
 80070b6:	f7fb f866 	bl	8002186 <_fstat>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d102      	bne.n	80070c4 <_fstat_r+0x1c>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	b103      	cbz	r3, 80070c4 <_fstat_r+0x1c>
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
 80070c6:	bf00      	nop
 80070c8:	20000344 	.word	0x20000344

080070cc <_isatty_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4d06      	ldr	r5, [pc, #24]	; (80070e8 <_isatty_r+0x1c>)
 80070d0:	2300      	movs	r3, #0
 80070d2:	4604      	mov	r4, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	602b      	str	r3, [r5, #0]
 80070d8:	f7fb f865 	bl	80021a6 <_isatty>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_isatty_r+0x1a>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_isatty_r+0x1a>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20000344 	.word	0x20000344

080070ec <_lseek_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d07      	ldr	r5, [pc, #28]	; (800710c <_lseek_r+0x20>)
 80070f0:	4604      	mov	r4, r0
 80070f2:	4608      	mov	r0, r1
 80070f4:	4611      	mov	r1, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	602a      	str	r2, [r5, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f7fb f85e 	bl	80021bc <_lseek>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_lseek_r+0x1e>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_lseek_r+0x1e>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20000344 	.word	0x20000344

08007110 <memmove>:
 8007110:	4288      	cmp	r0, r1
 8007112:	b510      	push	{r4, lr}
 8007114:	eb01 0402 	add.w	r4, r1, r2
 8007118:	d902      	bls.n	8007120 <memmove+0x10>
 800711a:	4284      	cmp	r4, r0
 800711c:	4623      	mov	r3, r4
 800711e:	d807      	bhi.n	8007130 <memmove+0x20>
 8007120:	1e43      	subs	r3, r0, #1
 8007122:	42a1      	cmp	r1, r4
 8007124:	d008      	beq.n	8007138 <memmove+0x28>
 8007126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800712a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800712e:	e7f8      	b.n	8007122 <memmove+0x12>
 8007130:	4402      	add	r2, r0
 8007132:	4601      	mov	r1, r0
 8007134:	428a      	cmp	r2, r1
 8007136:	d100      	bne.n	800713a <memmove+0x2a>
 8007138:	bd10      	pop	{r4, pc}
 800713a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800713e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007142:	e7f7      	b.n	8007134 <memmove+0x24>

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__malloc_lock+0x8>)
 8007146:	f7ff b9df 	b.w	8006508 <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	2000033c 	.word	0x2000033c

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__malloc_unlock+0x8>)
 8007152:	f7ff b9da 	b.w	800650a <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	2000033c 	.word	0x2000033c

0800715c <_realloc_r>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	4607      	mov	r7, r0
 8007160:	4614      	mov	r4, r2
 8007162:	460e      	mov	r6, r1
 8007164:	b921      	cbnz	r1, 8007170 <_realloc_r+0x14>
 8007166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800716a:	4611      	mov	r1, r2
 800716c:	f7ff ba82 	b.w	8006674 <_malloc_r>
 8007170:	b922      	cbnz	r2, 800717c <_realloc_r+0x20>
 8007172:	f7ff fa2f 	bl	80065d4 <_free_r>
 8007176:	4625      	mov	r5, r4
 8007178:	4628      	mov	r0, r5
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717c:	f000 f826 	bl	80071cc <_malloc_usable_size_r>
 8007180:	42a0      	cmp	r0, r4
 8007182:	d20f      	bcs.n	80071a4 <_realloc_r+0x48>
 8007184:	4621      	mov	r1, r4
 8007186:	4638      	mov	r0, r7
 8007188:	f7ff fa74 	bl	8006674 <_malloc_r>
 800718c:	4605      	mov	r5, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d0f2      	beq.n	8007178 <_realloc_r+0x1c>
 8007192:	4631      	mov	r1, r6
 8007194:	4622      	mov	r2, r4
 8007196:	f7fe fe7b 	bl	8005e90 <memcpy>
 800719a:	4631      	mov	r1, r6
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff fa19 	bl	80065d4 <_free_r>
 80071a2:	e7e9      	b.n	8007178 <_realloc_r+0x1c>
 80071a4:	4635      	mov	r5, r6
 80071a6:	e7e7      	b.n	8007178 <_realloc_r+0x1c>

080071a8 <_read_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d07      	ldr	r5, [pc, #28]	; (80071c8 <_read_r+0x20>)
 80071ac:	4604      	mov	r4, r0
 80071ae:	4608      	mov	r0, r1
 80071b0:	4611      	mov	r1, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	602a      	str	r2, [r5, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	f7fa ffbc 	bl	8002134 <_read>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_read_r+0x1e>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_read_r+0x1e>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	20000344 	.word	0x20000344

080071cc <_malloc_usable_size_r>:
 80071cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d0:	1f18      	subs	r0, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bfbc      	itt	lt
 80071d6:	580b      	ldrlt	r3, [r1, r0]
 80071d8:	18c0      	addlt	r0, r0, r3
 80071da:	4770      	bx	lr

080071dc <_init>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	bf00      	nop
 80071e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e2:	bc08      	pop	{r3}
 80071e4:	469e      	mov	lr, r3
 80071e6:	4770      	bx	lr

080071e8 <_fini>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr
